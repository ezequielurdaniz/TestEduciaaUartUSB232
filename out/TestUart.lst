
_programs/TestUart/out/TestUart.elf:     file format elf32-littlearm
_programs/TestUart/out/TestUart.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0005f9

Program Header:
0x70000001 off    0x00013d1c vaddr 0x1a003d1c paddr 0x1a003d1c align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x0000024c flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00003d24 memsz 0x00003d24 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a003d24 align 2**16
         filesz 0x00000218 memsz 0x00000218 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d18  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000218  10000000  1a003d24  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020218  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020218  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020218  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020218  2**2
                  CONTENTS
  6 .bss          00000034  10000218  10000218  00000218  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020218  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020218  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020218  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020218  2**2
                  CONTENTS
 11 .init_array   00000004  1a003d18  1a003d18  00013d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a003d1c  1a003d1c  00013d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020218  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020218  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020218  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020218  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020218  2**2
                  CONTENTS
 18 .noinit       00000000  1000024c  1000024c  00020218  2**2
                  CONTENTS
 19 .debug_info   0001a36a  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00003ad2  00000000  00000000  0003a582  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00006c49  00000000  00000000  0003e054  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000950  00000000  00000000  00044c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000940  00000000  00000000  000455ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000c090  00000000  00000000  00045f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0000bebb  00000000  00000000  00051fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002769d  00000000  00000000  0005de78  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  00085515  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  00085594  2**0
                  CONTENTS, READONLY
 29 .debug_frame  0000213c  00000000  00000000  000855cc  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000218 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a003d18 l    d  .init_array	00000000 .init_array
1a003d1c l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
1000024c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 TestUart.c
00000000 l    df *ABS*	00000000 system.c
10000218 l     O .bss	00000004 heap_end.5778
00000000 l    df *ABS*	00000000 board.c
1a00074c l     F .text	00000044 Board_LED_Init
1a000790 l     F .text	00000040 Board_TEC_Init
1a0007d0 l     F .text	00000040 Board_GPIO_Init
1a000810 l     F .text	00000030 Board_ADC_Init
1a000840 l     F .text	00000038 Board_SPI_Init
1a000878 l     F .text	00000024 Board_I2C_Init
1a0038a8 l     O .text	00000008 GpioButtons
1a0038b0 l     O .text	0000000c GpioLeds
1a0038bc l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0038d4 l     O .text	00000004 InitClkStates
1a0038d8 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000a68 l     F .text	0000002c Chip_UART_GetIndex
1a00394c l     O .text	00000008 UART_BClock
1a003954 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000c10 l     F .text	00000014 Chip_ADC_GetClockIndex
1a000c24 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000cd8 l     F .text	000000a4 pll_calc_divs
1a000d7c l     F .text	0000010c pll_get_frac
1a000e88 l     F .text	0000004c Chip_Clock_FindBaseClock
1a0010fc l     F .text	00000022 Chip_Clock_GetDivRate
1000021c l     O .bss	00000008 audio_usb_pll_freq
1a003968 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0039d4 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0013d4 l     F .text	00000014 Chip_SSP_GetClockIndex
1a0013e8 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000038 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a003a1c l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_tick.c
10000224 l     O .bss	00000004 callBackFuncParams
10000228 l     O .bss	00000008 tickCounter
10000230 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a001684 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10000234 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 strtol.c
1a001e6c l     F .text	000000f6 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a0022b8 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a0026e4 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 nano-vfscanf.c
00000000 l    df *ABS*	00000000 nano-vfscanf_i.c
00000000 l    df *ABS*	00000000 refill.c
1a003214 l     F .text	00000012 lflush
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strtoul.c
1a00342a l     F .text	000000f4 _strtoul_l.isra.0
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 impure.c
1000004c l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 
1a003d1c l       .init_array	00000000 __init_array_end
1a003d18 l       .bss_RAM5	00000000 __preinit_array_end
1a003d18 l       .init_array	00000000 __init_array_start
1a003d18 l       .bss_RAM5	00000000 __preinit_array_start
1a0037b0 g     F .text	00000010 _malloc_usable_size_r
1a002f64 g     F .text	000000c6 _scanf_chars
1a000f20 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000698 g     F .text	00000012 _isatty_r
1a001d74 g     F .text	000000b8 _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a00150c g     F .text	00000014 uartRxRead
1a0006aa g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a001d44 g     F .text	00000030 printf
1a000932 g     F .text	00000008 __stdio_init
1a0033fe g     F .text	00000024 __sseek
1a002338 g     F .text	00000060 __sinit
1a001fb4 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a00230c g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a000cca g     F .text	0000000c Chip_ADC_SetResolution
1a003762 g     F .text	00000002 __malloc_unlock
1a001650 g     F .text	00000034 SysTick_Handler
1a000ae8 g     F .text	00000040 Chip_UART_SetBaud
1a0005f4  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0008d4 g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a00248c g     F .text	0000001c __locale_ctype_ptr
1a000178  w    F .text	00000002 NMI_Handler
1a003d24 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a00068e g     F .text	0000000a _fstat_r
53ff7296 g       *ABS*	00000000 __valid_user_code_checksum
1a00302c g     F .text	000001e8 _scanf_i
1a003d24 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a002f14 g     F .text	00000050 _vfiscanf_r
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a00119e g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a001d1c g     F .text	00000016 memcpy
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a002300 g     F .text	0000000c _cleanup_r
1a0019d4 g     F .text	00000000 .hidden __aeabi_uldivmod
1000024c g       .noinit	00000000 _noinit
1a001e2c g     F .text	00000010 puts
10000244 g     O .bss	00000004 SystemCoreClock
1a002f14 g     F .text	00000050 _vfscanf_r
1a001e3c g     F .text	00000030 iscanf
1a000a94 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a00121c g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
10000240 g     O .bss	00000001 flag
1a000974 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a000300 g     F .text	00000068 itoa
1a001a04 g     F .text	000002cc .hidden __udivmoddi4
1a00072c g     F .text	00000020 _sbrk_r
1a0038a4 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a0006b4 g     F .text	0000004e _read_r
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a002294 g     F .text	00000024 fflush
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a0014dc g     F .text	00000018 uartRxReady
1a003d1c g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a003bac g     O .text	00000004 _global_impure_ptr
1a003764 g     F .text	0000004c _realloc_r
1a001cd4 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a0008f0 g     F .text	00000030 Board_Init
1a000682  w    F .text	00000002 _init
10000241 g     O .bss	00000001 state
1a000114 g       .text	00000000 __data_section_table
1a001f88 g     F .text	0000002c strtol
1a0001ba  w    F .text	00000002 RTC_IRQHandler
1000024c g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a0005f8 g     F .text	00000088 Reset_Handler
1a0015d4 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a000a30 g     F .text	00000038 Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a000ed4 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a003b4c g     O .text	00000020 __sf_fake_stderr
1a000a0c g     F .text	00000024 Chip_I2C_Init
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a001090 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a003a64 g     O .text	000000e6 gpioPinsInit
1a001400 g     F .text	00000012 Chip_SSP_SetClockRate
1a0018f6 g     F .text	00000016 gpioToggle
1a002712 g     F .text	00000024 __sfputs_r
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a0036c0 g     F .text	00000000 memchr
1a002594 g     F .text	0000009c _free_r
1a001178 g     F .text	00000026 Chip_Clock_GetBaseClock
10000218 g       .bss	00000000 _bss
10000242 g     O .bss	00000001 dato
1a000c98 g     F .text	00000032 Chip_ADC_SetSampleRate
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a001412 g     F .text	0000003e Chip_SSP_SetBitRate
10000243 g     O .bss	00000001 flagdat
1a0013d0 g     F .text	00000002 Chip_GPIO_Init
1a0038d0 g     O .text	00000004 OscRateIn
1a001534 g     F .text	0000007c uartInit
1000024c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a003520 g     F .text	00000024 _strtoul_r
1a000178 g       .text	00000000 __bss_section_table_end
1a000684 g     F .text	0000000a _close_r
1a0016b8 g     F .text	00000194 gpioInit
1a002058 g     F .text	000000dc __swsetup_r
1a001cd0  w    F .text	00000002 .hidden __aeabi_ldiv0
1a002398 g     F .text	00000078 __sfp
1a0033a4 g     F .text	00000022 __sread
1a00190c g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a003760 g     F .text	00000002 __malloc_lock
1a0008c0 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a002240 g     F .text	00000054 _fflush_r
1a003b6c g     O .text	00000020 __sf_fake_stdin
1a000f3c g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a001d32 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000368 g     F .text	0000028c main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a003422 g     F .text	00000008 __sclose
1a001f64 g     F .text	00000024 _strtol_r
1a002630 g     F .text	000000b4 _malloc_r
1a00369c g     F .text	0000001a __ascii_wctomb
1a0014f4 g     F .text	00000018 uartTxReady
1a003544 g     F .text	00000074 __submore
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a0011ac g     F .text	0000003c Chip_Clock_EnableOpts
1a00092a g     F .text	00000008 __stdio_getchar
1a002410 g     F .text	00000038 _fwalk
1a000f58 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a001010 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001488 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a00199c g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a00184c g     F .text	00000056 gpioWrite
1a000680  w    F .text	00000002 _fini
1a001d44 g     F .text	00000030 iprintf
1a002c74 g     F .text	000002a0 __svfiscanf_r
1a000c58 g     F .text	00000040 Chip_ADC_Init
10000248 g     O .bss	00000004 g_pUsbApi
1a00093c g     F .text	00000038 Board_SetupMuxing
1a000b28 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a0015b0 g     F .text	0000000c tickRead
1a000702 g     F .text	00000028 _write_r
10000040 g     O .data	00000008 tickRateMS
1a001e3c g     F .text	00000030 scanf
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a002964 g     F .text	000000ea _printf_common
10000048 g     O .data	00000004 _impure_ptr
1a002134 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a001520 g     F .text	00000014 uartTxWrite
1a003228 g     F .text	00000118 __srefill_r
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a002570 g     F .text	00000024 __ascii_mbtowc
10000000 g       .data	00000000 _data
1000024c g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a001450 g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0024a8 g     F .text	00000048 __swhatbuf_r
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a00089c g     F .text	00000024 Board_Debug_Init
1a000920 g     F .text	0000000a __stdio_putchar
10000218 g       .data	00000000 _edata
1a0009ec g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a00127c g     F .text	00000154 Chip_SetupCoreClock
1a0033c6 g     F .text	00000038 __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a002738 g     F .text	0000022c _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a002448 g     F .text	0000003c _fwalk_reent
1a001268 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a003b8c g     O .text	00000020 __sf_fake_stdout
1a003340 g     F .text	00000064 __sccl
1a003c17 g     O .text	00000101 _ctype_
1a001cd0  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a0024f0 g     F .text	00000080 __smakebuf_r
1a002a50 g     F .text	00000224 _printf_i
1a002484 g     F .text	00000006 __locale_ctype_ptr_l
1a0011e8 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1000023c g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a0018a2 g     F .text	00000054 gpioRead
1a001928 g     F .text	00000074 boardInit
10000238 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a002738 g     F .text	0000022c _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a002c74 g     F .text	000002a0 __svfscanf_r
1a0035b8 g     F .text	000000e4 _ungetc_r
1a0015bc g     F .text	00000018 tickPowerSet
100000ac g     O .data	0000016c __global_locale
1a001120 g     F .text	00000058 Chip_Clock_SetBaseClock
1a0014c0 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a0009e0 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 f9 05 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 96 72 ff 53     }............r.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	51 16 00 1a                                         Q...

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	0d 19 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a003d24 	.word	0x1a003d24
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000218 	.word	0x00000218
1a000120:	1a003d24 	.word	0x1a003d24
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a003d24 	.word	0x1a003d24
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a003d24 	.word	0x1a003d24
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a003d24 	.word	0x1a003d24
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000218 	.word	0x10000218
1a000154:	00000034 	.word	0x00000034
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <itoa>:

/*=====[Definitions of private global variables]=============================*/

char* itoa(int value, char* result, int base) {
   // check that the base if valid
   if (base < 2 || base > 36) { *result = '\0'; return result; }
1a000300:	1e93      	subs	r3, r2, #2
1a000302:	2b22      	cmp	r3, #34	; 0x22
1a000304:	d802      	bhi.n	1a00030c <itoa+0xc>
char* itoa(int value, char* result, int base) {
1a000306:	b4f0      	push	{r4, r5, r6, r7}

   char* ptr = result, *ptr1 = result, tmp_char;
1a000308:	460d      	mov	r5, r1
1a00030a:	e005      	b.n	1a000318 <itoa+0x18>
   if (base < 2 || base > 36) { *result = '\0'; return result; }
1a00030c:	2300      	movs	r3, #0
1a00030e:	700b      	strb	r3, [r1, #0]
      tmp_char = *ptr;
      *ptr--= *ptr1;
      *ptr1++ = tmp_char;
   }
   return result;
}
1a000310:	4608      	mov	r0, r1
1a000312:	4770      	bx	lr
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
1a000314:	4635      	mov	r5, r6
      value /= base;
1a000316:	4620      	mov	r0, r4
1a000318:	fb90 f4f2 	sdiv	r4, r0, r2
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
1a00031c:	fb02 0314 	mls	r3, r2, r4, r0
1a000320:	3323      	adds	r3, #35	; 0x23
1a000322:	1c6e      	adds	r6, r5, #1
1a000324:	4f0f      	ldr	r7, [pc, #60]	; (1a000364 <itoa+0x64>)
1a000326:	5cfb      	ldrb	r3, [r7, r3]
1a000328:	702b      	strb	r3, [r5, #0]
   } while ( value );
1a00032a:	2c00      	cmp	r4, #0
1a00032c:	d1f2      	bne.n	1a000314 <itoa+0x14>
   if (tmp_value < 0) *ptr++ = '-';
1a00032e:	2800      	cmp	r0, #0
1a000330:	db04      	blt.n	1a00033c <itoa+0x3c>
   *ptr-- = '\0';
1a000332:	1e72      	subs	r2, r6, #1
1a000334:	2300      	movs	r3, #0
1a000336:	7033      	strb	r3, [r6, #0]
   char* ptr = result, *ptr1 = result, tmp_char;
1a000338:	460b      	mov	r3, r1
   while(ptr1 < ptr) {
1a00033a:	e00d      	b.n	1a000358 <itoa+0x58>
   if (tmp_value < 0) *ptr++ = '-';
1a00033c:	1cae      	adds	r6, r5, #2
1a00033e:	232d      	movs	r3, #45	; 0x2d
1a000340:	706b      	strb	r3, [r5, #1]
1a000342:	e7f6      	b.n	1a000332 <itoa+0x32>
      tmp_char = *ptr;
1a000344:	4614      	mov	r4, r2
1a000346:	f814 0901 	ldrb.w	r0, [r4], #-1
      *ptr--= *ptr1;
1a00034a:	461d      	mov	r5, r3
1a00034c:	f815 6b01 	ldrb.w	r6, [r5], #1
1a000350:	7016      	strb	r6, [r2, #0]
      *ptr1++ = tmp_char;
1a000352:	7018      	strb	r0, [r3, #0]
1a000354:	462b      	mov	r3, r5
      *ptr--= *ptr1;
1a000356:	4622      	mov	r2, r4
   while(ptr1 < ptr) {
1a000358:	429a      	cmp	r2, r3
1a00035a:	d8f3      	bhi.n	1a000344 <itoa+0x44>
}
1a00035c:	4608      	mov	r0, r1
1a00035e:	bcf0      	pop	{r4, r5, r6, r7}
1a000360:	4770      	bx	lr
1a000362:	bf00      	nop
1a000364:	1a0037c0 	.word	0x1a0037c0

1a000368 <main>:

/*=====[Main function, program entry point after power on or reset]==========*/

int main( void )
{
1a000368:	b530      	push	{r4, r5, lr}
1a00036a:	b0a1      	sub	sp, #132	; 0x84
   // ----- Setup -----------------------------------
	boardInit();
1a00036c:	f001 fadc 	bl	1a001928 <boardInit>
	state = standByState;			//Inicializo la variable state
1a000370:	2500      	movs	r5, #0
1a000372:	4b96      	ldr	r3, [pc, #600]	; (1a0005cc <main+0x264>)
1a000374:	701d      	strb	r5, [r3, #0]
	uint8_t cuenta = 0; //Cantidad de datos
	int32_t list[4];
	char *ptr;

	//-- configuracion UART
	uartConfig( UART_USB, 115200 ); // Inicializar UART_USB a 115200 baudios
1a000376:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a00037a:	2003      	movs	r0, #3
1a00037c:	f001 f8da 	bl	1a001534 <uartInit>
	uartConfig( UART_232, 115200 ); // Inicializar UART_232 a 115200 baudios
1a000380:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000384:	2005      	movs	r0, #5
1a000386:	f001 f8d5 	bl	1a001534 <uartInit>
1a00038a:	e016      	b.n	1a0003ba <main+0x52>

		switch  (state) {

		case standByState:			// Estado principal

			printf("MENU PRINCIPAL\r\n");
1a00038c:	4890      	ldr	r0, [pc, #576]	; (1a0005d0 <main+0x268>)
1a00038e:	f001 fd4d 	bl	1a001e2c <puts>
			printf("(1) Medir Campo\r\n");
1a000392:	4890      	ldr	r0, [pc, #576]	; (1a0005d4 <main+0x26c>)
1a000394:	f001 fd4a 	bl	1a001e2c <puts>
			printf("(2) ---\r\n");
1a000398:	488f      	ldr	r0, [pc, #572]	; (1a0005d8 <main+0x270>)
1a00039a:	f001 fd47 	bl	1a001e2c <puts>
			printf("(3) --- \r\n");
1a00039e:	488f      	ldr	r0, [pc, #572]	; (1a0005dc <main+0x274>)
1a0003a0:	f001 fd44 	bl	1a001e2c <puts>
			scanf("%s",text);   // en el cutecom para scanf y printf usar CR/LF para interpretar el cierre del string
1a0003a4:	a913      	add	r1, sp, #76	; 0x4c
1a0003a6:	488e      	ldr	r0, [pc, #568]	; (1a0005e0 <main+0x278>)
1a0003a8:	f001 fd48 	bl	1a001e3c <iscanf>
			printf("El valor ingresado: %s\r\n", text);
1a0003ac:	a913      	add	r1, sp, #76	; 0x4c
1a0003ae:	488d      	ldr	r0, [pc, #564]	; (1a0005e4 <main+0x27c>)
1a0003b0:	f001 fcc8 	bl	1a001d44 <iprintf>
			state = workState;
1a0003b4:	4b85      	ldr	r3, [pc, #532]	; (1a0005cc <main+0x264>)
1a0003b6:	2201      	movs	r2, #1
1a0003b8:	701a      	strb	r2, [r3, #0]
		switch  (state) {
1a0003ba:	4b84      	ldr	r3, [pc, #528]	; (1a0005cc <main+0x264>)
1a0003bc:	781b      	ldrb	r3, [r3, #0]
1a0003be:	2b05      	cmp	r3, #5
1a0003c0:	f200 8100 	bhi.w	1a0005c4 <main+0x25c>
1a0003c4:	a201      	add	r2, pc, #4	; (adr r2, 1a0003cc <main+0x64>)
1a0003c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0003ca:	bf00      	nop
1a0003cc:	1a00038d 	.word	0x1a00038d
1a0003d0:	1a0003e5 	.word	0x1a0003e5
1a0003d4:	1a000431 	.word	0x1a000431
1a0003d8:	1a0004a1 	.word	0x1a0004a1
1a0003dc:	1a0004d9 	.word	0x1a0004d9
1a0003e0:	1a0003bb 	.word	0x1a0003bb
			break;

		case workState:			// Estado de trabajo

			if (text[0] == '1'){
1a0003e4:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
1a0003e8:	2b31      	cmp	r3, #49	; 0x31
1a0003ea:	d006      	beq.n	1a0003fa <main+0x92>
					uartTxWrite(UART_232, '\r');
					uartTxWrite(UART_232, '\n');
					}
				break;
				}
			state = standByState;
1a0003ec:	4b77      	ldr	r3, [pc, #476]	; (1a0005cc <main+0x264>)
1a0003ee:	2200      	movs	r2, #0
1a0003f0:	701a      	strb	r2, [r3, #0]
			text[0]= '0'; //clear text
1a0003f2:	2330      	movs	r3, #48	; 0x30
1a0003f4:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
			break;
1a0003f8:	e7df      	b.n	1a0003ba <main+0x52>
				text[0]= '0'; 		//clear text
1a0003fa:	2330      	movs	r3, #48	; 0x30
1a0003fc:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				state = busyState;
1a000400:	4b72      	ldr	r3, [pc, #456]	; (1a0005cc <main+0x264>)
1a000402:	2202      	movs	r2, #2
1a000404:	701a      	strb	r2, [r3, #0]
				printf("ENCENDER SONDA... \r\n");
1a000406:	4878      	ldr	r0, [pc, #480]	; (1a0005e8 <main+0x280>)
1a000408:	f001 fd10 	bl	1a001e2c <puts>
				if (uartTxReady(UART_232)){  		//Hay espacio para escribir
1a00040c:	2005      	movs	r0, #5
1a00040e:	f001 f871 	bl	1a0014f4 <uartTxReady>
1a000412:	2800      	cmp	r0, #0
1a000414:	d0d1      	beq.n	1a0003ba <main+0x52>
					uartTxWrite(UART_232, 'o');         //Comando o -> Sonda ON
1a000416:	216f      	movs	r1, #111	; 0x6f
1a000418:	2005      	movs	r0, #5
1a00041a:	f001 f881 	bl	1a001520 <uartTxWrite>
					uartTxWrite(UART_232, '\r');
1a00041e:	210d      	movs	r1, #13
1a000420:	2005      	movs	r0, #5
1a000422:	f001 f87d 	bl	1a001520 <uartTxWrite>
					uartTxWrite(UART_232, '\n');
1a000426:	210a      	movs	r1, #10
1a000428:	2005      	movs	r0, #5
1a00042a:	f001 f879 	bl	1a001520 <uartTxWrite>
1a00042e:	e7c4      	b.n	1a0003ba <main+0x52>

		case busyState:				// Estado de espera

			gpioToggle(LEDB);
1a000430:	202a      	movs	r0, #42	; 0x2a
1a000432:	f001 fa60 	bl	1a0018f6 <gpioToggle>
			delay(100);
1a000436:	2064      	movs	r0, #100	; 0x64
1a000438:	2100      	movs	r1, #0
1a00043a:	f001 faaf 	bl	1a00199c <delay>
			date [0] = 0;							//clear text
1a00043e:	2300      	movs	r3, #0
1a000440:	f88d 3018 	strb.w	r3, [sp, #24]
			while (uartRxReady(UART_232)) { 		//Hay datos no leidos
1a000444:	e00a      	b.n	1a00045c <main+0xf4>
				for (uint8_t i = 0; i < 50; i++){
					date[i]= uartRxRead(UART_232); //Almaceno Dato
1a000446:	2005      	movs	r0, #5
1a000448:	f001 f860 	bl	1a00150c <uartRxRead>
1a00044c:	ab20      	add	r3, sp, #128	; 0x80
1a00044e:	4423      	add	r3, r4
1a000450:	f803 0c68 	strb.w	r0, [r3, #-104]
				for (uint8_t i = 0; i < 50; i++){
1a000454:	3401      	adds	r4, #1
1a000456:	b2e4      	uxtb	r4, r4
1a000458:	2c31      	cmp	r4, #49	; 0x31
1a00045a:	d9f4      	bls.n	1a000446 <main+0xde>
			while (uartRxReady(UART_232)) { 		//Hay datos no leidos
1a00045c:	2005      	movs	r0, #5
1a00045e:	f001 f83d 	bl	1a0014dc <uartRxReady>
1a000462:	b108      	cbz	r0, 1a000468 <main+0x100>
				for (uint8_t i = 0; i < 50; i++){
1a000464:	2400      	movs	r4, #0
1a000466:	e7f7      	b.n	1a000458 <main+0xf0>
					}
				}

			if ((date[0] == ':') && (date[1] == 'o')){  //Repuesta de sonda
1a000468:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a00046c:	2b3a      	cmp	r3, #58	; 0x3a
1a00046e:	d1a4      	bne.n	1a0003ba <main+0x52>
1a000470:	f89d 3019 	ldrb.w	r3, [sp, #25]
1a000474:	2b6f      	cmp	r3, #111	; 0x6f
1a000476:	d1a0      	bne.n	1a0003ba <main+0x52>
				printf("ESTADO DE SONDA: ON\r\n");
1a000478:	485c      	ldr	r0, [pc, #368]	; (1a0005ec <main+0x284>)
1a00047a:	f001 fcd7 	bl	1a001e2c <puts>
				for (uint8_t i = 0; date[i] != '\0'; i++) {
1a00047e:	2400      	movs	r4, #0
1a000480:	e004      	b.n	1a00048c <main+0x124>
					uartTxWrite(UART_USB, date[i]);
1a000482:	2003      	movs	r0, #3
1a000484:	f001 f84c 	bl	1a001520 <uartTxWrite>
				for (uint8_t i = 0; date[i] != '\0'; i++) {
1a000488:	3401      	adds	r4, #1
1a00048a:	b2e4      	uxtb	r4, r4
1a00048c:	ab20      	add	r3, sp, #128	; 0x80
1a00048e:	4423      	add	r3, r4
1a000490:	f813 1c68 	ldrb.w	r1, [r3, #-104]
1a000494:	2900      	cmp	r1, #0
1a000496:	d1f4      	bne.n	1a000482 <main+0x11a>
					}
				state = MeasureState;
1a000498:	4b4c      	ldr	r3, [pc, #304]	; (1a0005cc <main+0x264>)
1a00049a:	2203      	movs	r2, #3
1a00049c:	701a      	strb	r2, [r3, #0]
1a00049e:	e78c      	b.n	1a0003ba <main+0x52>
				}
			break;

		case MeasureState:			// Estado de medicion

			printf("MEDIR CAMPO... \r\n");
1a0004a0:	4853      	ldr	r0, [pc, #332]	; (1a0005f0 <main+0x288>)
1a0004a2:	f001 fcc3 	bl	1a001e2c <puts>

			if (uartTxReady(UART_232)){  		//Hay espacio para escribir
1a0004a6:	2005      	movs	r0, #5
1a0004a8:	f001 f824 	bl	1a0014f4 <uartTxReady>
1a0004ac:	b918      	cbnz	r0, 1a0004b6 <main+0x14e>
				uartTxWrite(UART_232, '5');         //
				uartTxWrite(UART_232, '\r');
				uartTxWrite(UART_232, '\n');
				}

			state = finishState;
1a0004ae:	4b47      	ldr	r3, [pc, #284]	; (1a0005cc <main+0x264>)
1a0004b0:	2204      	movs	r2, #4
1a0004b2:	701a      	strb	r2, [r3, #0]
			break;
1a0004b4:	e781      	b.n	1a0003ba <main+0x52>
				uartTxWrite(UART_232, 'D');         //Comando D5 -> Medir Campo
1a0004b6:	2144      	movs	r1, #68	; 0x44
1a0004b8:	2005      	movs	r0, #5
1a0004ba:	f001 f831 	bl	1a001520 <uartTxWrite>
				uartTxWrite(UART_232, '5');         //
1a0004be:	2135      	movs	r1, #53	; 0x35
1a0004c0:	2005      	movs	r0, #5
1a0004c2:	f001 f82d 	bl	1a001520 <uartTxWrite>
				uartTxWrite(UART_232, '\r');
1a0004c6:	210d      	movs	r1, #13
1a0004c8:	2005      	movs	r0, #5
1a0004ca:	f001 f829 	bl	1a001520 <uartTxWrite>
				uartTxWrite(UART_232, '\n');
1a0004ce:	210a      	movs	r1, #10
1a0004d0:	2005      	movs	r0, #5
1a0004d2:	f001 f825 	bl	1a001520 <uartTxWrite>
1a0004d6:	e7ea      	b.n	1a0004ae <main+0x146>

		case finishState:

			gpioToggle(LED1);
1a0004d8:	202b      	movs	r0, #43	; 0x2b
1a0004da:	f001 fa0c 	bl	1a0018f6 <gpioToggle>
			delay(100);
1a0004de:	2064      	movs	r0, #100	; 0x64
1a0004e0:	2100      	movs	r1, #0
1a0004e2:	f001 fa5b 	bl	1a00199c <delay>
			date [0] = 0; 					//clear text
1a0004e6:	2300      	movs	r3, #0
1a0004e8:	f88d 3018 	strb.w	r3, [sp, #24]


			while (uartRxReady(UART_232)) { 		//Hay datos no leidos
1a0004ec:	e00e      	b.n	1a00050c <main+0x1a4>
				for (uint8_t i = 0; i < 50; i++){

					date[i]= uartRxRead(UART_232); //Almaceno Dato
1a0004ee:	2005      	movs	r0, #5
1a0004f0:	f001 f80c 	bl	1a00150c <uartRxRead>
1a0004f4:	4601      	mov	r1, r0
1a0004f6:	ab20      	add	r3, sp, #128	; 0x80
1a0004f8:	4423      	add	r3, r4
1a0004fa:	f803 0c68 	strb.w	r0, [r3, #-104]

					uartTxWrite(UART_USB, date[i]);; //Almaceno Dato
1a0004fe:	2003      	movs	r0, #3
1a000500:	f001 f80e 	bl	1a001520 <uartTxWrite>
				for (uint8_t i = 0; i < 50; i++){
1a000504:	3401      	adds	r4, #1
1a000506:	b2e4      	uxtb	r4, r4
1a000508:	2c31      	cmp	r4, #49	; 0x31
1a00050a:	d9f0      	bls.n	1a0004ee <main+0x186>
			while (uartRxReady(UART_232)) { 		//Hay datos no leidos
1a00050c:	2005      	movs	r0, #5
1a00050e:	f000 ffe5 	bl	1a0014dc <uartRxReady>
1a000512:	b108      	cbz	r0, 1a000518 <main+0x1b0>
				for (uint8_t i = 0; i < 50; i++){
1a000514:	2400      	movs	r4, #0
1a000516:	e7f7      	b.n	1a000508 <main+0x1a0>
					}
				}

			if ((date[0] == ':') && (date[1] == 'D')){  //Repuesta de sonda seguido del valor de medicion
1a000518:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a00051c:	2b3a      	cmp	r3, #58	; 0x3a
1a00051e:	d011      	beq.n	1a000544 <main+0x1dc>
				cuenta++;
				uartTxWrite(UART_USB, ret);
				state = finishState;
				}

			if (cuenta == 5){
1a000520:	2d05      	cmp	r5, #5
1a000522:	f47f af4a 	bne.w	1a0003ba <main+0x52>
				state = standByState;
1a000526:	2000      	movs	r0, #0
1a000528:	4b28      	ldr	r3, [pc, #160]	; (1a0005cc <main+0x264>)
1a00052a:	7018      	strb	r0, [r3, #0]
				cuenta = 0;
				aux = 0;
				for (uint8_t i = 0; i<5; i++){
1a00052c:	4603      	mov	r3, r0
1a00052e:	2b04      	cmp	r3, #4
1a000530:	d830      	bhi.n	1a000594 <main+0x22c>
					aux = list[i] + aux;
1a000532:	aa20      	add	r2, sp, #128	; 0x80
1a000534:	eb02 0283 	add.w	r2, r2, r3, lsl #2
1a000538:	f852 2c7c 	ldr.w	r2, [r2, #-124]
1a00053c:	4410      	add	r0, r2
				for (uint8_t i = 0; i<5; i++){
1a00053e:	3301      	adds	r3, #1
1a000540:	b2db      	uxtb	r3, r3
1a000542:	e7f4      	b.n	1a00052e <main+0x1c6>
			if ((date[0] == ':') && (date[1] == 'D')){  //Repuesta de sonda seguido del valor de medicion
1a000544:	f89d 3019 	ldrb.w	r3, [sp, #25]
1a000548:	2b44      	cmp	r3, #68	; 0x44
1a00054a:	d1e9      	bne.n	1a000520 <main+0x1b8>
				for(uint8_t i = 19; i < 25; i++) { //:D18  Coordenada C
1a00054c:	2313      	movs	r3, #19
1a00054e:	e00b      	b.n	1a000568 <main+0x200>
					auxX[i-19]= date[i];			 // 18  Coordenada C
1a000550:	f1a3 0213 	sub.w	r2, r3, #19
1a000554:	a920      	add	r1, sp, #128	; 0x80
1a000556:	4419      	add	r1, r3
1a000558:	f811 1c68 	ldrb.w	r1, [r1, #-104]
1a00055c:	a820      	add	r0, sp, #128	; 0x80
1a00055e:	4402      	add	r2, r0
1a000560:	f802 1c6c 	strb.w	r1, [r2, #-108]
				for(uint8_t i = 19; i < 25; i++) { //:D18  Coordenada C
1a000564:	3301      	adds	r3, #1
1a000566:	b2db      	uxtb	r3, r3
1a000568:	2b18      	cmp	r3, #24
1a00056a:	d9f1      	bls.n	1a000550 <main+0x1e8>
				long int ret = strtol (auxX, &ptr, 10) ;  // De CHAR a INT atoi base 10
1a00056c:	220a      	movs	r2, #10
1a00056e:	4669      	mov	r1, sp
1a000570:	a805      	add	r0, sp, #20
1a000572:	f001 fd09 	bl	1a001f88 <strtol>
				list[cuenta] = ret;
1a000576:	ab20      	add	r3, sp, #128	; 0x80
1a000578:	eb03 0385 	add.w	r3, r3, r5, lsl #2
1a00057c:	f843 0c7c 	str.w	r0, [r3, #-124]
				cuenta++;
1a000580:	3501      	adds	r5, #1
1a000582:	b2ed      	uxtb	r5, r5
				uartTxWrite(UART_USB, ret);
1a000584:	b2c1      	uxtb	r1, r0
1a000586:	2003      	movs	r0, #3
1a000588:	f000 ffca 	bl	1a001520 <uartTxWrite>
				state = finishState;
1a00058c:	4b0f      	ldr	r3, [pc, #60]	; (1a0005cc <main+0x264>)
1a00058e:	2204      	movs	r2, #4
1a000590:	701a      	strb	r2, [r3, #0]
1a000592:	e7c5      	b.n	1a000520 <main+0x1b8>
					}

				itoa( aux, auxX, 10 );			// De INT a CHAR  itoa base 10  (aux y list son int32_t)
1a000594:	220a      	movs	r2, #10
1a000596:	a905      	add	r1, sp, #20
1a000598:	f7ff feb2 	bl	1a000300 <itoa>

				uartTxWrite(UART_USB, auxX[0]);
1a00059c:	f89d 1014 	ldrb.w	r1, [sp, #20]
1a0005a0:	2003      	movs	r0, #3
1a0005a2:	f000 ffbd 	bl	1a001520 <uartTxWrite>
				uartTxWrite(UART_USB, auxX[1]);
1a0005a6:	f89d 1015 	ldrb.w	r1, [sp, #21]
1a0005aa:	2003      	movs	r0, #3
1a0005ac:	f000 ffb8 	bl	1a001520 <uartTxWrite>
				uartTxWrite(UART_USB, '\r');
1a0005b0:	210d      	movs	r1, #13
1a0005b2:	2003      	movs	r0, #3
1a0005b4:	f000 ffb4 	bl	1a001520 <uartTxWrite>
				uartTxWrite(UART_USB, '\n');
1a0005b8:	210a      	movs	r1, #10
1a0005ba:	2003      	movs	r0, #3
1a0005bc:	f000 ffb0 	bl	1a001520 <uartTxWrite>
				cuenta = 0;
1a0005c0:	2500      	movs	r5, #0
1a0005c2:	e6fa      	b.n	1a0003ba <main+0x52>
		case errorState:

			break;

		default:
			state = standByState;
1a0005c4:	4b01      	ldr	r3, [pc, #4]	; (1a0005cc <main+0x264>)
1a0005c6:	2200      	movs	r2, #0
1a0005c8:	701a      	strb	r2, [r3, #0]
			break;
1a0005ca:	e6f6      	b.n	1a0003ba <main+0x52>
1a0005cc:	10000241 	.word	0x10000241
1a0005d0:	1a003808 	.word	0x1a003808
1a0005d4:	1a003818 	.word	0x1a003818
1a0005d8:	1a00382c 	.word	0x1a00382c
1a0005dc:	1a003838 	.word	0x1a003838
1a0005e0:	1a003844 	.word	0x1a003844
1a0005e4:	1a003848 	.word	0x1a003848
1a0005e8:	1a003864 	.word	0x1a003864
1a0005ec:	1a003878 	.word	0x1a003878
1a0005f0:	1a003890 	.word	0x1a003890

1a0005f4 <initialise_monitor_handles>:
}
1a0005f4:	4770      	bx	lr
1a0005f6:	Address 0x000000001a0005f6 is out of bounds.


1a0005f8 <Reset_Handler>:
void Reset_Handler(void) {
1a0005f8:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a0005fa:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0005fc:	4b19      	ldr	r3, [pc, #100]	; (1a000664 <Reset_Handler+0x6c>)
1a0005fe:	4a1a      	ldr	r2, [pc, #104]	; (1a000668 <Reset_Handler+0x70>)
1a000600:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000602:	3304      	adds	r3, #4
1a000604:	4a19      	ldr	r2, [pc, #100]	; (1a00066c <Reset_Handler+0x74>)
1a000606:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000608:	2300      	movs	r3, #0
1a00060a:	e005      	b.n	1a000618 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a00060c:	4a18      	ldr	r2, [pc, #96]	; (1a000670 <Reset_Handler+0x78>)
1a00060e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000612:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000616:	3301      	adds	r3, #1
1a000618:	2b07      	cmp	r3, #7
1a00061a:	d9f7      	bls.n	1a00060c <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a00061c:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a00061e:	4b15      	ldr	r3, [pc, #84]	; (1a000674 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000620:	e007      	b.n	1a000632 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000622:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000626:	689a      	ldr	r2, [r3, #8]
1a000628:	6859      	ldr	r1, [r3, #4]
1a00062a:	6818      	ldr	r0, [r3, #0]
1a00062c:	f7ff fdad 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000630:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000632:	4a11      	ldr	r2, [pc, #68]	; (1a000678 <Reset_Handler+0x80>)
1a000634:	4293      	cmp	r3, r2
1a000636:	d3f4      	bcc.n	1a000622 <Reset_Handler+0x2a>
1a000638:	e006      	b.n	1a000648 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a00063a:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a00063c:	6859      	ldr	r1, [r3, #4]
1a00063e:	f854 0b08 	ldr.w	r0, [r4], #8
1a000642:	f7ff fdb1 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000646:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000648:	4a0c      	ldr	r2, [pc, #48]	; (1a00067c <Reset_Handler+0x84>)
1a00064a:	4293      	cmp	r3, r2
1a00064c:	d3f5      	bcc.n	1a00063a <Reset_Handler+0x42>
    SystemInit();
1a00064e:	f000 ff1b 	bl	1a001488 <SystemInit>
    __libc_init_array();
1a000652:	f001 fb3f 	bl	1a001cd4 <__libc_init_array>
    initialise_monitor_handles();
1a000656:	f7ff ffcd 	bl	1a0005f4 <initialise_monitor_handles>
    main();
1a00065a:	f7ff fe85 	bl	1a000368 <main>
        __asm__ volatile("wfi");
1a00065e:	bf30      	wfi
1a000660:	e7fd      	b.n	1a00065e <Reset_Handler+0x66>
1a000662:	bf00      	nop
1a000664:	40053100 	.word	0x40053100
1a000668:	10df1000 	.word	0x10df1000
1a00066c:	01dff7ff 	.word	0x01dff7ff
1a000670:	e000e280 	.word	0xe000e280
1a000674:	1a000114 	.word	0x1a000114
1a000678:	1a000150 	.word	0x1a000150
1a00067c:	1a000178 	.word	0x1a000178

1a000680 <_fini>:
void _fini(void) {}
1a000680:	4770      	bx	lr

1a000682 <_init>:
void _init(void) {}
1a000682:	4770      	bx	lr

1a000684 <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a000684:	2309      	movs	r3, #9
1a000686:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00068c:	4770      	bx	lr

1a00068e <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a00068e:	2358      	movs	r3, #88	; 0x58
1a000690:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000692:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000696:	4770      	bx	lr

1a000698 <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000698:	2902      	cmp	r1, #2
1a00069a:	d801      	bhi.n	1a0006a0 <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a00069c:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a00069e:	4770      	bx	lr
       SET_ERR(EBADF);
1a0006a0:	2309      	movs	r3, #9
1a0006a2:	6003      	str	r3, [r0, #0]
       return -1;
1a0006a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0006a8:	4770      	bx	lr

1a0006aa <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a0006aa:	2358      	movs	r3, #88	; 0x58
1a0006ac:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0006ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0006b2:	4770      	bx	lr

1a0006b4 <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a0006b4:	2902      	cmp	r1, #2
1a0006b6:	d81f      	bhi.n	1a0006f8 <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a0006b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0006bc:	461d      	mov	r5, r3
1a0006be:	4617      	mov	r7, r2
1a0006c0:	4606      	mov	r6, r0
  size_t i = 0;
1a0006c2:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a0006c4:	42ac      	cmp	r4, r5
1a0006c6:	d211      	bcs.n	1a0006ec <_read_r+0x38>
         int c = __stdio_getchar();
1a0006c8:	f000 f92f 	bl	1a00092a <__stdio_getchar>
         if( c != -1 ){
1a0006cc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0006d0:	d0f8      	beq.n	1a0006c4 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a0006d2:	f104 0801 	add.w	r8, r4, #1
1a0006d6:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a0006d8:	280d      	cmp	r0, #13
1a0006da:	d003      	beq.n	1a0006e4 <_read_r+0x30>
1a0006dc:	280a      	cmp	r0, #10
1a0006de:	d001      	beq.n	1a0006e4 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a0006e0:	4644      	mov	r4, r8
1a0006e2:	e7ef      	b.n	1a0006c4 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a0006e4:	f000 f921 	bl	1a00092a <__stdio_getchar>
               return i;
1a0006e8:	4640      	mov	r0, r8
1a0006ea:	e003      	b.n	1a0006f4 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a0006ec:	2313      	movs	r3, #19
1a0006ee:	6033      	str	r3, [r6, #0]
      return -1;
1a0006f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a0006f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a0006f8:	2313      	movs	r3, #19
1a0006fa:	6003      	str	r3, [r0, #0]
      return -1;
1a0006fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000700:	4770      	bx	lr

1a000702 <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000702:	2902      	cmp	r1, #2
1a000704:	d80c      	bhi.n	1a000720 <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000706:	b570      	push	{r4, r5, r6, lr}
1a000708:	461d      	mov	r5, r3
1a00070a:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a00070c:	2400      	movs	r4, #0
1a00070e:	e003      	b.n	1a000718 <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a000710:	5d30      	ldrb	r0, [r6, r4]
1a000712:	f000 f905 	bl	1a000920 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a000716:	3401      	adds	r4, #1
1a000718:	42ac      	cmp	r4, r5
1a00071a:	d3f9      	bcc.n	1a000710 <_write_r+0xe>
       return n;
1a00071c:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a00071e:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000720:	2313      	movs	r3, #19
1a000722:	6003      	str	r3, [r0, #0]
       return -1;
1a000724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000728:	4770      	bx	lr
1a00072a:	Address 0x000000001a00072a is out of bounds.


1a00072c <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a00072c:	4b05      	ldr	r3, [pc, #20]	; (1a000744 <_sbrk_r+0x18>)
1a00072e:	681b      	ldr	r3, [r3, #0]
1a000730:	b123      	cbz	r3, 1a00073c <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a000732:	4b04      	ldr	r3, [pc, #16]	; (1a000744 <_sbrk_r+0x18>)
1a000734:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000736:	4401      	add	r1, r0
1a000738:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a00073a:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a00073c:	4b01      	ldr	r3, [pc, #4]	; (1a000744 <_sbrk_r+0x18>)
1a00073e:	4a02      	ldr	r2, [pc, #8]	; (1a000748 <_sbrk_r+0x1c>)
1a000740:	601a      	str	r2, [r3, #0]
1a000742:	e7f6      	b.n	1a000732 <_sbrk_r+0x6>
1a000744:	10000218 	.word	0x10000218
1a000748:	1000024c 	.word	0x1000024c

1a00074c <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00074c:	2200      	movs	r2, #0
1a00074e:	2a05      	cmp	r2, #5
1a000750:	d819      	bhi.n	1a000786 <Board_LED_Init+0x3a>
{
1a000752:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a000754:	490c      	ldr	r1, [pc, #48]	; (1a000788 <Board_LED_Init+0x3c>)
1a000756:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a00075a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a00075e:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a000760:	4b0a      	ldr	r3, [pc, #40]	; (1a00078c <Board_LED_Init+0x40>)
1a000762:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a000766:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a00076a:	2001      	movs	r0, #1
1a00076c:	40a0      	lsls	r0, r4
1a00076e:	4301      	orrs	r1, r0
1a000770:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a000774:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000778:	2100      	movs	r1, #0
1a00077a:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00077c:	3201      	adds	r2, #1
1a00077e:	2a05      	cmp	r2, #5
1a000780:	d9e8      	bls.n	1a000754 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a000782:	bc70      	pop	{r4, r5, r6}
1a000784:	4770      	bx	lr
1a000786:	4770      	bx	lr
1a000788:	1a0038b0 	.word	0x1a0038b0
1a00078c:	400f4000 	.word	0x400f4000

1a000790 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000790:	2300      	movs	r3, #0
1a000792:	2b03      	cmp	r3, #3
1a000794:	d816      	bhi.n	1a0007c4 <Board_TEC_Init+0x34>
{
1a000796:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000798:	490b      	ldr	r1, [pc, #44]	; (1a0007c8 <Board_TEC_Init+0x38>)
1a00079a:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00079e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0007a2:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0007a4:	4c09      	ldr	r4, [pc, #36]	; (1a0007cc <Board_TEC_Init+0x3c>)
1a0007a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0007aa:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0007ae:	2001      	movs	r0, #1
1a0007b0:	40a8      	lsls	r0, r5
1a0007b2:	ea21 0100 	bic.w	r1, r1, r0
1a0007b6:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0007ba:	3301      	adds	r3, #1
1a0007bc:	2b03      	cmp	r3, #3
1a0007be:	d9eb      	bls.n	1a000798 <Board_TEC_Init+0x8>
   }
}
1a0007c0:	bc30      	pop	{r4, r5}
1a0007c2:	4770      	bx	lr
1a0007c4:	4770      	bx	lr
1a0007c6:	bf00      	nop
1a0007c8:	1a0038a8 	.word	0x1a0038a8
1a0007cc:	400f4000 	.word	0x400f4000

1a0007d0 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0007d0:	2300      	movs	r3, #0
1a0007d2:	2b08      	cmp	r3, #8
1a0007d4:	d816      	bhi.n	1a000804 <Board_GPIO_Init+0x34>
{
1a0007d6:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0007d8:	490b      	ldr	r1, [pc, #44]	; (1a000808 <Board_GPIO_Init+0x38>)
1a0007da:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0007de:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0007e2:	784d      	ldrb	r5, [r1, #1]
1a0007e4:	4c09      	ldr	r4, [pc, #36]	; (1a00080c <Board_GPIO_Init+0x3c>)
1a0007e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0007ea:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0007ee:	2001      	movs	r0, #1
1a0007f0:	40a8      	lsls	r0, r5
1a0007f2:	ea21 0100 	bic.w	r1, r1, r0
1a0007f6:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0007fa:	3301      	adds	r3, #1
1a0007fc:	2b08      	cmp	r3, #8
1a0007fe:	d9eb      	bls.n	1a0007d8 <Board_GPIO_Init+0x8>
   }
}
1a000800:	bc30      	pop	{r4, r5}
1a000802:	4770      	bx	lr
1a000804:	4770      	bx	lr
1a000806:	bf00      	nop
1a000808:	1a0038bc 	.word	0x1a0038bc
1a00080c:	400f4000 	.word	0x400f4000

1a000810 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a000810:	b510      	push	{r4, lr}
1a000812:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a000814:	4c08      	ldr	r4, [pc, #32]	; (1a000838 <Board_ADC_Init+0x28>)
1a000816:	4669      	mov	r1, sp
1a000818:	4620      	mov	r0, r4
1a00081a:	f000 fa1d 	bl	1a000c58 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a00081e:	4a07      	ldr	r2, [pc, #28]	; (1a00083c <Board_ADC_Init+0x2c>)
1a000820:	4669      	mov	r1, sp
1a000822:	4620      	mov	r0, r4
1a000824:	f000 fa38 	bl	1a000c98 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000828:	2200      	movs	r2, #0
1a00082a:	4669      	mov	r1, sp
1a00082c:	4620      	mov	r0, r4
1a00082e:	f000 fa4c 	bl	1a000cca <Chip_ADC_SetResolution>
}
1a000832:	b002      	add	sp, #8
1a000834:	bd10      	pop	{r4, pc}
1a000836:	bf00      	nop
1a000838:	400e3000 	.word	0x400e3000
1a00083c:	00061a80 	.word	0x00061a80

1a000840 <Board_SPI_Init>:
{
1a000840:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a000842:	4c0b      	ldr	r4, [pc, #44]	; (1a000870 <Board_SPI_Init+0x30>)
1a000844:	4620      	mov	r0, r4
1a000846:	f000 fe03 	bl	1a001450 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00084a:	6863      	ldr	r3, [r4, #4]
1a00084c:	f023 0304 	bic.w	r3, r3, #4
1a000850:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000852:	6823      	ldr	r3, [r4, #0]
1a000854:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000858:	f043 0307 	orr.w	r3, r3, #7
1a00085c:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a00085e:	4905      	ldr	r1, [pc, #20]	; (1a000874 <Board_SPI_Init+0x34>)
1a000860:	4620      	mov	r0, r4
1a000862:	f000 fdd6 	bl	1a001412 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000866:	6863      	ldr	r3, [r4, #4]
1a000868:	f043 0302 	orr.w	r3, r3, #2
1a00086c:	6063      	str	r3, [r4, #4]
}
1a00086e:	bd10      	pop	{r4, pc}
1a000870:	400c5000 	.word	0x400c5000
1a000874:	000186a0 	.word	0x000186a0

1a000878 <Board_I2C_Init>:
{
1a000878:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a00087a:	2000      	movs	r0, #0
1a00087c:	f000 f8c6 	bl	1a000a0c <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a000880:	4b04      	ldr	r3, [pc, #16]	; (1a000894 <Board_I2C_Init+0x1c>)
1a000882:	f640 0208 	movw	r2, #2056	; 0x808
1a000886:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a00088a:	4903      	ldr	r1, [pc, #12]	; (1a000898 <Board_I2C_Init+0x20>)
1a00088c:	2000      	movs	r0, #0
1a00088e:	f000 f8cf 	bl	1a000a30 <Chip_I2C_SetClockRate>
}
1a000892:	bd08      	pop	{r3, pc}
1a000894:	40086000 	.word	0x40086000
1a000898:	000f4240 	.word	0x000f4240

1a00089c <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a00089c:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a00089e:	4c07      	ldr	r4, [pc, #28]	; (1a0008bc <Board_Debug_Init+0x20>)
1a0008a0:	4620      	mov	r0, r4
1a0008a2:	f000 f8f7 	bl	1a000a94 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0008a6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0008aa:	4620      	mov	r0, r4
1a0008ac:	f000 f93c 	bl	1a000b28 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0008b0:	2303      	movs	r3, #3
1a0008b2:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0008b4:	2301      	movs	r3, #1
1a0008b6:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a0008b8:	bd10      	pop	{r4, pc}
1a0008ba:	bf00      	nop
1a0008bc:	400c1000 	.word	0x400c1000

1a0008c0 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0008c0:	4b03      	ldr	r3, [pc, #12]	; (1a0008d0 <Board_UARTPutChar+0x10>)
1a0008c2:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a0008c4:	f013 0f20 	tst.w	r3, #32
1a0008c8:	d0fa      	beq.n	1a0008c0 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a0008ca:	4b01      	ldr	r3, [pc, #4]	; (1a0008d0 <Board_UARTPutChar+0x10>)
1a0008cc:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a0008ce:	4770      	bx	lr
1a0008d0:	400c1000 	.word	0x400c1000

1a0008d4 <Board_UARTGetChar>:
	return pUART->LSR;
1a0008d4:	4b05      	ldr	r3, [pc, #20]	; (1a0008ec <Board_UARTGetChar+0x18>)
1a0008d6:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a0008d8:	f013 0f01 	tst.w	r3, #1
1a0008dc:	d003      	beq.n	1a0008e6 <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);         //uint8_t
1a0008de:	4b03      	ldr	r3, [pc, #12]	; (1a0008ec <Board_UARTGetChar+0x18>)
1a0008e0:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a0008e2:	b2c0      	uxtb	r0, r0
1a0008e4:	4770      	bx	lr
   }
   return EOF;
1a0008e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0008ea:	4770      	bx	lr
1a0008ec:	400c1000 	.word	0x400c1000

1a0008f0 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a0008f0:	b508      	push	{r3, lr}
   DEBUGINIT();
1a0008f2:	f7ff ffd3 	bl	1a00089c <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a0008f6:	4809      	ldr	r0, [pc, #36]	; (1a00091c <Board_Init+0x2c>)
1a0008f8:	f000 fd6a 	bl	1a0013d0 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a0008fc:	f7ff ff68 	bl	1a0007d0 <Board_GPIO_Init>
   Board_ADC_Init();
1a000900:	f7ff ff86 	bl	1a000810 <Board_ADC_Init>
   Board_SPI_Init();
1a000904:	f7ff ff9c 	bl	1a000840 <Board_SPI_Init>
   Board_I2C_Init();
1a000908:	f7ff ffb6 	bl	1a000878 <Board_I2C_Init>

   Board_LED_Init();
1a00090c:	f7ff ff1e 	bl	1a00074c <Board_LED_Init>
   Board_TEC_Init();
1a000910:	f7ff ff3e 	bl	1a000790 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a000914:	f000 fca8 	bl	1a001268 <SystemCoreClockUpdate>
}
1a000918:	bd08      	pop	{r3, pc}
1a00091a:	bf00      	nop
1a00091c:	400f4000 	.word	0x400f4000

1a000920 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a000920:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a000922:	b2c0      	uxtb	r0, r0
1a000924:	f7ff ffcc 	bl	1a0008c0 <Board_UARTPutChar>
}
1a000928:	bd08      	pop	{r3, pc}

1a00092a <__stdio_getchar>:

int __stdio_getchar()
{
1a00092a:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a00092c:	f7ff ffd2 	bl	1a0008d4 <Board_UARTGetChar>
}
1a000930:	bd08      	pop	{r3, pc}

1a000932 <__stdio_init>:

void __stdio_init()
{
1a000932:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a000934:	f7ff ffb2 	bl	1a00089c <Board_Debug_Init>
1a000938:	bd08      	pop	{r3, pc}
1a00093a:	Address 0x000000001a00093a is out of bounds.


1a00093c <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a00093c:	2300      	movs	r3, #0
1a00093e:	2b1c      	cmp	r3, #28
1a000940:	d812      	bhi.n	1a000968 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a000942:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000944:	4a09      	ldr	r2, [pc, #36]	; (1a00096c <Board_SetupMuxing+0x30>)
1a000946:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00094a:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a00094e:	784a      	ldrb	r2, [r1, #1]
1a000950:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000952:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a000956:	4906      	ldr	r1, [pc, #24]	; (1a000970 <Board_SetupMuxing+0x34>)
1a000958:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a00095c:	3301      	adds	r3, #1
1a00095e:	2b1c      	cmp	r3, #28
1a000960:	d9f0      	bls.n	1a000944 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000962:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000966:	4770      	bx	lr
1a000968:	4770      	bx	lr
1a00096a:	bf00      	nop
1a00096c:	1a0038d8 	.word	0x1a0038d8
1a000970:	40086000 	.word	0x40086000

1a000974 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000974:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000976:	4a17      	ldr	r2, [pc, #92]	; (1a0009d4 <Board_SetupClocking+0x60>)
1a000978:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a00097c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000980:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000984:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000988:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a00098c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000990:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000994:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000998:	2201      	movs	r2, #1
1a00099a:	490f      	ldr	r1, [pc, #60]	; (1a0009d8 <Board_SetupClocking+0x64>)
1a00099c:	2006      	movs	r0, #6
1a00099e:	f000 fc6d 	bl	1a00127c <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0009a2:	2400      	movs	r4, #0
1a0009a4:	b14c      	cbz	r4, 1a0009ba <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0009a6:	4b0b      	ldr	r3, [pc, #44]	; (1a0009d4 <Board_SetupClocking+0x60>)
1a0009a8:	685a      	ldr	r2, [r3, #4]
1a0009aa:	f022 020c 	bic.w	r2, r2, #12
1a0009ae:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0009b0:	685a      	ldr	r2, [r3, #4]
1a0009b2:	f042 0203 	orr.w	r2, r2, #3
1a0009b6:	605a      	str	r2, [r3, #4]
}
1a0009b8:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0009ba:	4808      	ldr	r0, [pc, #32]	; (1a0009dc <Board_SetupClocking+0x68>)
1a0009bc:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0009c0:	2301      	movs	r3, #1
1a0009c2:	788a      	ldrb	r2, [r1, #2]
1a0009c4:	7849      	ldrb	r1, [r1, #1]
1a0009c6:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0009ca:	f000 fba9 	bl	1a001120 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0009ce:	3401      	adds	r4, #1
1a0009d0:	e7e8      	b.n	1a0009a4 <Board_SetupClocking+0x30>
1a0009d2:	bf00      	nop
1a0009d4:	40043000 	.word	0x40043000
1a0009d8:	0c28cb00 	.word	0x0c28cb00
1a0009dc:	1a0038d4 	.word	0x1a0038d4

1a0009e0 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0009e0:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0009e2:	f7ff ffab 	bl	1a00093c <Board_SetupMuxing>
    Board_SetupClocking();
1a0009e6:	f7ff ffc5 	bl	1a000974 <Board_SetupClocking>
}
1a0009ea:	bd08      	pop	{r3, pc}

1a0009ec <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a0009ec:	2901      	cmp	r1, #1
1a0009ee:	d000      	beq.n	1a0009f2 <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a0009f0:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a0009f2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0009f6:	0082      	lsls	r2, r0, #2
1a0009f8:	4b03      	ldr	r3, [pc, #12]	; (1a000a08 <Chip_I2C_EventHandler+0x1c>)
1a0009fa:	4413      	add	r3, r2
1a0009fc:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a0009fe:	7d13      	ldrb	r3, [r2, #20]
1a000a00:	b2db      	uxtb	r3, r3
1a000a02:	2b04      	cmp	r3, #4
1a000a04:	d0fb      	beq.n	1a0009fe <Chip_I2C_EventHandler+0x12>
1a000a06:	e7f3      	b.n	1a0009f0 <Chip_I2C_EventHandler+0x4>
1a000a08:	10000000 	.word	0x10000000

1a000a0c <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a000a0c:	b570      	push	{r4, r5, r6, lr}
1a000a0e:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a000a10:	4e06      	ldr	r6, [pc, #24]	; (1a000a2c <Chip_I2C_Init+0x20>)
1a000a12:	00c4      	lsls	r4, r0, #3
1a000a14:	1a22      	subs	r2, r4, r0
1a000a16:	0093      	lsls	r3, r2, #2
1a000a18:	4433      	add	r3, r6
1a000a1a:	8898      	ldrh	r0, [r3, #4]
1a000a1c:	f000 fbe4 	bl	1a0011e8 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a000a20:	1b64      	subs	r4, r4, r5
1a000a22:	00a3      	lsls	r3, r4, #2
1a000a24:	58f3      	ldr	r3, [r6, r3]
1a000a26:	226c      	movs	r2, #108	; 0x6c
1a000a28:	619a      	str	r2, [r3, #24]
}
1a000a2a:	bd70      	pop	{r4, r5, r6, pc}
1a000a2c:	10000000 	.word	0x10000000

1a000a30 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a000a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000a34:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a000a36:	4e0b      	ldr	r6, [pc, #44]	; (1a000a64 <Chip_I2C_SetClockRate+0x34>)
1a000a38:	00c5      	lsls	r5, r0, #3
1a000a3a:	1a2b      	subs	r3, r5, r0
1a000a3c:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a000a40:	eb06 0308 	add.w	r3, r6, r8
1a000a44:	8898      	ldrh	r0, [r3, #4]
1a000a46:	f000 fbe9 	bl	1a00121c <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a000a4a:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a000a4e:	f856 3008 	ldr.w	r3, [r6, r8]
1a000a52:	0842      	lsrs	r2, r0, #1
1a000a54:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a000a56:	f856 3008 	ldr.w	r3, [r6, r8]
1a000a5a:	691a      	ldr	r2, [r3, #16]
1a000a5c:	1a80      	subs	r0, r0, r2
1a000a5e:	6158      	str	r0, [r3, #20]
}
1a000a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000a64:	10000000 	.word	0x10000000

1a000a68 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a000a68:	4b09      	ldr	r3, [pc, #36]	; (1a000a90 <Chip_UART_GetIndex+0x28>)
1a000a6a:	4298      	cmp	r0, r3
1a000a6c:	d009      	beq.n	1a000a82 <Chip_UART_GetIndex+0x1a>
1a000a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a000a72:	4298      	cmp	r0, r3
1a000a74:	d007      	beq.n	1a000a86 <Chip_UART_GetIndex+0x1e>
1a000a76:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a000a7a:	4298      	cmp	r0, r3
1a000a7c:	d005      	beq.n	1a000a8a <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a000a7e:	2000      	movs	r0, #0
1a000a80:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a000a82:	2002      	movs	r0, #2
1a000a84:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a000a86:	2003      	movs	r0, #3
1a000a88:	4770      	bx	lr
			return 1;
1a000a8a:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a000a8c:	4770      	bx	lr
1a000a8e:	bf00      	nop
1a000a90:	400c1000 	.word	0x400c1000

1a000a94 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000a94:	b530      	push	{r4, r5, lr}
1a000a96:	b083      	sub	sp, #12
1a000a98:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000a9a:	f7ff ffe5 	bl	1a000a68 <Chip_UART_GetIndex>
1a000a9e:	2301      	movs	r3, #1
1a000aa0:	461a      	mov	r2, r3
1a000aa2:	4619      	mov	r1, r3
1a000aa4:	4d0e      	ldr	r5, [pc, #56]	; (1a000ae0 <Chip_UART_Init+0x4c>)
1a000aa6:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a000aaa:	f000 fb7f 	bl	1a0011ac <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a000aae:	2307      	movs	r3, #7
1a000ab0:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a000ab2:	2300      	movs	r3, #0
1a000ab4:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a000ab6:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a000ab8:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a000aba:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a000abc:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a000abe:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a000ac0:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a000ac2:	4b08      	ldr	r3, [pc, #32]	; (1a000ae4 <Chip_UART_Init+0x50>)
1a000ac4:	429c      	cmp	r4, r3
1a000ac6:	d006      	beq.n	1a000ad6 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a000ac8:	2303      	movs	r3, #3
1a000aca:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a000acc:	2310      	movs	r3, #16
1a000ace:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a000ad0:	9b01      	ldr	r3, [sp, #4]
}
1a000ad2:	b003      	add	sp, #12
1a000ad4:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a000ad6:	2300      	movs	r3, #0
1a000ad8:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a000ada:	69a3      	ldr	r3, [r4, #24]
1a000adc:	9301      	str	r3, [sp, #4]
1a000ade:	e7f3      	b.n	1a000ac8 <Chip_UART_Init+0x34>
1a000ae0:	1a003954 	.word	0x1a003954
1a000ae4:	40082000 	.word	0x40082000

1a000ae8 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a000ae8:	b538      	push	{r3, r4, r5, lr}
1a000aea:	4605      	mov	r5, r0
1a000aec:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000aee:	f7ff ffbb 	bl	1a000a68 <Chip_UART_GetIndex>
1a000af2:	4b0c      	ldr	r3, [pc, #48]	; (1a000b24 <Chip_UART_SetBaud+0x3c>)
1a000af4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000af8:	f000 fb90 	bl	1a00121c <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a000afc:	0123      	lsls	r3, r4, #4
1a000afe:	fbb0 f3f3 	udiv	r3, r0, r3
1a000b02:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000b04:	68ea      	ldr	r2, [r5, #12]
1a000b06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a000b0a:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a000b0c:	6029      	str	r1, [r5, #0]
1a000b0e:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a000b12:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000b14:	68ea      	ldr	r2, [r5, #12]
1a000b16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a000b1a:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a000b1c:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a000b20:	0900      	lsrs	r0, r0, #4
1a000b22:	bd38      	pop	{r3, r4, r5, pc}
1a000b24:	1a00394c 	.word	0x1a00394c

1a000b28 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000b2c:	b083      	sub	sp, #12
1a000b2e:	4683      	mov	fp, r0
1a000b30:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000b32:	f7ff ff99 	bl	1a000a68 <Chip_UART_GetIndex>
1a000b36:	4b35      	ldr	r3, [pc, #212]	; (1a000c0c <Chip_UART_SetBaudFDR+0xe4>)
1a000b38:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000b3c:	f000 fb6e 	bl	1a00121c <Chip_Clock_GetRate>
1a000b40:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a000b42:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000b46:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a000b48:	2300      	movs	r3, #0
1a000b4a:	9301      	str	r3, [sp, #4]
1a000b4c:	46a2      	mov	sl, r4
1a000b4e:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a000b50:	e02a      	b.n	1a000ba8 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a000b52:	4242      	negs	r2, r0
				div ++;
1a000b54:	1c4b      	adds	r3, r1, #1
1a000b56:	e017      	b.n	1a000b88 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a000b58:	b30a      	cbz	r2, 1a000b9e <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a000b5a:	4617      	mov	r7, r2
			sd = d;
1a000b5c:	9501      	str	r5, [sp, #4]
			sm = m;
1a000b5e:	46a2      	mov	sl, r4
			sdiv = div;
1a000b60:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a000b62:	3501      	adds	r5, #1
1a000b64:	42ac      	cmp	r4, r5
1a000b66:	d91e      	bls.n	1a000ba6 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000b68:	0933      	lsrs	r3, r6, #4
1a000b6a:	0730      	lsls	r0, r6, #28
1a000b6c:	fba4 0100 	umull	r0, r1, r4, r0
1a000b70:	fb04 1103 	mla	r1, r4, r3, r1
1a000b74:	1962      	adds	r2, r4, r5
1a000b76:	fb08 f202 	mul.w	r2, r8, r2
1a000b7a:	2300      	movs	r3, #0
1a000b7c:	f000 ff2a 	bl	1a0019d4 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a000b80:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a000b82:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a000b84:	2800      	cmp	r0, #0
1a000b86:	dbe4      	blt.n	1a000b52 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000b88:	4297      	cmp	r7, r2
1a000b8a:	d3ea      	bcc.n	1a000b62 <Chip_UART_SetBaudFDR+0x3a>
1a000b8c:	2b00      	cmp	r3, #0
1a000b8e:	d0e8      	beq.n	1a000b62 <Chip_UART_SetBaudFDR+0x3a>
1a000b90:	0c19      	lsrs	r1, r3, #16
1a000b92:	d1e6      	bne.n	1a000b62 <Chip_UART_SetBaudFDR+0x3a>
1a000b94:	2b02      	cmp	r3, #2
1a000b96:	d8df      	bhi.n	1a000b58 <Chip_UART_SetBaudFDR+0x30>
1a000b98:	2d00      	cmp	r5, #0
1a000b9a:	d0dd      	beq.n	1a000b58 <Chip_UART_SetBaudFDR+0x30>
1a000b9c:	e7e1      	b.n	1a000b62 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a000b9e:	4617      	mov	r7, r2
			sd = d;
1a000ba0:	9501      	str	r5, [sp, #4]
			sm = m;
1a000ba2:	46a2      	mov	sl, r4
			sdiv = div;
1a000ba4:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a000ba6:	3401      	adds	r4, #1
1a000ba8:	b11f      	cbz	r7, 1a000bb2 <Chip_UART_SetBaudFDR+0x8a>
1a000baa:	2c0f      	cmp	r4, #15
1a000bac:	d801      	bhi.n	1a000bb2 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a000bae:	2500      	movs	r5, #0
1a000bb0:	e7d8      	b.n	1a000b64 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a000bb2:	f1b9 0f00 	cmp.w	r9, #0
1a000bb6:	d024      	beq.n	1a000c02 <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000bb8:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000bc0:	f8cb 300c 	str.w	r3, [fp, #12]
1a000bc4:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a000bc8:	f8cb 3000 	str.w	r3, [fp]
1a000bcc:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a000bd0:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000bd4:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000bd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000bdc:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000be0:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000be4:	b2db      	uxtb	r3, r3
1a000be6:	9901      	ldr	r1, [sp, #4]
1a000be8:	f001 020f 	and.w	r2, r1, #15
1a000bec:	4313      	orrs	r3, r2
1a000bee:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000bf2:	0933      	lsrs	r3, r6, #4
1a000bf4:	fb0a f303 	mul.w	r3, sl, r3
1a000bf8:	448a      	add	sl, r1
1a000bfa:	fb09 f90a 	mul.w	r9, r9, sl
1a000bfe:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a000c02:	4648      	mov	r0, r9
1a000c04:	b003      	add	sp, #12
1a000c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000c0a:	bf00      	nop
1a000c0c:	1a00394c 	.word	0x1a00394c

1a000c10 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000c10:	4b03      	ldr	r3, [pc, #12]	; (1a000c20 <Chip_ADC_GetClockIndex+0x10>)
1a000c12:	4298      	cmp	r0, r3
1a000c14:	d001      	beq.n	1a000c1a <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000c16:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000c18:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a000c1a:	2004      	movs	r0, #4
1a000c1c:	4770      	bx	lr
1a000c1e:	bf00      	nop
1a000c20:	400e4000 	.word	0x400e4000

1a000c24 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000c24:	b570      	push	{r4, r5, r6, lr}
1a000c26:	460d      	mov	r5, r1
1a000c28:	4614      	mov	r4, r2
1a000c2a:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000c2c:	f7ff fff0 	bl	1a000c10 <Chip_ADC_GetClockIndex>
1a000c30:	f000 faf4 	bl	1a00121c <Chip_Clock_GetRate>
	if (burstMode) {
1a000c34:	b965      	cbnz	r5, 1a000c50 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a000c36:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000c3a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000c3e:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000c42:	0064      	lsls	r4, r4, #1
1a000c44:	fbb0 f0f4 	udiv	r0, r0, r4
1a000c48:	b2c0      	uxtb	r0, r0
1a000c4a:	3801      	subs	r0, #1
	return div;
}
1a000c4c:	b2c0      	uxtb	r0, r0
1a000c4e:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a000c50:	fb04 f406 	mul.w	r4, r4, r6
1a000c54:	e7f3      	b.n	1a000c3e <getClkDiv+0x1a>
1a000c56:	Address 0x000000001a000c56 is out of bounds.


1a000c58 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000c58:	b538      	push	{r3, r4, r5, lr}
1a000c5a:	4605      	mov	r5, r0
1a000c5c:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a000c5e:	f7ff ffd7 	bl	1a000c10 <Chip_ADC_GetClockIndex>
1a000c62:	2301      	movs	r3, #1
1a000c64:	461a      	mov	r2, r3
1a000c66:	4619      	mov	r1, r3
1a000c68:	f000 faa0 	bl	1a0011ac <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a000c6c:	2100      	movs	r1, #0
1a000c6e:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000c70:	4a08      	ldr	r2, [pc, #32]	; (1a000c94 <Chip_ADC_Init+0x3c>)
1a000c72:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000c74:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000c76:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000c78:	230b      	movs	r3, #11
1a000c7a:	4628      	mov	r0, r5
1a000c7c:	f7ff ffd2 	bl	1a000c24 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000c80:	0200      	lsls	r0, r0, #8
1a000c82:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000c86:	7920      	ldrb	r0, [r4, #4]
1a000c88:	0440      	lsls	r0, r0, #17
1a000c8a:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a000c8e:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a000c90:	6028      	str	r0, [r5, #0]
}
1a000c92:	bd38      	pop	{r3, r4, r5, pc}
1a000c94:	00061a80 	.word	0x00061a80

1a000c98 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000c98:	b570      	push	{r4, r5, r6, lr}
1a000c9a:	4605      	mov	r5, r0
1a000c9c:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a000c9e:	6804      	ldr	r4, [r0, #0]
1a000ca0:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000ca4:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000ca8:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a000caa:	790b      	ldrb	r3, [r1, #4]
1a000cac:	f1c3 030b 	rsb	r3, r3, #11
1a000cb0:	b2db      	uxtb	r3, r3
1a000cb2:	7949      	ldrb	r1, [r1, #5]
1a000cb4:	f7ff ffb6 	bl	1a000c24 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000cb8:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000cbc:	7930      	ldrb	r0, [r6, #4]
1a000cbe:	0440      	lsls	r0, r0, #17
1a000cc0:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a000cc4:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a000cc6:	6028      	str	r0, [r5, #0]
}
1a000cc8:	bd70      	pop	{r4, r5, r6, pc}

1a000cca <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a000cca:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a000ccc:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a000cce:	680a      	ldr	r2, [r1, #0]
1a000cd0:	f7ff ffe2 	bl	1a000c98 <Chip_ADC_SetSampleRate>
}
1a000cd4:	bd08      	pop	{r3, pc}
1a000cd6:	Address 0x000000001a000cd6 is out of bounds.


1a000cd8 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000cd8:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000cda:	680b      	ldr	r3, [r1, #0]
1a000cdc:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000ce0:	d002      	beq.n	1a000ce8 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a000ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000ce6:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a000ce8:	4607      	mov	r7, r0
1a000cea:	2501      	movs	r5, #1
1a000cec:	e03b      	b.n	1a000d66 <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a000cee:	694b      	ldr	r3, [r1, #20]
1a000cf0:	fb03 f302 	mul.w	r3, r3, r2
1a000cf4:	fbb3 f3f5 	udiv	r3, r3, r5
1a000cf8:	e014      	b.n	1a000d24 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a000cfa:	461c      	mov	r4, r3
1a000cfc:	e020      	b.n	1a000d40 <pll_calc_divs+0x68>
		return -val;
1a000cfe:	f1cc 0c00 	rsb	ip, ip, #0
1a000d02:	e020      	b.n	1a000d46 <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a000d04:	3201      	adds	r2, #1
1a000d06:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000d0a:	dc26      	bgt.n	1a000d5a <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a000d0c:	680c      	ldr	r4, [r1, #0]
1a000d0e:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000d12:	d0ec      	beq.n	1a000cee <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000d14:	1c73      	adds	r3, r6, #1
1a000d16:	fa02 fc03 	lsl.w	ip, r2, r3
1a000d1a:	694b      	ldr	r3, [r1, #20]
1a000d1c:	fb03 f30c 	mul.w	r3, r3, ip
1a000d20:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000d24:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a000d74 <pll_calc_divs+0x9c>
1a000d28:	4563      	cmp	r3, ip
1a000d2a:	d9eb      	bls.n	1a000d04 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a000d2c:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a000d78 <pll_calc_divs+0xa0>
1a000d30:	4563      	cmp	r3, ip
1a000d32:	d812      	bhi.n	1a000d5a <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a000d34:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000d38:	d1df      	bne.n	1a000cfa <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a000d3a:	1c74      	adds	r4, r6, #1
1a000d3c:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a000d40:	ebb0 0c04 	subs.w	ip, r0, r4
1a000d44:	d4db      	bmi.n	1a000cfe <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a000d46:	4567      	cmp	r7, ip
1a000d48:	d9dc      	bls.n	1a000d04 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a000d4a:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a000d4c:	1c77      	adds	r7, r6, #1
1a000d4e:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a000d50:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a000d52:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a000d54:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000d56:	4667      	mov	r7, ip
1a000d58:	e7d4      	b.n	1a000d04 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a000d5a:	3601      	adds	r6, #1
1a000d5c:	2e03      	cmp	r6, #3
1a000d5e:	dc01      	bgt.n	1a000d64 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a000d60:	2201      	movs	r2, #1
1a000d62:	e7d0      	b.n	1a000d06 <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a000d64:	3501      	adds	r5, #1
1a000d66:	2d04      	cmp	r5, #4
1a000d68:	dc01      	bgt.n	1a000d6e <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a000d6a:	2600      	movs	r6, #0
1a000d6c:	e7f6      	b.n	1a000d5c <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a000d6e:	bcf0      	pop	{r4, r5, r6, r7}
1a000d70:	4770      	bx	lr
1a000d72:	bf00      	nop
1a000d74:	094c5eff 	.word	0x094c5eff
1a000d78:	1312d000 	.word	0x1312d000

1a000d7c <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000d7e:	b099      	sub	sp, #100	; 0x64
1a000d80:	4605      	mov	r5, r0
1a000d82:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000d84:	225c      	movs	r2, #92	; 0x5c
1a000d86:	2100      	movs	r1, #0
1a000d88:	a801      	add	r0, sp, #4
1a000d8a:	f000 ffd2 	bl	1a001d32 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a000d8e:	2380      	movs	r3, #128	; 0x80
1a000d90:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a000d92:	6963      	ldr	r3, [r4, #20]
1a000d94:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a000d96:	7923      	ldrb	r3, [r4, #4]
1a000d98:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a000d9c:	4669      	mov	r1, sp
1a000d9e:	4628      	mov	r0, r5
1a000da0:	f7ff ff9a 	bl	1a000cd8 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000da4:	9b06      	ldr	r3, [sp, #24]
1a000da6:	42ab      	cmp	r3, r5
1a000da8:	d027      	beq.n	1a000dfa <pll_get_frac+0x7e>
	if (val < 0)
1a000daa:	1aeb      	subs	r3, r5, r3
1a000dac:	d42e      	bmi.n	1a000e0c <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000dae:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000db0:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a000db2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000db6:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a000db8:	6963      	ldr	r3, [r4, #20]
1a000dba:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a000dbc:	7923      	ldrb	r3, [r4, #4]
1a000dbe:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a000dc2:	a910      	add	r1, sp, #64	; 0x40
1a000dc4:	4628      	mov	r0, r5
1a000dc6:	f7ff ff87 	bl	1a000cd8 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000dca:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000dcc:	42ab      	cmp	r3, r5
1a000dce:	d01f      	beq.n	1a000e10 <pll_get_frac+0x94>
	if (val < 0)
1a000dd0:	1aeb      	subs	r3, r5, r3
1a000dd2:	d425      	bmi.n	1a000e20 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000dd4:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a000dd6:	4b2b      	ldr	r3, [pc, #172]	; (1a000e84 <pll_get_frac+0x108>)
1a000dd8:	429d      	cmp	r5, r3
1a000dda:	d923      	bls.n	1a000e24 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000ddc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a000dde:	1aed      	subs	r5, r5, r3
1a000de0:	d433      	bmi.n	1a000e4a <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000de2:	42ae      	cmp	r6, r5
1a000de4:	dc3b      	bgt.n	1a000e5e <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a000de6:	42be      	cmp	r6, r7
1a000de8:	dc31      	bgt.n	1a000e4e <pll_get_frac+0xd2>
			*ppll = pll[0];
1a000dea:	466d      	mov	r5, sp
1a000dec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000dee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000df0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000df4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000df8:	e006      	b.n	1a000e08 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a000dfa:	466d      	mov	r5, sp
1a000dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000e00:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000e04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000e08:	b019      	add	sp, #100	; 0x64
1a000e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000e0c:	425b      	negs	r3, r3
1a000e0e:	e7ce      	b.n	1a000dae <pll_get_frac+0x32>
		*ppll = pll[2];
1a000e10:	ad10      	add	r5, sp, #64	; 0x40
1a000e12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000e14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000e16:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000e1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000e1e:	e7f3      	b.n	1a000e08 <pll_get_frac+0x8c>
		return -val;
1a000e20:	425b      	negs	r3, r3
1a000e22:	e7d7      	b.n	1a000dd4 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a000e24:	2340      	movs	r3, #64	; 0x40
1a000e26:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a000e28:	6963      	ldr	r3, [r4, #20]
1a000e2a:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a000e2c:	a908      	add	r1, sp, #32
1a000e2e:	4628      	mov	r0, r5
1a000e30:	f7ff ff52 	bl	1a000cd8 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000e34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000e36:	42ab      	cmp	r3, r5
1a000e38:	d1d0      	bne.n	1a000ddc <pll_get_frac+0x60>
			*ppll = pll[1];
1a000e3a:	ad08      	add	r5, sp, #32
1a000e3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000e3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000e40:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000e44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000e48:	e7de      	b.n	1a000e08 <pll_get_frac+0x8c>
		return -val;
1a000e4a:	426d      	negs	r5, r5
1a000e4c:	e7c9      	b.n	1a000de2 <pll_get_frac+0x66>
			*ppll = pll[2];
1a000e4e:	ad10      	add	r5, sp, #64	; 0x40
1a000e50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000e52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000e54:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000e58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000e5c:	e7d4      	b.n	1a000e08 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a000e5e:	42af      	cmp	r7, r5
1a000e60:	db07      	blt.n	1a000e72 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a000e62:	ad08      	add	r5, sp, #32
1a000e64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000e66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000e68:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000e6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000e70:	e7ca      	b.n	1a000e08 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a000e72:	ad10      	add	r5, sp, #64	; 0x40
1a000e74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000e78:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000e7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000e80:	e7c2      	b.n	1a000e08 <pll_get_frac+0x8c>
1a000e82:	bf00      	nop
1a000e84:	068e7780 	.word	0x068e7780

1a000e88 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000e88:	b430      	push	{r4, r5}
1a000e8a:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a000e8c:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000e8e:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000e90:	e000      	b.n	1a000e94 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000e92:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000e94:	281c      	cmp	r0, #28
1a000e96:	d118      	bne.n	1a000eca <Chip_Clock_FindBaseClock+0x42>
1a000e98:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000e9c:	0051      	lsls	r1, r2, #1
1a000e9e:	4a0c      	ldr	r2, [pc, #48]	; (1a000ed0 <Chip_Clock_FindBaseClock+0x48>)
1a000ea0:	440a      	add	r2, r1
1a000ea2:	7914      	ldrb	r4, [r2, #4]
1a000ea4:	4284      	cmp	r4, r0
1a000ea6:	d010      	beq.n	1a000eca <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000ea8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000eac:	004a      	lsls	r2, r1, #1
1a000eae:	4908      	ldr	r1, [pc, #32]	; (1a000ed0 <Chip_Clock_FindBaseClock+0x48>)
1a000eb0:	5a8a      	ldrh	r2, [r1, r2]
1a000eb2:	42aa      	cmp	r2, r5
1a000eb4:	d8ed      	bhi.n	1a000e92 <Chip_Clock_FindBaseClock+0xa>
1a000eb6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000eba:	0051      	lsls	r1, r2, #1
1a000ebc:	4a04      	ldr	r2, [pc, #16]	; (1a000ed0 <Chip_Clock_FindBaseClock+0x48>)
1a000ebe:	440a      	add	r2, r1
1a000ec0:	8852      	ldrh	r2, [r2, #2]
1a000ec2:	42aa      	cmp	r2, r5
1a000ec4:	d3e5      	bcc.n	1a000e92 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a000ec6:	4620      	mov	r0, r4
1a000ec8:	e7e4      	b.n	1a000e94 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a000eca:	bc30      	pop	{r4, r5}
1a000ecc:	4770      	bx	lr
1a000ece:	bf00      	nop
1a000ed0:	1a003968 	.word	0x1a003968

1a000ed4 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000ed4:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a000ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000eda:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000edc:	4a0d      	ldr	r2, [pc, #52]	; (1a000f14 <Chip_Clock_EnableCrystal+0x40>)
1a000ede:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a000ee0:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000ee4:	6992      	ldr	r2, [r2, #24]
1a000ee6:	428a      	cmp	r2, r1
1a000ee8:	d001      	beq.n	1a000eee <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000eea:	4a0a      	ldr	r2, [pc, #40]	; (1a000f14 <Chip_Clock_EnableCrystal+0x40>)
1a000eec:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a000eee:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a000ef2:	4a09      	ldr	r2, [pc, #36]	; (1a000f18 <Chip_Clock_EnableCrystal+0x44>)
1a000ef4:	6811      	ldr	r1, [r2, #0]
1a000ef6:	4a09      	ldr	r2, [pc, #36]	; (1a000f1c <Chip_Clock_EnableCrystal+0x48>)
1a000ef8:	4291      	cmp	r1, r2
1a000efa:	d901      	bls.n	1a000f00 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a000efc:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000f00:	4a04      	ldr	r2, [pc, #16]	; (1a000f14 <Chip_Clock_EnableCrystal+0x40>)
1a000f02:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a000f04:	9b01      	ldr	r3, [sp, #4]
1a000f06:	1e5a      	subs	r2, r3, #1
1a000f08:	9201      	str	r2, [sp, #4]
1a000f0a:	2b00      	cmp	r3, #0
1a000f0c:	d1fa      	bne.n	1a000f04 <Chip_Clock_EnableCrystal+0x30>
}
1a000f0e:	b002      	add	sp, #8
1a000f10:	4770      	bx	lr
1a000f12:	bf00      	nop
1a000f14:	40050000 	.word	0x40050000
1a000f18:	1a0038d0 	.word	0x1a0038d0
1a000f1c:	01312cff 	.word	0x01312cff

1a000f20 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000f20:	3012      	adds	r0, #18
1a000f22:	4b05      	ldr	r3, [pc, #20]	; (1a000f38 <Chip_Clock_GetDividerSource+0x18>)
1a000f24:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a000f28:	f010 0f01 	tst.w	r0, #1
1a000f2c:	d102      	bne.n	1a000f34 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000f2e:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000f32:	4770      	bx	lr
		return CLKINPUT_PD;
1a000f34:	2011      	movs	r0, #17
}
1a000f36:	4770      	bx	lr
1a000f38:	40050000 	.word	0x40050000

1a000f3c <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000f3c:	f100 0212 	add.w	r2, r0, #18
1a000f40:	4b03      	ldr	r3, [pc, #12]	; (1a000f50 <Chip_Clock_GetDividerDivisor+0x14>)
1a000f42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000f46:	4b03      	ldr	r3, [pc, #12]	; (1a000f54 <Chip_Clock_GetDividerDivisor+0x18>)
1a000f48:	5c18      	ldrb	r0, [r3, r0]
}
1a000f4a:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000f4e:	4770      	bx	lr
1a000f50:	40050000 	.word	0x40050000
1a000f54:	1a003960 	.word	0x1a003960

1a000f58 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000f58:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a000f5a:	2810      	cmp	r0, #16
1a000f5c:	d80a      	bhi.n	1a000f74 <Chip_Clock_GetClockInputHz+0x1c>
1a000f5e:	e8df f000 	tbb	[pc, r0]
1a000f62:	0b42      	.short	0x0b42
1a000f64:	091f160d 	.word	0x091f160d
1a000f68:	2b282522 	.word	0x2b282522
1a000f6c:	322e0909 	.word	0x322e0909
1a000f70:	3a36      	.short	0x3a36
1a000f72:	3e          	.byte	0x3e
1a000f73:	00          	.byte	0x00
	uint32_t rate = 0;
1a000f74:	2000      	movs	r0, #0
1a000f76:	e038      	b.n	1a000fea <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a000f78:	481e      	ldr	r0, [pc, #120]	; (1a000ff4 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a000f7a:	e036      	b.n	1a000fea <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000f7c:	4b1e      	ldr	r3, [pc, #120]	; (1a000ff8 <Chip_Clock_GetClockInputHz+0xa0>)
1a000f7e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000f82:	f003 0307 	and.w	r3, r3, #7
1a000f86:	2b04      	cmp	r3, #4
1a000f88:	d130      	bne.n	1a000fec <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a000f8a:	2000      	movs	r0, #0
1a000f8c:	e02d      	b.n	1a000fea <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000f8e:	4b1a      	ldr	r3, [pc, #104]	; (1a000ff8 <Chip_Clock_GetClockInputHz+0xa0>)
1a000f90:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000f94:	f003 0307 	and.w	r3, r3, #7
1a000f98:	2b04      	cmp	r3, #4
1a000f9a:	d029      	beq.n	1a000ff0 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a000f9c:	4817      	ldr	r0, [pc, #92]	; (1a000ffc <Chip_Clock_GetClockInputHz+0xa4>)
1a000f9e:	e024      	b.n	1a000fea <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a000fa0:	4b17      	ldr	r3, [pc, #92]	; (1a001000 <Chip_Clock_GetClockInputHz+0xa8>)
1a000fa2:	6818      	ldr	r0, [r3, #0]
		break;
1a000fa4:	e021      	b.n	1a000fea <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a000fa6:	4b17      	ldr	r3, [pc, #92]	; (1a001004 <Chip_Clock_GetClockInputHz+0xac>)
1a000fa8:	6818      	ldr	r0, [r3, #0]
		break;
1a000faa:	e01e      	b.n	1a000fea <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000fac:	4b16      	ldr	r3, [pc, #88]	; (1a001008 <Chip_Clock_GetClockInputHz+0xb0>)
1a000fae:	6818      	ldr	r0, [r3, #0]
		break;
1a000fb0:	e01b      	b.n	1a000fea <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a000fb2:	4b15      	ldr	r3, [pc, #84]	; (1a001008 <Chip_Clock_GetClockInputHz+0xb0>)
1a000fb4:	6858      	ldr	r0, [r3, #4]
		break;
1a000fb6:	e018      	b.n	1a000fea <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a000fb8:	f000 f86a 	bl	1a001090 <Chip_Clock_GetMainPLLHz>
		break;
1a000fbc:	e015      	b.n	1a000fea <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000fbe:	2100      	movs	r1, #0
1a000fc0:	f000 f89c 	bl	1a0010fc <Chip_Clock_GetDivRate>
		break;
1a000fc4:	e011      	b.n	1a000fea <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000fc6:	2101      	movs	r1, #1
1a000fc8:	f000 f898 	bl	1a0010fc <Chip_Clock_GetDivRate>
		break;
1a000fcc:	e00d      	b.n	1a000fea <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000fce:	2102      	movs	r1, #2
1a000fd0:	f000 f894 	bl	1a0010fc <Chip_Clock_GetDivRate>
		break;
1a000fd4:	e009      	b.n	1a000fea <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000fd6:	2103      	movs	r1, #3
1a000fd8:	f000 f890 	bl	1a0010fc <Chip_Clock_GetDivRate>
		break;
1a000fdc:	e005      	b.n	1a000fea <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000fde:	2104      	movs	r1, #4
1a000fe0:	f000 f88c 	bl	1a0010fc <Chip_Clock_GetDivRate>
		break;
1a000fe4:	e001      	b.n	1a000fea <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a000fe6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a000fea:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a000fec:	4803      	ldr	r0, [pc, #12]	; (1a000ffc <Chip_Clock_GetClockInputHz+0xa4>)
1a000fee:	e7fc      	b.n	1a000fea <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a000ff0:	4806      	ldr	r0, [pc, #24]	; (1a00100c <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a000ff2:	e7fa      	b.n	1a000fea <Chip_Clock_GetClockInputHz+0x92>
1a000ff4:	00b71b00 	.word	0x00b71b00
1a000ff8:	40043000 	.word	0x40043000
1a000ffc:	017d7840 	.word	0x017d7840
1a001000:	1a0038a4 	.word	0x1a0038a4
1a001004:	1a0038d0 	.word	0x1a0038d0
1a001008:	1000021c 	.word	0x1000021c
1a00100c:	02faf080 	.word	0x02faf080

1a001010 <Chip_Clock_CalcMainPLLValue>:
{
1a001010:	b538      	push	{r3, r4, r5, lr}
1a001012:	4605      	mov	r5, r0
1a001014:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a001016:	7908      	ldrb	r0, [r1, #4]
1a001018:	f7ff ff9e 	bl	1a000f58 <Chip_Clock_GetClockInputHz>
1a00101c:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a00101e:	4b19      	ldr	r3, [pc, #100]	; (1a001084 <Chip_Clock_CalcMainPLLValue+0x74>)
1a001020:	442b      	add	r3, r5
1a001022:	4a19      	ldr	r2, [pc, #100]	; (1a001088 <Chip_Clock_CalcMainPLLValue+0x78>)
1a001024:	4293      	cmp	r3, r2
1a001026:	d821      	bhi.n	1a00106c <Chip_Clock_CalcMainPLLValue+0x5c>
1a001028:	b318      	cbz	r0, 1a001072 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a00102a:	2380      	movs	r3, #128	; 0x80
1a00102c:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a00102e:	2300      	movs	r3, #0
1a001030:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a001032:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a001034:	fbb5 f3f0 	udiv	r3, r5, r0
1a001038:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a00103a:	4a14      	ldr	r2, [pc, #80]	; (1a00108c <Chip_Clock_CalcMainPLLValue+0x7c>)
1a00103c:	4295      	cmp	r5, r2
1a00103e:	d903      	bls.n	1a001048 <Chip_Clock_CalcMainPLLValue+0x38>
1a001040:	fb03 f000 	mul.w	r0, r3, r0
1a001044:	42a8      	cmp	r0, r5
1a001046:	d007      	beq.n	1a001058 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a001048:	4621      	mov	r1, r4
1a00104a:	4628      	mov	r0, r5
1a00104c:	f7ff fe96 	bl	1a000d7c <pll_get_frac>
		if (!ppll->nsel) {
1a001050:	68a3      	ldr	r3, [r4, #8]
1a001052:	b18b      	cbz	r3, 1a001078 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a001054:	3b01      	subs	r3, #1
1a001056:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a001058:	6923      	ldr	r3, [r4, #16]
1a00105a:	b183      	cbz	r3, 1a00107e <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a00105c:	68e2      	ldr	r2, [r4, #12]
1a00105e:	b10a      	cbz	r2, 1a001064 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a001060:	3a01      	subs	r2, #1
1a001062:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a001064:	3b01      	subs	r3, #1
1a001066:	6123      	str	r3, [r4, #16]
	return 0;
1a001068:	2000      	movs	r0, #0
}
1a00106a:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a00106c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001070:	e7fb      	b.n	1a00106a <Chip_Clock_CalcMainPLLValue+0x5a>
1a001072:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001076:	e7f8      	b.n	1a00106a <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a001078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00107c:	e7f5      	b.n	1a00106a <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a00107e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001082:	e7f2      	b.n	1a00106a <Chip_Clock_CalcMainPLLValue+0x5a>
1a001084:	ff6b3a10 	.word	0xff6b3a10
1a001088:	0b940510 	.word	0x0b940510
1a00108c:	094c5eff 	.word	0x094c5eff

1a001090 <Chip_Clock_GetMainPLLHz>:
{
1a001090:	b530      	push	{r4, r5, lr}
1a001092:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a001094:	4d17      	ldr	r5, [pc, #92]	; (1a0010f4 <Chip_Clock_GetMainPLLHz+0x64>)
1a001096:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a001098:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a00109c:	f7ff ff5c 	bl	1a000f58 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a0010a0:	4b15      	ldr	r3, [pc, #84]	; (1a0010f8 <Chip_Clock_GetMainPLLHz+0x68>)
1a0010a2:	681b      	ldr	r3, [r3, #0]
1a0010a4:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a0010a6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a0010a8:	f013 0f01 	tst.w	r3, #1
1a0010ac:	d01f      	beq.n	1a0010ee <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a0010ae:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a0010b2:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a0010b6:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a0010ba:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a0010be:	3301      	adds	r3, #1
	n = nsel + 1;
1a0010c0:	3201      	adds	r2, #1
	p = ptab[psel];
1a0010c2:	f10d 0c08 	add.w	ip, sp, #8
1a0010c6:	4461      	add	r1, ip
1a0010c8:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a0010cc:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0010d0:	d108      	bne.n	1a0010e4 <Chip_Clock_GetMainPLLHz+0x54>
1a0010d2:	b93d      	cbnz	r5, 1a0010e4 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a0010d4:	0049      	lsls	r1, r1, #1
1a0010d6:	fbb3 f3f1 	udiv	r3, r3, r1
1a0010da:	fbb0 f0f2 	udiv	r0, r0, r2
1a0010de:	fb00 f003 	mul.w	r0, r0, r3
1a0010e2:	e005      	b.n	1a0010f0 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a0010e4:	fbb0 f0f2 	udiv	r0, r0, r2
1a0010e8:	fb03 f000 	mul.w	r0, r3, r0
1a0010ec:	e000      	b.n	1a0010f0 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a0010ee:	2000      	movs	r0, #0
}
1a0010f0:	b003      	add	sp, #12
1a0010f2:	bd30      	pop	{r4, r5, pc}
1a0010f4:	40050000 	.word	0x40050000
1a0010f8:	1a00395c 	.word	0x1a00395c

1a0010fc <Chip_Clock_GetDivRate>:
{
1a0010fc:	b538      	push	{r3, r4, r5, lr}
1a0010fe:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a001100:	4608      	mov	r0, r1
1a001102:	f7ff ff0d 	bl	1a000f20 <Chip_Clock_GetDividerSource>
1a001106:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a001108:	4620      	mov	r0, r4
1a00110a:	f7ff ff17 	bl	1a000f3c <Chip_Clock_GetDividerDivisor>
1a00110e:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a001110:	4628      	mov	r0, r5
1a001112:	f7ff ff21 	bl	1a000f58 <Chip_Clock_GetClockInputHz>
1a001116:	3401      	adds	r4, #1
}
1a001118:	fbb0 f0f4 	udiv	r0, r0, r4
1a00111c:	bd38      	pop	{r3, r4, r5, pc}
1a00111e:	Address 0x000000001a00111e is out of bounds.


1a001120 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a001120:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a001122:	f100 0416 	add.w	r4, r0, #22
1a001126:	00a4      	lsls	r4, r4, #2
1a001128:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a00112c:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a001130:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a001132:	281b      	cmp	r0, #27
1a001134:	d813      	bhi.n	1a00115e <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a001136:	2911      	cmp	r1, #17
1a001138:	d01a      	beq.n	1a001170 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a00113a:	4d0e      	ldr	r5, [pc, #56]	; (1a001174 <Chip_Clock_SetBaseClock+0x54>)
1a00113c:	4025      	ands	r5, r4

			if (autoblocken) {
1a00113e:	b10a      	cbz	r2, 1a001144 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a001140:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a001144:	b10b      	cbz	r3, 1a00114a <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a001146:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a00114a:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a00114e:	3016      	adds	r0, #22
1a001150:	0080      	lsls	r0, r0, #2
1a001152:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001156:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00115a:	6045      	str	r5, [r0, #4]
1a00115c:	e008      	b.n	1a001170 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a00115e:	f044 0401 	orr.w	r4, r4, #1
1a001162:	3016      	adds	r0, #22
1a001164:	0080      	lsls	r0, r0, #2
1a001166:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00116a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00116e:	6044      	str	r4, [r0, #4]
	}
}
1a001170:	bc30      	pop	{r4, r5}
1a001172:	4770      	bx	lr
1a001174:	e0fff7fe 	.word	0xe0fff7fe

1a001178 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a001178:	281b      	cmp	r0, #27
1a00117a:	d80c      	bhi.n	1a001196 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a00117c:	3016      	adds	r0, #22
1a00117e:	0080      	lsls	r0, r0, #2
1a001180:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001184:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001188:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a00118a:	f010 0f01 	tst.w	r0, #1
1a00118e:	d104      	bne.n	1a00119a <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001190:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001194:	4770      	bx	lr
		return CLKINPUT_PD;
1a001196:	2011      	movs	r0, #17
1a001198:	4770      	bx	lr
		return CLKINPUT_PD;
1a00119a:	2011      	movs	r0, #17
}
1a00119c:	4770      	bx	lr

1a00119e <Chip_Clock_GetBaseClocktHz>:
{
1a00119e:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a0011a0:	f7ff ffea 	bl	1a001178 <Chip_Clock_GetBaseClock>
1a0011a4:	f7ff fed8 	bl	1a000f58 <Chip_Clock_GetClockInputHz>
}
1a0011a8:	bd08      	pop	{r3, pc}
1a0011aa:	Address 0x000000001a0011aa is out of bounds.


1a0011ac <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0011ac:	b969      	cbnz	r1, 1a0011ca <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a0011ae:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a0011b0:	b10a      	cbz	r2, 1a0011b6 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a0011b2:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0011b6:	2b02      	cmp	r3, #2
1a0011b8:	d009      	beq.n	1a0011ce <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0011ba:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0011be:	d209      	bcs.n	1a0011d4 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0011c0:	3020      	adds	r0, #32
1a0011c2:	4b07      	ldr	r3, [pc, #28]	; (1a0011e0 <Chip_Clock_EnableOpts+0x34>)
1a0011c4:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a0011c8:	4770      	bx	lr
		reg |= (1 << 1);
1a0011ca:	2103      	movs	r1, #3
1a0011cc:	e7f0      	b.n	1a0011b0 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a0011ce:	f041 0120 	orr.w	r1, r1, #32
1a0011d2:	e7f2      	b.n	1a0011ba <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0011d4:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0011d8:	4b02      	ldr	r3, [pc, #8]	; (1a0011e4 <Chip_Clock_EnableOpts+0x38>)
1a0011da:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0011de:	4770      	bx	lr
1a0011e0:	40051000 	.word	0x40051000
1a0011e4:	40052000 	.word	0x40052000

1a0011e8 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0011e8:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0011ec:	d208      	bcs.n	1a001200 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0011ee:	4a09      	ldr	r2, [pc, #36]	; (1a001214 <Chip_Clock_Enable+0x2c>)
1a0011f0:	3020      	adds	r0, #32
1a0011f2:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0011f6:	f043 0301 	orr.w	r3, r3, #1
1a0011fa:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a0011fe:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a001200:	4a05      	ldr	r2, [pc, #20]	; (1a001218 <Chip_Clock_Enable+0x30>)
1a001202:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001206:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00120a:	f043 0301 	orr.w	r3, r3, #1
1a00120e:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001212:	4770      	bx	lr
1a001214:	40051000 	.word	0x40051000
1a001218:	40052000 	.word	0x40052000

1a00121c <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a00121c:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a00121e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001222:	d309      	bcc.n	1a001238 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001224:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a001228:	4a0d      	ldr	r2, [pc, #52]	; (1a001260 <Chip_Clock_GetRate+0x44>)
1a00122a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a00122e:	f014 0f01 	tst.w	r4, #1
1a001232:	d107      	bne.n	1a001244 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a001234:	2000      	movs	r0, #0
	}

	return rate;
}
1a001236:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001238:	f100 0320 	add.w	r3, r0, #32
1a00123c:	4a09      	ldr	r2, [pc, #36]	; (1a001264 <Chip_Clock_GetRate+0x48>)
1a00123e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a001242:	e7f4      	b.n	1a00122e <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a001244:	f7ff fe20 	bl	1a000e88 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a001248:	f7ff ffa9 	bl	1a00119e <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a00124c:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001250:	d103      	bne.n	1a00125a <Chip_Clock_GetRate+0x3e>
			div = 1;
1a001252:	2301      	movs	r3, #1
		rate = rate / div;
1a001254:	fbb0 f0f3 	udiv	r0, r0, r3
1a001258:	e7ed      	b.n	1a001236 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a00125a:	2302      	movs	r3, #2
1a00125c:	e7fa      	b.n	1a001254 <Chip_Clock_GetRate+0x38>
1a00125e:	bf00      	nop
1a001260:	40052000 	.word	0x40052000
1a001264:	40051000 	.word	0x40051000

1a001268 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a001268:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a00126a:	2069      	movs	r0, #105	; 0x69
1a00126c:	f7ff ffd6 	bl	1a00121c <Chip_Clock_GetRate>
1a001270:	4b01      	ldr	r3, [pc, #4]	; (1a001278 <SystemCoreClockUpdate+0x10>)
1a001272:	6018      	str	r0, [r3, #0]
}
1a001274:	bd08      	pop	{r3, pc}
1a001276:	bf00      	nop
1a001278:	10000244 	.word	0x10000244

1a00127c <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a00127c:	b570      	push	{r4, r5, r6, lr}
1a00127e:	b08a      	sub	sp, #40	; 0x28
1a001280:	4605      	mov	r5, r0
1a001282:	460e      	mov	r6, r1
1a001284:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a001286:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00128a:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a00128c:	2806      	cmp	r0, #6
1a00128e:	d018      	beq.n	1a0012c2 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a001290:	2300      	movs	r3, #0
1a001292:	2201      	movs	r2, #1
1a001294:	4629      	mov	r1, r5
1a001296:	2004      	movs	r0, #4
1a001298:	f7ff ff42 	bl	1a001120 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a00129c:	4a49      	ldr	r2, [pc, #292]	; (1a0013c4 <Chip_SetupCoreClock+0x148>)
1a00129e:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0012a0:	f043 0301 	orr.w	r3, r3, #1
1a0012a4:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0012a6:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0012aa:	a901      	add	r1, sp, #4
1a0012ac:	4630      	mov	r0, r6
1a0012ae:	f7ff feaf 	bl	1a001010 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0012b2:	4b45      	ldr	r3, [pc, #276]	; (1a0013c8 <Chip_SetupCoreClock+0x14c>)
1a0012b4:	429e      	cmp	r6, r3
1a0012b6:	d916      	bls.n	1a0012e6 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0012b8:	9b01      	ldr	r3, [sp, #4]
1a0012ba:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0012be:	d003      	beq.n	1a0012c8 <Chip_SetupCoreClock+0x4c>
1a0012c0:	e7fe      	b.n	1a0012c0 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a0012c2:	f7ff fe07 	bl	1a000ed4 <Chip_Clock_EnableCrystal>
1a0012c6:	e7e3      	b.n	1a001290 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a0012c8:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0012cc:	d005      	beq.n	1a0012da <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0012ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0012d2:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a0012d4:	2500      	movs	r5, #0
			direct = 1;
1a0012d6:	2601      	movs	r6, #1
1a0012d8:	e007      	b.n	1a0012ea <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0012da:	9b04      	ldr	r3, [sp, #16]
1a0012dc:	3301      	adds	r3, #1
1a0012de:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0012e0:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a0012e2:	2600      	movs	r6, #0
1a0012e4:	e001      	b.n	1a0012ea <Chip_SetupCoreClock+0x6e>
1a0012e6:	2500      	movs	r5, #0
1a0012e8:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0012ea:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0012ee:	9b01      	ldr	r3, [sp, #4]
1a0012f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0012f4:	9a05      	ldr	r2, [sp, #20]
1a0012f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0012fa:	9a03      	ldr	r2, [sp, #12]
1a0012fc:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001300:	9a04      	ldr	r2, [sp, #16]
1a001302:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001306:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00130a:	4a2e      	ldr	r2, [pc, #184]	; (1a0013c4 <Chip_SetupCoreClock+0x148>)
1a00130c:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a00130e:	4b2d      	ldr	r3, [pc, #180]	; (1a0013c4 <Chip_SetupCoreClock+0x148>)
1a001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a001312:	f013 0f01 	tst.w	r3, #1
1a001316:	d0fa      	beq.n	1a00130e <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a001318:	2300      	movs	r3, #0
1a00131a:	2201      	movs	r2, #1
1a00131c:	2109      	movs	r1, #9
1a00131e:	2004      	movs	r0, #4
1a001320:	f7ff fefe 	bl	1a001120 <Chip_Clock_SetBaseClock>

	if (direct) {
1a001324:	b1fe      	cbz	r6, 1a001366 <Chip_SetupCoreClock+0xea>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001326:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00132a:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a00132c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00132e:	1e5a      	subs	r2, r3, #1
1a001330:	9209      	str	r2, [sp, #36]	; 0x24
1a001332:	2b00      	cmp	r3, #0
1a001334:	d1fa      	bne.n	1a00132c <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a001336:	9b01      	ldr	r3, [sp, #4]
1a001338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00133c:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00133e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001342:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001346:	9a05      	ldr	r2, [sp, #20]
1a001348:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00134c:	9a03      	ldr	r2, [sp, #12]
1a00134e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001352:	9a04      	ldr	r2, [sp, #16]
1a001354:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001358:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00135c:	4a19      	ldr	r2, [pc, #100]	; (1a0013c4 <Chip_SetupCoreClock+0x148>)
1a00135e:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001360:	b36c      	cbz	r4, 1a0013be <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001362:	2400      	movs	r4, #0
1a001364:	e029      	b.n	1a0013ba <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a001366:	2d00      	cmp	r5, #0
1a001368:	d0fa      	beq.n	1a001360 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00136a:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00136e:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a001370:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001372:	1e5a      	subs	r2, r3, #1
1a001374:	9209      	str	r2, [sp, #36]	; 0x24
1a001376:	2b00      	cmp	r3, #0
1a001378:	d1fa      	bne.n	1a001370 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a00137a:	9b04      	ldr	r3, [sp, #16]
1a00137c:	1e5a      	subs	r2, r3, #1
1a00137e:	9204      	str	r2, [sp, #16]
1a001380:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a001384:	9b01      	ldr	r3, [sp, #4]
1a001386:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a00138a:	9905      	ldr	r1, [sp, #20]
1a00138c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001390:	9903      	ldr	r1, [sp, #12]
1a001392:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a001396:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00139a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00139e:	4a09      	ldr	r2, [pc, #36]	; (1a0013c4 <Chip_SetupCoreClock+0x148>)
1a0013a0:	6453      	str	r3, [r2, #68]	; 0x44
1a0013a2:	e7dd      	b.n	1a001360 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0013a4:	4809      	ldr	r0, [pc, #36]	; (1a0013cc <Chip_SetupCoreClock+0x150>)
1a0013a6:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0013aa:	78cb      	ldrb	r3, [r1, #3]
1a0013ac:	788a      	ldrb	r2, [r1, #2]
1a0013ae:	7849      	ldrb	r1, [r1, #1]
1a0013b0:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0013b4:	f7ff feb4 	bl	1a001120 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0013b8:	3401      	adds	r4, #1
1a0013ba:	2c11      	cmp	r4, #17
1a0013bc:	d9f2      	bls.n	1a0013a4 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a0013be:	b00a      	add	sp, #40	; 0x28
1a0013c0:	bd70      	pop	{r4, r5, r6, pc}
1a0013c2:	bf00      	nop
1a0013c4:	40050000 	.word	0x40050000
1a0013c8:	068e7780 	.word	0x068e7780
1a0013cc:	1a0039d4 	.word	0x1a0039d4

1a0013d0 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a0013d0:	4770      	bx	lr
1a0013d2:	Address 0x000000001a0013d2 is out of bounds.


1a0013d4 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0013d4:	4b03      	ldr	r3, [pc, #12]	; (1a0013e4 <Chip_SSP_GetClockIndex+0x10>)
1a0013d6:	4298      	cmp	r0, r3
1a0013d8:	d001      	beq.n	1a0013de <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0013da:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0013dc:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a0013de:	20a5      	movs	r0, #165	; 0xa5
1a0013e0:	4770      	bx	lr
1a0013e2:	bf00      	nop
1a0013e4:	400c5000 	.word	0x400c5000

1a0013e8 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0013e8:	4b04      	ldr	r3, [pc, #16]	; (1a0013fc <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0013ea:	4298      	cmp	r0, r3
1a0013ec:	d002      	beq.n	1a0013f4 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0013ee:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0013f2:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a0013f4:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0013f8:	4770      	bx	lr
1a0013fa:	bf00      	nop
1a0013fc:	400c5000 	.word	0x400c5000

1a001400 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a001400:	6803      	ldr	r3, [r0, #0]
1a001402:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a001406:	0209      	lsls	r1, r1, #8
1a001408:	b289      	uxth	r1, r1
1a00140a:	4319      	orrs	r1, r3
1a00140c:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a00140e:	6102      	str	r2, [r0, #16]
}
1a001410:	4770      	bx	lr

1a001412 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a001412:	b570      	push	{r4, r5, r6, lr}
1a001414:	4606      	mov	r6, r0
1a001416:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001418:	f7ff ffe6 	bl	1a0013e8 <Chip_SSP_GetPeriphClockIndex>
1a00141c:	f7ff fefe 	bl	1a00121c <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a001420:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a001422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a001426:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a001428:	e000      	b.n	1a00142c <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a00142a:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a00142c:	42ab      	cmp	r3, r5
1a00142e:	d90b      	bls.n	1a001448 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a001430:	1c4c      	adds	r4, r1, #1
1a001432:	fb02 f304 	mul.w	r3, r2, r4
1a001436:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a00143a:	429d      	cmp	r5, r3
1a00143c:	d2f6      	bcs.n	1a00142c <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a00143e:	2cff      	cmp	r4, #255	; 0xff
1a001440:	d9f3      	bls.n	1a00142a <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a001442:	3202      	adds	r2, #2
				cr0_div = 0;
1a001444:	2100      	movs	r1, #0
1a001446:	e7f1      	b.n	1a00142c <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a001448:	4630      	mov	r0, r6
1a00144a:	f7ff ffd9 	bl	1a001400 <Chip_SSP_SetClockRate>
}
1a00144e:	bd70      	pop	{r4, r5, r6, pc}

1a001450 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a001450:	b510      	push	{r4, lr}
1a001452:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a001454:	f7ff ffbe 	bl	1a0013d4 <Chip_SSP_GetClockIndex>
1a001458:	f7ff fec6 	bl	1a0011e8 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a00145c:	4620      	mov	r0, r4
1a00145e:	f7ff ffc3 	bl	1a0013e8 <Chip_SSP_GetPeriphClockIndex>
1a001462:	f7ff fec1 	bl	1a0011e8 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a001466:	6863      	ldr	r3, [r4, #4]
1a001468:	f023 0304 	bic.w	r3, r3, #4
1a00146c:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00146e:	6823      	ldr	r3, [r4, #0]
1a001470:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001474:	f043 0307 	orr.w	r3, r3, #7
1a001478:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a00147a:	4902      	ldr	r1, [pc, #8]	; (1a001484 <Chip_SSP_Init+0x34>)
1a00147c:	4620      	mov	r0, r4
1a00147e:	f7ff ffc8 	bl	1a001412 <Chip_SSP_SetBitRate>
}
1a001482:	bd10      	pop	{r4, pc}
1a001484:	000186a0 	.word	0x000186a0

1a001488 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a001488:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a00148a:	4a0b      	ldr	r2, [pc, #44]	; (1a0014b8 <SystemInit+0x30>)
1a00148c:	4b0b      	ldr	r3, [pc, #44]	; (1a0014bc <SystemInit+0x34>)
1a00148e:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a001490:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a001494:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a001496:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a00149a:	2b20      	cmp	r3, #32
1a00149c:	d004      	beq.n	1a0014a8 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a00149e:	f7ff fa9f 	bl	1a0009e0 <Board_SystemInit>
   Board_Init();
1a0014a2:	f7ff fa25 	bl	1a0008f0 <Board_Init>
}
1a0014a6:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0014a8:	4a04      	ldr	r2, [pc, #16]	; (1a0014bc <SystemInit+0x34>)
1a0014aa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0014ae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0014b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a0014b6:	e7f2      	b.n	1a00149e <SystemInit+0x16>
1a0014b8:	1a000000 	.word	0x1a000000
1a0014bc:	e000ed00 	.word	0xe000ed00

1a0014c0 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0014c0:	4b04      	ldr	r3, [pc, #16]	; (1a0014d4 <cyclesCounterInit+0x14>)
1a0014c2:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a0014c4:	4a04      	ldr	r2, [pc, #16]	; (1a0014d8 <cyclesCounterInit+0x18>)
1a0014c6:	6813      	ldr	r3, [r2, #0]
1a0014c8:	f043 0301 	orr.w	r3, r3, #1
1a0014cc:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0014ce:	2001      	movs	r0, #1
1a0014d0:	4770      	bx	lr
1a0014d2:	bf00      	nop
1a0014d4:	10000038 	.word	0x10000038
1a0014d8:	e0001000 	.word	0xe0001000

1a0014dc <uartRxReady>:
//-------------------------------------------------------------

// Return TRUE if have unread data in RX FIFO
bool_t uartRxReady( uartMap_t uart )
{
    return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
1a0014dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0014e0:	0083      	lsls	r3, r0, #2
1a0014e2:	4a03      	ldr	r2, [pc, #12]	; (1a0014f0 <uartRxReady+0x14>)
1a0014e4:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a0014e6:	6958      	ldr	r0, [r3, #20]
}
1a0014e8:	f000 0001 	and.w	r0, r0, #1
1a0014ec:	4770      	bx	lr
1a0014ee:	bf00      	nop
1a0014f0:	1a003a1c 	.word	0x1a003a1c

1a0014f4 <uartTxReady>:
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
    return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a0014f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0014f8:	0083      	lsls	r3, r0, #2
1a0014fa:	4a03      	ldr	r2, [pc, #12]	; (1a001508 <uartTxReady+0x14>)
1a0014fc:	58d3      	ldr	r3, [r2, r3]
1a0014fe:	6958      	ldr	r0, [r3, #20]
}
1a001500:	f000 0020 	and.w	r0, r0, #32
1a001504:	4770      	bx	lr
1a001506:	bf00      	nop
1a001508:	1a003a1c 	.word	0x1a003a1c

1a00150c <uartRxRead>:
// Read from RX FIFO
uint8_t uartRxRead( uartMap_t uart )
{
    return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a00150c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001510:	0083      	lsls	r3, r0, #2
1a001512:	4a02      	ldr	r2, [pc, #8]	; (1a00151c <uartRxRead+0x10>)
1a001514:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);         //uint8_t
1a001516:	6818      	ldr	r0, [r3, #0]
}
1a001518:	b2c0      	uxtb	r0, r0
1a00151a:	4770      	bx	lr
1a00151c:	1a003a1c 	.word	0x1a003a1c

1a001520 <uartTxWrite>:
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
    Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a001520:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001524:	0083      	lsls	r3, r0, #2
1a001526:	4a02      	ldr	r2, [pc, #8]	; (1a001530 <uartTxWrite+0x10>)
1a001528:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a00152a:	6019      	str	r1, [r3, #0]
}
1a00152c:	4770      	bx	lr
1a00152e:	bf00      	nop
1a001530:	1a003a1c 	.word	0x1a003a1c

1a001534 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a001534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001538:	4680      	mov	r8, r0
1a00153a:	4689      	mov	r9, r1
    // Initialize UART
    Chip_UART_Init( lpcUarts[uart].uartAddr );
1a00153c:	4c19      	ldr	r4, [pc, #100]	; (1a0015a4 <uartInit+0x70>)
1a00153e:	0045      	lsls	r5, r0, #1
1a001540:	182a      	adds	r2, r5, r0
1a001542:	0093      	lsls	r3, r2, #2
1a001544:	18e6      	adds	r6, r4, r3
1a001546:	58e7      	ldr	r7, [r4, r3]
1a001548:	4638      	mov	r0, r7
1a00154a:	f7ff faa3 	bl	1a000a94 <Chip_UART_Init>
    // Set Baud rate
    Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a00154e:	4649      	mov	r1, r9
1a001550:	4638      	mov	r0, r7
1a001552:	f7ff fac9 	bl	1a000ae8 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a001556:	2307      	movs	r3, #7
1a001558:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);         //uint8_t
1a00155a:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a00155c:	2301      	movs	r3, #1
1a00155e:	65fb      	str	r3, [r7, #92]	; 0x5c

    // Enable UART Transmission
    Chip_UART_TXEnable( lpcUarts[uart].uartAddr );

    // Configure SCU UARTn_TXD pin
    Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a001560:	7930      	ldrb	r0, [r6, #4]
1a001562:	7973      	ldrb	r3, [r6, #5]
1a001564:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001566:	f042 0218 	orr.w	r2, r2, #24
1a00156a:	490f      	ldr	r1, [pc, #60]	; (1a0015a8 <uartInit+0x74>)
1a00156c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a001570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                     lpcUarts[uart].txPin.lpcScuPin,
                     MD_PDN,
                     lpcUarts[uart].txPin.lpcScuFunc );

    // Configure SCU UARTn_RXD pin
    Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a001574:	79f0      	ldrb	r0, [r6, #7]
1a001576:	7a33      	ldrb	r3, [r6, #8]
1a001578:	7a72      	ldrb	r2, [r6, #9]
1a00157a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00157e:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a001582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                     lpcUarts[uart].rxPin.lpcScuPin,
                     MD_PLN | MD_EZI | MD_ZI,
                     lpcUarts[uart].rxPin.lpcScuFunc );

    // Specific configurations for RS485
    if( uart == UART_485 )
1a001586:	f1b8 0f01 	cmp.w	r8, #1
1a00158a:	d001      	beq.n	1a001590 <uartInit+0x5c>
        Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                         lpcUart485DirPin.lpcScuPin,
                         MD_PDN,
                         lpcUart485DirPin.lpcScuFunc );
    }
}
1a00158c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a001590:	4a06      	ldr	r2, [pc, #24]	; (1a0015ac <uartInit+0x78>)
1a001592:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a001594:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a001598:	64d3      	str	r3, [r2, #76]	; 0x4c
1a00159a:	221a      	movs	r2, #26
1a00159c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a0015a0:	e7f4      	b.n	1a00158c <uartInit+0x58>
1a0015a2:	bf00      	nop
1a0015a4:	1a003a1c 	.word	0x1a003a1c
1a0015a8:	40086000 	.word	0x40086000
1a0015ac:	40081000 	.word	0x40081000

1a0015b0 <tickRead>:
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
   #else
      return tickCounter;
   #endif
}
1a0015b0:	4b01      	ldr	r3, [pc, #4]	; (1a0015b8 <tickRead+0x8>)
1a0015b2:	e9d3 0100 	ldrd	r0, r1, [r3]
1a0015b6:	4770      	bx	lr
1a0015b8:	10000228 	.word	0x10000228

1a0015bc <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a0015bc:	b918      	cbnz	r0, 1a0015c6 <tickPowerSet+0xa>
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a0015be:	4b04      	ldr	r3, [pc, #16]	; (1a0015d0 <tickPowerSet+0x14>)
1a0015c0:	2200      	movs	r2, #0
1a0015c2:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a0015c4:	4770      	bx	lr
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a0015c6:	4b02      	ldr	r3, [pc, #8]	; (1a0015d0 <tickPowerSet+0x14>)
1a0015c8:	2207      	movs	r2, #7
1a0015ca:	601a      	str	r2, [r3, #0]
1a0015cc:	4770      	bx	lr
1a0015ce:	bf00      	nop
1a0015d0:	e000e010 	.word	0xe000e010

1a0015d4 <tickInit>:
{
1a0015d4:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a0015d6:	ea50 0301 	orrs.w	r3, r0, r1
1a0015da:	d02a      	beq.n	1a001632 <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a0015dc:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a0015e0:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a0015e4:	2b00      	cmp	r3, #0
1a0015e6:	bf08      	it	eq
1a0015e8:	2a32      	cmpeq	r2, #50	; 0x32
1a0015ea:	d227      	bcs.n	1a00163c <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a0015ec:	4b14      	ldr	r3, [pc, #80]	; (1a001640 <tickInit+0x6c>)
1a0015ee:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a0015f2:	4b14      	ldr	r3, [pc, #80]	; (1a001644 <tickInit+0x70>)
1a0015f4:	681b      	ldr	r3, [r3, #0]
1a0015f6:	fba3 4500 	umull	r4, r5, r3, r0
1a0015fa:	fb03 5501 	mla	r5, r3, r1, r5
1a0015fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001602:	2300      	movs	r3, #0
1a001604:	4620      	mov	r0, r4
1a001606:	4629      	mov	r1, r5
1a001608:	f000 f9e4 	bl	1a0019d4 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a00160c:	3801      	subs	r0, #1
1a00160e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a001612:	d209      	bcs.n	1a001628 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a001614:	4b0c      	ldr	r3, [pc, #48]	; (1a001648 <tickInit+0x74>)
1a001616:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001618:	4a0c      	ldr	r2, [pc, #48]	; (1a00164c <tickInit+0x78>)
1a00161a:	21e0      	movs	r1, #224	; 0xe0
1a00161c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a001620:	2200      	movs	r2, #0
1a001622:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a001624:	2207      	movs	r2, #7
1a001626:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a001628:	2001      	movs	r0, #1
1a00162a:	f7ff ffc7 	bl	1a0015bc <tickPowerSet>
      bool_t ret_val = 1;
1a00162e:	2001      	movs	r0, #1
}
1a001630:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a001632:	2000      	movs	r0, #0
1a001634:	f7ff ffc2 	bl	1a0015bc <tickPowerSet>
         ret_val = 0;
1a001638:	2000      	movs	r0, #0
1a00163a:	e7f9      	b.n	1a001630 <tickInit+0x5c>
            ret_val = 0;
1a00163c:	2000      	movs	r0, #0
1a00163e:	e7f7      	b.n	1a001630 <tickInit+0x5c>
1a001640:	10000040 	.word	0x10000040
1a001644:	10000244 	.word	0x10000244
1a001648:	e000e010 	.word	0xe000e010
1a00164c:	e000ed00 	.word	0xe000ed00

1a001650 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a001650:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a001654:	4908      	ldr	r1, [pc, #32]	; (1a001678 <SysTick_Handler+0x28>)
1a001656:	e9d1 2300 	ldrd	r2, r3, [r1]
1a00165a:	f112 0b01 	adds.w	fp, r2, #1
1a00165e:	f143 0c00 	adc.w	ip, r3, #0
1a001662:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a001666:	4b05      	ldr	r3, [pc, #20]	; (1a00167c <SysTick_Handler+0x2c>)
1a001668:	681b      	ldr	r3, [r3, #0]
1a00166a:	b113      	cbz	r3, 1a001672 <SysTick_Handler+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a00166c:	4a04      	ldr	r2, [pc, #16]	; (1a001680 <SysTick_Handler+0x30>)
1a00166e:	6810      	ldr	r0, [r2, #0]
1a001670:	4798      	blx	r3
   }
}
1a001672:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a001676:	bf00      	nop
1a001678:	10000228 	.word	0x10000228
1a00167c:	10000230 	.word	0x10000230
1a001680:	10000224 	.word	0x10000224

1a001684 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a001684:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a001686:	4d0b      	ldr	r5, [pc, #44]	; (1a0016b4 <gpioObtainPinInit+0x30>)
1a001688:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a00168c:	182c      	adds	r4, r5, r0
1a00168e:	5628      	ldrsb	r0, [r5, r0]
1a001690:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a001692:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a001696:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a001698:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a00169c:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a00169e:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a0016a2:	9b02      	ldr	r3, [sp, #8]
1a0016a4:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a0016a6:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a0016aa:	9b03      	ldr	r3, [sp, #12]
1a0016ac:	701a      	strb	r2, [r3, #0]
}
1a0016ae:	bc30      	pop	{r4, r5}
1a0016b0:	4770      	bx	lr
1a0016b2:	bf00      	nop
1a0016b4:	1a003a64 	.word	0x1a003a64

1a0016b8 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a0016b8:	b570      	push	{r4, r5, r6, lr}
1a0016ba:	b084      	sub	sp, #16
1a0016bc:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0016be:	2300      	movs	r3, #0
1a0016c0:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0016c4:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0016c8:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0016cc:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0016d0:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0016d4:	f10d 030b 	add.w	r3, sp, #11
1a0016d8:	9301      	str	r3, [sp, #4]
1a0016da:	ab03      	add	r3, sp, #12
1a0016dc:	9300      	str	r3, [sp, #0]
1a0016de:	f10d 030d 	add.w	r3, sp, #13
1a0016e2:	f10d 020e 	add.w	r2, sp, #14
1a0016e6:	f10d 010f 	add.w	r1, sp, #15
1a0016ea:	f7ff ffcb 	bl	1a001684 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a0016ee:	2c05      	cmp	r4, #5
1a0016f0:	f200 80a5 	bhi.w	1a00183e <gpioInit+0x186>
1a0016f4:	e8df f004 	tbb	[pc, r4]
1a0016f8:	45278109 	.word	0x45278109
1a0016fc:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0016fe:	4851      	ldr	r0, [pc, #324]	; (1a001844 <gpioInit+0x18c>)
1a001700:	f7ff fe66 	bl	1a0013d0 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a001704:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a001706:	b004      	add	sp, #16
1a001708:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a00170a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00170e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001712:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001716:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00171a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00171e:	494a      	ldr	r1, [pc, #296]	; (1a001848 <gpioInit+0x190>)
1a001720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001724:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001728:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00172c:	2001      	movs	r0, #1
1a00172e:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a001732:	4c44      	ldr	r4, [pc, #272]	; (1a001844 <gpioInit+0x18c>)
1a001734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001738:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00173c:	ea22 0201 	bic.w	r2, r2, r1
1a001740:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001744:	e7df      	b.n	1a001706 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a001746:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00174a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00174e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001752:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a001756:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00175a:	493b      	ldr	r1, [pc, #236]	; (1a001848 <gpioInit+0x190>)
1a00175c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001760:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001764:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001768:	2001      	movs	r0, #1
1a00176a:	fa00 f102 	lsl.w	r1, r0, r2
1a00176e:	4c35      	ldr	r4, [pc, #212]	; (1a001844 <gpioInit+0x18c>)
1a001770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001774:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001778:	ea22 0201 	bic.w	r2, r2, r1
1a00177c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001780:	e7c1      	b.n	1a001706 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a001782:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001786:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00178a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00178e:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a001792:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001796:	492c      	ldr	r1, [pc, #176]	; (1a001848 <gpioInit+0x190>)
1a001798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00179c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0017a0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0017a4:	2001      	movs	r0, #1
1a0017a6:	fa00 f102 	lsl.w	r1, r0, r2
1a0017aa:	4c26      	ldr	r4, [pc, #152]	; (1a001844 <gpioInit+0x18c>)
1a0017ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0017b0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0017b4:	ea22 0201 	bic.w	r2, r2, r1
1a0017b8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0017bc:	e7a3      	b.n	1a001706 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0017be:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0017c2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0017c6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0017ca:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a0017ce:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0017d2:	491d      	ldr	r1, [pc, #116]	; (1a001848 <gpioInit+0x190>)
1a0017d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0017d8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0017dc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0017e0:	2001      	movs	r0, #1
1a0017e2:	fa00 f102 	lsl.w	r1, r0, r2
1a0017e6:	4c17      	ldr	r4, [pc, #92]	; (1a001844 <gpioInit+0x18c>)
1a0017e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0017ec:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0017f0:	ea22 0201 	bic.w	r2, r2, r1
1a0017f4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0017f8:	e785      	b.n	1a001706 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0017fa:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0017fe:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001802:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001806:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00180a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00180e:	490e      	ldr	r1, [pc, #56]	; (1a001848 <gpioInit+0x190>)
1a001810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a001814:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a001818:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00181c:	2001      	movs	r0, #1
1a00181e:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a001822:	4b08      	ldr	r3, [pc, #32]	; (1a001844 <gpioInit+0x18c>)
1a001824:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a001828:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a00182c:	4331      	orrs	r1, r6
1a00182e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a001832:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a001834:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a001838:	2100      	movs	r1, #0
1a00183a:	5499      	strb	r1, [r3, r2]
1a00183c:	e763      	b.n	1a001706 <gpioInit+0x4e>
      ret_val = 0;
1a00183e:	2000      	movs	r0, #0
1a001840:	e761      	b.n	1a001706 <gpioInit+0x4e>
1a001842:	bf00      	nop
1a001844:	400f4000 	.word	0x400f4000
1a001848:	40086000 	.word	0x40086000

1a00184c <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a00184c:	b510      	push	{r4, lr}
1a00184e:	b084      	sub	sp, #16
1a001850:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001852:	2300      	movs	r3, #0
1a001854:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001858:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00185c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001860:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001864:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001868:	f10d 030b 	add.w	r3, sp, #11
1a00186c:	9301      	str	r3, [sp, #4]
1a00186e:	ab03      	add	r3, sp, #12
1a001870:	9300      	str	r3, [sp, #0]
1a001872:	f10d 030d 	add.w	r3, sp, #13
1a001876:	f10d 020e 	add.w	r2, sp, #14
1a00187a:	f10d 010f 	add.w	r1, sp, #15
1a00187e:	f7ff ff01 	bl	1a001684 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a001882:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001886:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a00188a:	3400      	adds	r4, #0
1a00188c:	bf18      	it	ne
1a00188e:	2401      	movne	r4, #1
1a001890:	015b      	lsls	r3, r3, #5
1a001892:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001896:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00189a:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a00189c:	2001      	movs	r0, #1
1a00189e:	b004      	add	sp, #16
1a0018a0:	bd10      	pop	{r4, pc}

1a0018a2 <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a0018a2:	b500      	push	{lr}
1a0018a4:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a0018a6:	2300      	movs	r3, #0
1a0018a8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0018ac:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0018b0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0018b4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0018b8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0018bc:	f10d 030b 	add.w	r3, sp, #11
1a0018c0:	9301      	str	r3, [sp, #4]
1a0018c2:	ab03      	add	r3, sp, #12
1a0018c4:	9300      	str	r3, [sp, #0]
1a0018c6:	f10d 030d 	add.w	r3, sp, #13
1a0018ca:	f10d 020e 	add.w	r2, sp, #14
1a0018ce:	f10d 010f 	add.w	r1, sp, #15
1a0018d2:	f7ff fed7 	bl	1a001684 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a0018d6:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a0018da:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a0018de:	015b      	lsls	r3, r3, #5
1a0018e0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0018e4:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0018e8:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a0018ea:	3000      	adds	r0, #0
1a0018ec:	bf18      	it	ne
1a0018ee:	2001      	movne	r0, #1
1a0018f0:	b005      	add	sp, #20
1a0018f2:	f85d fb04 	ldr.w	pc, [sp], #4

1a0018f6 <gpioToggle>:
{
1a0018f6:	b510      	push	{r4, lr}
1a0018f8:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a0018fa:	f7ff ffd2 	bl	1a0018a2 <gpioRead>
1a0018fe:	fab0 f180 	clz	r1, r0
1a001902:	0949      	lsrs	r1, r1, #5
1a001904:	4620      	mov	r0, r4
1a001906:	f7ff ffa1 	bl	1a00184c <gpioWrite>
}
1a00190a:	bd10      	pop	{r4, pc}

1a00190c <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a00190c:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a00190e:	4b04      	ldr	r3, [pc, #16]	; (1a001920 <USB0_IRQHandler+0x14>)
1a001910:	681b      	ldr	r3, [r3, #0]
1a001912:	681b      	ldr	r3, [r3, #0]
1a001914:	68db      	ldr	r3, [r3, #12]
1a001916:	4a03      	ldr	r2, [pc, #12]	; (1a001924 <USB0_IRQHandler+0x18>)
1a001918:	6810      	ldr	r0, [r2, #0]
1a00191a:	4798      	blx	r3
}
1a00191c:	bd08      	pop	{r3, pc}
1a00191e:	bf00      	nop
1a001920:	10000248 	.word	0x10000248
1a001924:	10000234 	.word	0x10000234

1a001928 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001928:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a00192a:	f7ff fc9d 	bl	1a001268 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a00192e:	4b1a      	ldr	r3, [pc, #104]	; (1a001998 <boardInit+0x70>)
1a001930:	6818      	ldr	r0, [r3, #0]
1a001932:	f7ff fdc5 	bl	1a0014c0 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a001936:	2001      	movs	r0, #1
1a001938:	2100      	movs	r1, #0
1a00193a:	f7ff fe4b 	bl	1a0015d4 <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a00193e:	2105      	movs	r1, #5
1a001940:	2000      	movs	r0, #0
1a001942:	f7ff feb9 	bl	1a0016b8 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a001946:	2100      	movs	r1, #0
1a001948:	2024      	movs	r0, #36	; 0x24
1a00194a:	f7ff feb5 	bl	1a0016b8 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a00194e:	2100      	movs	r1, #0
1a001950:	2025      	movs	r0, #37	; 0x25
1a001952:	f7ff feb1 	bl	1a0016b8 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a001956:	2100      	movs	r1, #0
1a001958:	2026      	movs	r0, #38	; 0x26
1a00195a:	f7ff fead 	bl	1a0016b8 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a00195e:	2100      	movs	r1, #0
1a001960:	2027      	movs	r0, #39	; 0x27
1a001962:	f7ff fea9 	bl	1a0016b8 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a001966:	2101      	movs	r1, #1
1a001968:	2028      	movs	r0, #40	; 0x28
1a00196a:	f7ff fea5 	bl	1a0016b8 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a00196e:	2101      	movs	r1, #1
1a001970:	2029      	movs	r0, #41	; 0x29
1a001972:	f7ff fea1 	bl	1a0016b8 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a001976:	2101      	movs	r1, #1
1a001978:	202a      	movs	r0, #42	; 0x2a
1a00197a:	f7ff fe9d 	bl	1a0016b8 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a00197e:	2101      	movs	r1, #1
1a001980:	202b      	movs	r0, #43	; 0x2b
1a001982:	f7ff fe99 	bl	1a0016b8 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a001986:	2101      	movs	r1, #1
1a001988:	202c      	movs	r0, #44	; 0x2c
1a00198a:	f7ff fe95 	bl	1a0016b8 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a00198e:	2101      	movs	r1, #1
1a001990:	202d      	movs	r0, #45	; 0x2d
1a001992:	f7ff fe91 	bl	1a0016b8 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a001996:	bd08      	pop	{r3, pc}
1a001998:	10000244 	.word	0x10000244

1a00199c <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay( tick_t duration_ms )
{
1a00199c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0019a0:	4680      	mov	r8, r0
1a0019a2:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a0019a4:	f7ff fe04 	bl	1a0015b0 <tickRead>
1a0019a8:	4606      	mov	r6, r0
1a0019aa:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration_ms/tickRateMS );
1a0019ac:	f7ff fe00 	bl	1a0015b0 <tickRead>
1a0019b0:	1b84      	subs	r4, r0, r6
1a0019b2:	eb61 0507 	sbc.w	r5, r1, r7
1a0019b6:	4b06      	ldr	r3, [pc, #24]	; (1a0019d0 <delay+0x34>)
1a0019b8:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0019bc:	4640      	mov	r0, r8
1a0019be:	4649      	mov	r1, r9
1a0019c0:	f000 f808 	bl	1a0019d4 <__aeabi_uldivmod>
1a0019c4:	428d      	cmp	r5, r1
1a0019c6:	bf08      	it	eq
1a0019c8:	4284      	cmpeq	r4, r0
1a0019ca:	d3ef      	bcc.n	1a0019ac <delay+0x10>
}
1a0019cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0019d0:	10000040 	.word	0x10000040

1a0019d4 <__aeabi_uldivmod>:
1a0019d4:	b953      	cbnz	r3, 1a0019ec <__aeabi_uldivmod+0x18>
1a0019d6:	b94a      	cbnz	r2, 1a0019ec <__aeabi_uldivmod+0x18>
1a0019d8:	2900      	cmp	r1, #0
1a0019da:	bf08      	it	eq
1a0019dc:	2800      	cmpeq	r0, #0
1a0019de:	bf1c      	itt	ne
1a0019e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a0019e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a0019e8:	f000 b972 	b.w	1a001cd0 <__aeabi_idiv0>
1a0019ec:	f1ad 0c08 	sub.w	ip, sp, #8
1a0019f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0019f4:	f000 f806 	bl	1a001a04 <__udivmoddi4>
1a0019f8:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0019fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001a00:	b004      	add	sp, #16
1a001a02:	4770      	bx	lr

1a001a04 <__udivmoddi4>:
1a001a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001a08:	9e08      	ldr	r6, [sp, #32]
1a001a0a:	4604      	mov	r4, r0
1a001a0c:	4688      	mov	r8, r1
1a001a0e:	2b00      	cmp	r3, #0
1a001a10:	d14b      	bne.n	1a001aaa <__udivmoddi4+0xa6>
1a001a12:	428a      	cmp	r2, r1
1a001a14:	4615      	mov	r5, r2
1a001a16:	d967      	bls.n	1a001ae8 <__udivmoddi4+0xe4>
1a001a18:	fab2 f282 	clz	r2, r2
1a001a1c:	b14a      	cbz	r2, 1a001a32 <__udivmoddi4+0x2e>
1a001a1e:	f1c2 0720 	rsb	r7, r2, #32
1a001a22:	fa01 f302 	lsl.w	r3, r1, r2
1a001a26:	fa20 f707 	lsr.w	r7, r0, r7
1a001a2a:	4095      	lsls	r5, r2
1a001a2c:	ea47 0803 	orr.w	r8, r7, r3
1a001a30:	4094      	lsls	r4, r2
1a001a32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001a36:	0c23      	lsrs	r3, r4, #16
1a001a38:	fbb8 f7fe 	udiv	r7, r8, lr
1a001a3c:	fa1f fc85 	uxth.w	ip, r5
1a001a40:	fb0e 8817 	mls	r8, lr, r7, r8
1a001a44:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a001a48:	fb07 f10c 	mul.w	r1, r7, ip
1a001a4c:	4299      	cmp	r1, r3
1a001a4e:	d909      	bls.n	1a001a64 <__udivmoddi4+0x60>
1a001a50:	18eb      	adds	r3, r5, r3
1a001a52:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a001a56:	f080 811b 	bcs.w	1a001c90 <__udivmoddi4+0x28c>
1a001a5a:	4299      	cmp	r1, r3
1a001a5c:	f240 8118 	bls.w	1a001c90 <__udivmoddi4+0x28c>
1a001a60:	3f02      	subs	r7, #2
1a001a62:	442b      	add	r3, r5
1a001a64:	1a5b      	subs	r3, r3, r1
1a001a66:	b2a4      	uxth	r4, r4
1a001a68:	fbb3 f0fe 	udiv	r0, r3, lr
1a001a6c:	fb0e 3310 	mls	r3, lr, r0, r3
1a001a70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001a74:	fb00 fc0c 	mul.w	ip, r0, ip
1a001a78:	45a4      	cmp	ip, r4
1a001a7a:	d909      	bls.n	1a001a90 <__udivmoddi4+0x8c>
1a001a7c:	192c      	adds	r4, r5, r4
1a001a7e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001a82:	f080 8107 	bcs.w	1a001c94 <__udivmoddi4+0x290>
1a001a86:	45a4      	cmp	ip, r4
1a001a88:	f240 8104 	bls.w	1a001c94 <__udivmoddi4+0x290>
1a001a8c:	3802      	subs	r0, #2
1a001a8e:	442c      	add	r4, r5
1a001a90:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a001a94:	eba4 040c 	sub.w	r4, r4, ip
1a001a98:	2700      	movs	r7, #0
1a001a9a:	b11e      	cbz	r6, 1a001aa4 <__udivmoddi4+0xa0>
1a001a9c:	40d4      	lsrs	r4, r2
1a001a9e:	2300      	movs	r3, #0
1a001aa0:	e9c6 4300 	strd	r4, r3, [r6]
1a001aa4:	4639      	mov	r1, r7
1a001aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001aaa:	428b      	cmp	r3, r1
1a001aac:	d909      	bls.n	1a001ac2 <__udivmoddi4+0xbe>
1a001aae:	2e00      	cmp	r6, #0
1a001ab0:	f000 80eb 	beq.w	1a001c8a <__udivmoddi4+0x286>
1a001ab4:	2700      	movs	r7, #0
1a001ab6:	e9c6 0100 	strd	r0, r1, [r6]
1a001aba:	4638      	mov	r0, r7
1a001abc:	4639      	mov	r1, r7
1a001abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001ac2:	fab3 f783 	clz	r7, r3
1a001ac6:	2f00      	cmp	r7, #0
1a001ac8:	d147      	bne.n	1a001b5a <__udivmoddi4+0x156>
1a001aca:	428b      	cmp	r3, r1
1a001acc:	d302      	bcc.n	1a001ad4 <__udivmoddi4+0xd0>
1a001ace:	4282      	cmp	r2, r0
1a001ad0:	f200 80fa 	bhi.w	1a001cc8 <__udivmoddi4+0x2c4>
1a001ad4:	1a84      	subs	r4, r0, r2
1a001ad6:	eb61 0303 	sbc.w	r3, r1, r3
1a001ada:	2001      	movs	r0, #1
1a001adc:	4698      	mov	r8, r3
1a001ade:	2e00      	cmp	r6, #0
1a001ae0:	d0e0      	beq.n	1a001aa4 <__udivmoddi4+0xa0>
1a001ae2:	e9c6 4800 	strd	r4, r8, [r6]
1a001ae6:	e7dd      	b.n	1a001aa4 <__udivmoddi4+0xa0>
1a001ae8:	b902      	cbnz	r2, 1a001aec <__udivmoddi4+0xe8>
1a001aea:	deff      	udf	#255	; 0xff
1a001aec:	fab2 f282 	clz	r2, r2
1a001af0:	2a00      	cmp	r2, #0
1a001af2:	f040 808f 	bne.w	1a001c14 <__udivmoddi4+0x210>
1a001af6:	1b49      	subs	r1, r1, r5
1a001af8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001afc:	fa1f f885 	uxth.w	r8, r5
1a001b00:	2701      	movs	r7, #1
1a001b02:	fbb1 fcfe 	udiv	ip, r1, lr
1a001b06:	0c23      	lsrs	r3, r4, #16
1a001b08:	fb0e 111c 	mls	r1, lr, ip, r1
1a001b0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001b10:	fb08 f10c 	mul.w	r1, r8, ip
1a001b14:	4299      	cmp	r1, r3
1a001b16:	d907      	bls.n	1a001b28 <__udivmoddi4+0x124>
1a001b18:	18eb      	adds	r3, r5, r3
1a001b1a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a001b1e:	d202      	bcs.n	1a001b26 <__udivmoddi4+0x122>
1a001b20:	4299      	cmp	r1, r3
1a001b22:	f200 80cd 	bhi.w	1a001cc0 <__udivmoddi4+0x2bc>
1a001b26:	4684      	mov	ip, r0
1a001b28:	1a59      	subs	r1, r3, r1
1a001b2a:	b2a3      	uxth	r3, r4
1a001b2c:	fbb1 f0fe 	udiv	r0, r1, lr
1a001b30:	fb0e 1410 	mls	r4, lr, r0, r1
1a001b34:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a001b38:	fb08 f800 	mul.w	r8, r8, r0
1a001b3c:	45a0      	cmp	r8, r4
1a001b3e:	d907      	bls.n	1a001b50 <__udivmoddi4+0x14c>
1a001b40:	192c      	adds	r4, r5, r4
1a001b42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001b46:	d202      	bcs.n	1a001b4e <__udivmoddi4+0x14a>
1a001b48:	45a0      	cmp	r8, r4
1a001b4a:	f200 80b6 	bhi.w	1a001cba <__udivmoddi4+0x2b6>
1a001b4e:	4618      	mov	r0, r3
1a001b50:	eba4 0408 	sub.w	r4, r4, r8
1a001b54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a001b58:	e79f      	b.n	1a001a9a <__udivmoddi4+0x96>
1a001b5a:	f1c7 0c20 	rsb	ip, r7, #32
1a001b5e:	40bb      	lsls	r3, r7
1a001b60:	fa22 fe0c 	lsr.w	lr, r2, ip
1a001b64:	ea4e 0e03 	orr.w	lr, lr, r3
1a001b68:	fa01 f407 	lsl.w	r4, r1, r7
1a001b6c:	fa20 f50c 	lsr.w	r5, r0, ip
1a001b70:	fa21 f30c 	lsr.w	r3, r1, ip
1a001b74:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a001b78:	4325      	orrs	r5, r4
1a001b7a:	fbb3 f9f8 	udiv	r9, r3, r8
1a001b7e:	0c2c      	lsrs	r4, r5, #16
1a001b80:	fb08 3319 	mls	r3, r8, r9, r3
1a001b84:	fa1f fa8e 	uxth.w	sl, lr
1a001b88:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a001b8c:	fb09 f40a 	mul.w	r4, r9, sl
1a001b90:	429c      	cmp	r4, r3
1a001b92:	fa02 f207 	lsl.w	r2, r2, r7
1a001b96:	fa00 f107 	lsl.w	r1, r0, r7
1a001b9a:	d90b      	bls.n	1a001bb4 <__udivmoddi4+0x1b0>
1a001b9c:	eb1e 0303 	adds.w	r3, lr, r3
1a001ba0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a001ba4:	f080 8087 	bcs.w	1a001cb6 <__udivmoddi4+0x2b2>
1a001ba8:	429c      	cmp	r4, r3
1a001baa:	f240 8084 	bls.w	1a001cb6 <__udivmoddi4+0x2b2>
1a001bae:	f1a9 0902 	sub.w	r9, r9, #2
1a001bb2:	4473      	add	r3, lr
1a001bb4:	1b1b      	subs	r3, r3, r4
1a001bb6:	b2ad      	uxth	r5, r5
1a001bb8:	fbb3 f0f8 	udiv	r0, r3, r8
1a001bbc:	fb08 3310 	mls	r3, r8, r0, r3
1a001bc0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a001bc4:	fb00 fa0a 	mul.w	sl, r0, sl
1a001bc8:	45a2      	cmp	sl, r4
1a001bca:	d908      	bls.n	1a001bde <__udivmoddi4+0x1da>
1a001bcc:	eb1e 0404 	adds.w	r4, lr, r4
1a001bd0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001bd4:	d26b      	bcs.n	1a001cae <__udivmoddi4+0x2aa>
1a001bd6:	45a2      	cmp	sl, r4
1a001bd8:	d969      	bls.n	1a001cae <__udivmoddi4+0x2aa>
1a001bda:	3802      	subs	r0, #2
1a001bdc:	4474      	add	r4, lr
1a001bde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a001be2:	fba0 8902 	umull	r8, r9, r0, r2
1a001be6:	eba4 040a 	sub.w	r4, r4, sl
1a001bea:	454c      	cmp	r4, r9
1a001bec:	46c2      	mov	sl, r8
1a001bee:	464b      	mov	r3, r9
1a001bf0:	d354      	bcc.n	1a001c9c <__udivmoddi4+0x298>
1a001bf2:	d051      	beq.n	1a001c98 <__udivmoddi4+0x294>
1a001bf4:	2e00      	cmp	r6, #0
1a001bf6:	d069      	beq.n	1a001ccc <__udivmoddi4+0x2c8>
1a001bf8:	ebb1 050a 	subs.w	r5, r1, sl
1a001bfc:	eb64 0403 	sbc.w	r4, r4, r3
1a001c00:	fa04 fc0c 	lsl.w	ip, r4, ip
1a001c04:	40fd      	lsrs	r5, r7
1a001c06:	40fc      	lsrs	r4, r7
1a001c08:	ea4c 0505 	orr.w	r5, ip, r5
1a001c0c:	e9c6 5400 	strd	r5, r4, [r6]
1a001c10:	2700      	movs	r7, #0
1a001c12:	e747      	b.n	1a001aa4 <__udivmoddi4+0xa0>
1a001c14:	f1c2 0320 	rsb	r3, r2, #32
1a001c18:	fa20 f703 	lsr.w	r7, r0, r3
1a001c1c:	4095      	lsls	r5, r2
1a001c1e:	fa01 f002 	lsl.w	r0, r1, r2
1a001c22:	fa21 f303 	lsr.w	r3, r1, r3
1a001c26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001c2a:	4338      	orrs	r0, r7
1a001c2c:	0c01      	lsrs	r1, r0, #16
1a001c2e:	fbb3 f7fe 	udiv	r7, r3, lr
1a001c32:	fa1f f885 	uxth.w	r8, r5
1a001c36:	fb0e 3317 	mls	r3, lr, r7, r3
1a001c3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001c3e:	fb07 f308 	mul.w	r3, r7, r8
1a001c42:	428b      	cmp	r3, r1
1a001c44:	fa04 f402 	lsl.w	r4, r4, r2
1a001c48:	d907      	bls.n	1a001c5a <__udivmoddi4+0x256>
1a001c4a:	1869      	adds	r1, r5, r1
1a001c4c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a001c50:	d22f      	bcs.n	1a001cb2 <__udivmoddi4+0x2ae>
1a001c52:	428b      	cmp	r3, r1
1a001c54:	d92d      	bls.n	1a001cb2 <__udivmoddi4+0x2ae>
1a001c56:	3f02      	subs	r7, #2
1a001c58:	4429      	add	r1, r5
1a001c5a:	1acb      	subs	r3, r1, r3
1a001c5c:	b281      	uxth	r1, r0
1a001c5e:	fbb3 f0fe 	udiv	r0, r3, lr
1a001c62:	fb0e 3310 	mls	r3, lr, r0, r3
1a001c66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001c6a:	fb00 f308 	mul.w	r3, r0, r8
1a001c6e:	428b      	cmp	r3, r1
1a001c70:	d907      	bls.n	1a001c82 <__udivmoddi4+0x27e>
1a001c72:	1869      	adds	r1, r5, r1
1a001c74:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a001c78:	d217      	bcs.n	1a001caa <__udivmoddi4+0x2a6>
1a001c7a:	428b      	cmp	r3, r1
1a001c7c:	d915      	bls.n	1a001caa <__udivmoddi4+0x2a6>
1a001c7e:	3802      	subs	r0, #2
1a001c80:	4429      	add	r1, r5
1a001c82:	1ac9      	subs	r1, r1, r3
1a001c84:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a001c88:	e73b      	b.n	1a001b02 <__udivmoddi4+0xfe>
1a001c8a:	4637      	mov	r7, r6
1a001c8c:	4630      	mov	r0, r6
1a001c8e:	e709      	b.n	1a001aa4 <__udivmoddi4+0xa0>
1a001c90:	4607      	mov	r7, r0
1a001c92:	e6e7      	b.n	1a001a64 <__udivmoddi4+0x60>
1a001c94:	4618      	mov	r0, r3
1a001c96:	e6fb      	b.n	1a001a90 <__udivmoddi4+0x8c>
1a001c98:	4541      	cmp	r1, r8
1a001c9a:	d2ab      	bcs.n	1a001bf4 <__udivmoddi4+0x1f0>
1a001c9c:	ebb8 0a02 	subs.w	sl, r8, r2
1a001ca0:	eb69 020e 	sbc.w	r2, r9, lr
1a001ca4:	3801      	subs	r0, #1
1a001ca6:	4613      	mov	r3, r2
1a001ca8:	e7a4      	b.n	1a001bf4 <__udivmoddi4+0x1f0>
1a001caa:	4660      	mov	r0, ip
1a001cac:	e7e9      	b.n	1a001c82 <__udivmoddi4+0x27e>
1a001cae:	4618      	mov	r0, r3
1a001cb0:	e795      	b.n	1a001bde <__udivmoddi4+0x1da>
1a001cb2:	4667      	mov	r7, ip
1a001cb4:	e7d1      	b.n	1a001c5a <__udivmoddi4+0x256>
1a001cb6:	4681      	mov	r9, r0
1a001cb8:	e77c      	b.n	1a001bb4 <__udivmoddi4+0x1b0>
1a001cba:	3802      	subs	r0, #2
1a001cbc:	442c      	add	r4, r5
1a001cbe:	e747      	b.n	1a001b50 <__udivmoddi4+0x14c>
1a001cc0:	f1ac 0c02 	sub.w	ip, ip, #2
1a001cc4:	442b      	add	r3, r5
1a001cc6:	e72f      	b.n	1a001b28 <__udivmoddi4+0x124>
1a001cc8:	4638      	mov	r0, r7
1a001cca:	e708      	b.n	1a001ade <__udivmoddi4+0xda>
1a001ccc:	4637      	mov	r7, r6
1a001cce:	e6e9      	b.n	1a001aa4 <__udivmoddi4+0xa0>

1a001cd0 <__aeabi_idiv0>:
1a001cd0:	4770      	bx	lr
1a001cd2:	bf00      	nop

1a001cd4 <__libc_init_array>:
1a001cd4:	b570      	push	{r4, r5, r6, lr}
1a001cd6:	4e0d      	ldr	r6, [pc, #52]	; (1a001d0c <__libc_init_array+0x38>)
1a001cd8:	4c0d      	ldr	r4, [pc, #52]	; (1a001d10 <__libc_init_array+0x3c>)
1a001cda:	1ba4      	subs	r4, r4, r6
1a001cdc:	10a4      	asrs	r4, r4, #2
1a001cde:	2500      	movs	r5, #0
1a001ce0:	42a5      	cmp	r5, r4
1a001ce2:	d109      	bne.n	1a001cf8 <__libc_init_array+0x24>
1a001ce4:	4e0b      	ldr	r6, [pc, #44]	; (1a001d14 <__libc_init_array+0x40>)
1a001ce6:	4c0c      	ldr	r4, [pc, #48]	; (1a001d18 <__libc_init_array+0x44>)
1a001ce8:	f7fe fccb 	bl	1a000682 <_init>
1a001cec:	1ba4      	subs	r4, r4, r6
1a001cee:	10a4      	asrs	r4, r4, #2
1a001cf0:	2500      	movs	r5, #0
1a001cf2:	42a5      	cmp	r5, r4
1a001cf4:	d105      	bne.n	1a001d02 <__libc_init_array+0x2e>
1a001cf6:	bd70      	pop	{r4, r5, r6, pc}
1a001cf8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a001cfc:	4798      	blx	r3
1a001cfe:	3501      	adds	r5, #1
1a001d00:	e7ee      	b.n	1a001ce0 <__libc_init_array+0xc>
1a001d02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a001d06:	4798      	blx	r3
1a001d08:	3501      	adds	r5, #1
1a001d0a:	e7f2      	b.n	1a001cf2 <__libc_init_array+0x1e>
1a001d0c:	1a003d18 	.word	0x1a003d18
1a001d10:	1a003d18 	.word	0x1a003d18
1a001d14:	1a003d18 	.word	0x1a003d18
1a001d18:	1a003d1c 	.word	0x1a003d1c

1a001d1c <memcpy>:
1a001d1c:	b510      	push	{r4, lr}
1a001d1e:	1e43      	subs	r3, r0, #1
1a001d20:	440a      	add	r2, r1
1a001d22:	4291      	cmp	r1, r2
1a001d24:	d100      	bne.n	1a001d28 <memcpy+0xc>
1a001d26:	bd10      	pop	{r4, pc}
1a001d28:	f811 4b01 	ldrb.w	r4, [r1], #1
1a001d2c:	f803 4f01 	strb.w	r4, [r3, #1]!
1a001d30:	e7f7      	b.n	1a001d22 <memcpy+0x6>

1a001d32 <memset>:
1a001d32:	4402      	add	r2, r0
1a001d34:	4603      	mov	r3, r0
1a001d36:	4293      	cmp	r3, r2
1a001d38:	d100      	bne.n	1a001d3c <memset+0xa>
1a001d3a:	4770      	bx	lr
1a001d3c:	f803 1b01 	strb.w	r1, [r3], #1
1a001d40:	e7f9      	b.n	1a001d36 <memset+0x4>
1a001d42:	Address 0x000000001a001d42 is out of bounds.


1a001d44 <iprintf>:
1a001d44:	b40f      	push	{r0, r1, r2, r3}
1a001d46:	4b0a      	ldr	r3, [pc, #40]	; (1a001d70 <iprintf+0x2c>)
1a001d48:	b513      	push	{r0, r1, r4, lr}
1a001d4a:	681c      	ldr	r4, [r3, #0]
1a001d4c:	b124      	cbz	r4, 1a001d58 <iprintf+0x14>
1a001d4e:	69a3      	ldr	r3, [r4, #24]
1a001d50:	b913      	cbnz	r3, 1a001d58 <iprintf+0x14>
1a001d52:	4620      	mov	r0, r4
1a001d54:	f000 faf0 	bl	1a002338 <__sinit>
1a001d58:	ab05      	add	r3, sp, #20
1a001d5a:	9a04      	ldr	r2, [sp, #16]
1a001d5c:	68a1      	ldr	r1, [r4, #8]
1a001d5e:	9301      	str	r3, [sp, #4]
1a001d60:	4620      	mov	r0, r4
1a001d62:	f000 fce9 	bl	1a002738 <_vfiprintf_r>
1a001d66:	b002      	add	sp, #8
1a001d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a001d6c:	b004      	add	sp, #16
1a001d6e:	4770      	bx	lr
1a001d70:	10000048 	.word	0x10000048

1a001d74 <_puts_r>:
1a001d74:	b570      	push	{r4, r5, r6, lr}
1a001d76:	460e      	mov	r6, r1
1a001d78:	4605      	mov	r5, r0
1a001d7a:	b118      	cbz	r0, 1a001d84 <_puts_r+0x10>
1a001d7c:	6983      	ldr	r3, [r0, #24]
1a001d7e:	b90b      	cbnz	r3, 1a001d84 <_puts_r+0x10>
1a001d80:	f000 fada 	bl	1a002338 <__sinit>
1a001d84:	69ab      	ldr	r3, [r5, #24]
1a001d86:	68ac      	ldr	r4, [r5, #8]
1a001d88:	b913      	cbnz	r3, 1a001d90 <_puts_r+0x1c>
1a001d8a:	4628      	mov	r0, r5
1a001d8c:	f000 fad4 	bl	1a002338 <__sinit>
1a001d90:	4b23      	ldr	r3, [pc, #140]	; (1a001e20 <_puts_r+0xac>)
1a001d92:	429c      	cmp	r4, r3
1a001d94:	d117      	bne.n	1a001dc6 <_puts_r+0x52>
1a001d96:	686c      	ldr	r4, [r5, #4]
1a001d98:	89a3      	ldrh	r3, [r4, #12]
1a001d9a:	071b      	lsls	r3, r3, #28
1a001d9c:	d51d      	bpl.n	1a001dda <_puts_r+0x66>
1a001d9e:	6923      	ldr	r3, [r4, #16]
1a001da0:	b1db      	cbz	r3, 1a001dda <_puts_r+0x66>
1a001da2:	3e01      	subs	r6, #1
1a001da4:	68a3      	ldr	r3, [r4, #8]
1a001da6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a001daa:	3b01      	subs	r3, #1
1a001dac:	60a3      	str	r3, [r4, #8]
1a001dae:	b9e9      	cbnz	r1, 1a001dec <_puts_r+0x78>
1a001db0:	2b00      	cmp	r3, #0
1a001db2:	da2e      	bge.n	1a001e12 <_puts_r+0x9e>
1a001db4:	4622      	mov	r2, r4
1a001db6:	210a      	movs	r1, #10
1a001db8:	4628      	mov	r0, r5
1a001dba:	f000 f8fb 	bl	1a001fb4 <__swbuf_r>
1a001dbe:	3001      	adds	r0, #1
1a001dc0:	d011      	beq.n	1a001de6 <_puts_r+0x72>
1a001dc2:	200a      	movs	r0, #10
1a001dc4:	e011      	b.n	1a001dea <_puts_r+0x76>
1a001dc6:	4b17      	ldr	r3, [pc, #92]	; (1a001e24 <_puts_r+0xb0>)
1a001dc8:	429c      	cmp	r4, r3
1a001dca:	d101      	bne.n	1a001dd0 <_puts_r+0x5c>
1a001dcc:	68ac      	ldr	r4, [r5, #8]
1a001dce:	e7e3      	b.n	1a001d98 <_puts_r+0x24>
1a001dd0:	4b15      	ldr	r3, [pc, #84]	; (1a001e28 <_puts_r+0xb4>)
1a001dd2:	429c      	cmp	r4, r3
1a001dd4:	bf08      	it	eq
1a001dd6:	68ec      	ldreq	r4, [r5, #12]
1a001dd8:	e7de      	b.n	1a001d98 <_puts_r+0x24>
1a001dda:	4621      	mov	r1, r4
1a001ddc:	4628      	mov	r0, r5
1a001dde:	f000 f93b 	bl	1a002058 <__swsetup_r>
1a001de2:	2800      	cmp	r0, #0
1a001de4:	d0dd      	beq.n	1a001da2 <_puts_r+0x2e>
1a001de6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001dea:	bd70      	pop	{r4, r5, r6, pc}
1a001dec:	2b00      	cmp	r3, #0
1a001dee:	da04      	bge.n	1a001dfa <_puts_r+0x86>
1a001df0:	69a2      	ldr	r2, [r4, #24]
1a001df2:	429a      	cmp	r2, r3
1a001df4:	dc06      	bgt.n	1a001e04 <_puts_r+0x90>
1a001df6:	290a      	cmp	r1, #10
1a001df8:	d004      	beq.n	1a001e04 <_puts_r+0x90>
1a001dfa:	6823      	ldr	r3, [r4, #0]
1a001dfc:	1c5a      	adds	r2, r3, #1
1a001dfe:	6022      	str	r2, [r4, #0]
1a001e00:	7019      	strb	r1, [r3, #0]
1a001e02:	e7cf      	b.n	1a001da4 <_puts_r+0x30>
1a001e04:	4622      	mov	r2, r4
1a001e06:	4628      	mov	r0, r5
1a001e08:	f000 f8d4 	bl	1a001fb4 <__swbuf_r>
1a001e0c:	3001      	adds	r0, #1
1a001e0e:	d1c9      	bne.n	1a001da4 <_puts_r+0x30>
1a001e10:	e7e9      	b.n	1a001de6 <_puts_r+0x72>
1a001e12:	6823      	ldr	r3, [r4, #0]
1a001e14:	200a      	movs	r0, #10
1a001e16:	1c5a      	adds	r2, r3, #1
1a001e18:	6022      	str	r2, [r4, #0]
1a001e1a:	7018      	strb	r0, [r3, #0]
1a001e1c:	e7e5      	b.n	1a001dea <_puts_r+0x76>
1a001e1e:	bf00      	nop
1a001e20:	1a003b6c 	.word	0x1a003b6c
1a001e24:	1a003b8c 	.word	0x1a003b8c
1a001e28:	1a003b4c 	.word	0x1a003b4c

1a001e2c <puts>:
1a001e2c:	4b02      	ldr	r3, [pc, #8]	; (1a001e38 <puts+0xc>)
1a001e2e:	4601      	mov	r1, r0
1a001e30:	6818      	ldr	r0, [r3, #0]
1a001e32:	f7ff bf9f 	b.w	1a001d74 <_puts_r>
1a001e36:	bf00      	nop
1a001e38:	10000048 	.word	0x10000048

1a001e3c <iscanf>:
1a001e3c:	b40f      	push	{r0, r1, r2, r3}
1a001e3e:	4b0a      	ldr	r3, [pc, #40]	; (1a001e68 <iscanf+0x2c>)
1a001e40:	b513      	push	{r0, r1, r4, lr}
1a001e42:	681c      	ldr	r4, [r3, #0]
1a001e44:	b124      	cbz	r4, 1a001e50 <iscanf+0x14>
1a001e46:	69a3      	ldr	r3, [r4, #24]
1a001e48:	b913      	cbnz	r3, 1a001e50 <iscanf+0x14>
1a001e4a:	4620      	mov	r0, r4
1a001e4c:	f000 fa74 	bl	1a002338 <__sinit>
1a001e50:	ab05      	add	r3, sp, #20
1a001e52:	9a04      	ldr	r2, [sp, #16]
1a001e54:	6861      	ldr	r1, [r4, #4]
1a001e56:	9301      	str	r3, [sp, #4]
1a001e58:	4620      	mov	r0, r4
1a001e5a:	f001 f85b 	bl	1a002f14 <_vfiscanf_r>
1a001e5e:	b002      	add	sp, #8
1a001e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a001e64:	b004      	add	sp, #16
1a001e66:	4770      	bx	lr
1a001e68:	10000048 	.word	0x10000048

1a001e6c <_strtol_l.isra.0>:
1a001e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001e70:	4680      	mov	r8, r0
1a001e72:	4689      	mov	r9, r1
1a001e74:	4692      	mov	sl, r2
1a001e76:	461e      	mov	r6, r3
1a001e78:	460f      	mov	r7, r1
1a001e7a:	463d      	mov	r5, r7
1a001e7c:	9808      	ldr	r0, [sp, #32]
1a001e7e:	f815 4b01 	ldrb.w	r4, [r5], #1
1a001e82:	f000 faff 	bl	1a002484 <__locale_ctype_ptr_l>
1a001e86:	4420      	add	r0, r4
1a001e88:	7843      	ldrb	r3, [r0, #1]
1a001e8a:	f013 0308 	ands.w	r3, r3, #8
1a001e8e:	d132      	bne.n	1a001ef6 <_strtol_l.isra.0+0x8a>
1a001e90:	2c2d      	cmp	r4, #45	; 0x2d
1a001e92:	d132      	bne.n	1a001efa <_strtol_l.isra.0+0x8e>
1a001e94:	787c      	ldrb	r4, [r7, #1]
1a001e96:	1cbd      	adds	r5, r7, #2
1a001e98:	2201      	movs	r2, #1
1a001e9a:	2e00      	cmp	r6, #0
1a001e9c:	d05d      	beq.n	1a001f5a <_strtol_l.isra.0+0xee>
1a001e9e:	2e10      	cmp	r6, #16
1a001ea0:	d109      	bne.n	1a001eb6 <_strtol_l.isra.0+0x4a>
1a001ea2:	2c30      	cmp	r4, #48	; 0x30
1a001ea4:	d107      	bne.n	1a001eb6 <_strtol_l.isra.0+0x4a>
1a001ea6:	782b      	ldrb	r3, [r5, #0]
1a001ea8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
1a001eac:	2b58      	cmp	r3, #88	; 0x58
1a001eae:	d14f      	bne.n	1a001f50 <_strtol_l.isra.0+0xe4>
1a001eb0:	786c      	ldrb	r4, [r5, #1]
1a001eb2:	2610      	movs	r6, #16
1a001eb4:	3502      	adds	r5, #2
1a001eb6:	2a00      	cmp	r2, #0
1a001eb8:	bf14      	ite	ne
1a001eba:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
1a001ebe:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
1a001ec2:	2700      	movs	r7, #0
1a001ec4:	fbb1 fcf6 	udiv	ip, r1, r6
1a001ec8:	4638      	mov	r0, r7
1a001eca:	fb06 1e1c 	mls	lr, r6, ip, r1
1a001ece:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
1a001ed2:	2b09      	cmp	r3, #9
1a001ed4:	d817      	bhi.n	1a001f06 <_strtol_l.isra.0+0x9a>
1a001ed6:	461c      	mov	r4, r3
1a001ed8:	42a6      	cmp	r6, r4
1a001eda:	dd23      	ble.n	1a001f24 <_strtol_l.isra.0+0xb8>
1a001edc:	1c7b      	adds	r3, r7, #1
1a001ede:	d007      	beq.n	1a001ef0 <_strtol_l.isra.0+0x84>
1a001ee0:	4584      	cmp	ip, r0
1a001ee2:	d31c      	bcc.n	1a001f1e <_strtol_l.isra.0+0xb2>
1a001ee4:	d101      	bne.n	1a001eea <_strtol_l.isra.0+0x7e>
1a001ee6:	45a6      	cmp	lr, r4
1a001ee8:	db19      	blt.n	1a001f1e <_strtol_l.isra.0+0xb2>
1a001eea:	fb00 4006 	mla	r0, r0, r6, r4
1a001eee:	2701      	movs	r7, #1
1a001ef0:	f815 4b01 	ldrb.w	r4, [r5], #1
1a001ef4:	e7eb      	b.n	1a001ece <_strtol_l.isra.0+0x62>
1a001ef6:	462f      	mov	r7, r5
1a001ef8:	e7bf      	b.n	1a001e7a <_strtol_l.isra.0+0xe>
1a001efa:	2c2b      	cmp	r4, #43	; 0x2b
1a001efc:	bf04      	itt	eq
1a001efe:	1cbd      	addeq	r5, r7, #2
1a001f00:	787c      	ldrbeq	r4, [r7, #1]
1a001f02:	461a      	mov	r2, r3
1a001f04:	e7c9      	b.n	1a001e9a <_strtol_l.isra.0+0x2e>
1a001f06:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
1a001f0a:	2b19      	cmp	r3, #25
1a001f0c:	d801      	bhi.n	1a001f12 <_strtol_l.isra.0+0xa6>
1a001f0e:	3c37      	subs	r4, #55	; 0x37
1a001f10:	e7e2      	b.n	1a001ed8 <_strtol_l.isra.0+0x6c>
1a001f12:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
1a001f16:	2b19      	cmp	r3, #25
1a001f18:	d804      	bhi.n	1a001f24 <_strtol_l.isra.0+0xb8>
1a001f1a:	3c57      	subs	r4, #87	; 0x57
1a001f1c:	e7dc      	b.n	1a001ed8 <_strtol_l.isra.0+0x6c>
1a001f1e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a001f22:	e7e5      	b.n	1a001ef0 <_strtol_l.isra.0+0x84>
1a001f24:	1c7b      	adds	r3, r7, #1
1a001f26:	d108      	bne.n	1a001f3a <_strtol_l.isra.0+0xce>
1a001f28:	2322      	movs	r3, #34	; 0x22
1a001f2a:	f8c8 3000 	str.w	r3, [r8]
1a001f2e:	4608      	mov	r0, r1
1a001f30:	f1ba 0f00 	cmp.w	sl, #0
1a001f34:	d107      	bne.n	1a001f46 <_strtol_l.isra.0+0xda>
1a001f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001f3a:	b102      	cbz	r2, 1a001f3e <_strtol_l.isra.0+0xd2>
1a001f3c:	4240      	negs	r0, r0
1a001f3e:	f1ba 0f00 	cmp.w	sl, #0
1a001f42:	d0f8      	beq.n	1a001f36 <_strtol_l.isra.0+0xca>
1a001f44:	b10f      	cbz	r7, 1a001f4a <_strtol_l.isra.0+0xde>
1a001f46:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
1a001f4a:	f8ca 9000 	str.w	r9, [sl]
1a001f4e:	e7f2      	b.n	1a001f36 <_strtol_l.isra.0+0xca>
1a001f50:	2430      	movs	r4, #48	; 0x30
1a001f52:	2e00      	cmp	r6, #0
1a001f54:	d1af      	bne.n	1a001eb6 <_strtol_l.isra.0+0x4a>
1a001f56:	2608      	movs	r6, #8
1a001f58:	e7ad      	b.n	1a001eb6 <_strtol_l.isra.0+0x4a>
1a001f5a:	2c30      	cmp	r4, #48	; 0x30
1a001f5c:	d0a3      	beq.n	1a001ea6 <_strtol_l.isra.0+0x3a>
1a001f5e:	260a      	movs	r6, #10
1a001f60:	e7a9      	b.n	1a001eb6 <_strtol_l.isra.0+0x4a>
1a001f62:	Address 0x000000001a001f62 is out of bounds.


1a001f64 <_strtol_r>:
1a001f64:	b537      	push	{r0, r1, r2, r4, r5, lr}
1a001f66:	4c06      	ldr	r4, [pc, #24]	; (1a001f80 <_strtol_r+0x1c>)
1a001f68:	4d06      	ldr	r5, [pc, #24]	; (1a001f84 <_strtol_r+0x20>)
1a001f6a:	6824      	ldr	r4, [r4, #0]
1a001f6c:	6a24      	ldr	r4, [r4, #32]
1a001f6e:	2c00      	cmp	r4, #0
1a001f70:	bf08      	it	eq
1a001f72:	462c      	moveq	r4, r5
1a001f74:	9400      	str	r4, [sp, #0]
1a001f76:	f7ff ff79 	bl	1a001e6c <_strtol_l.isra.0>
1a001f7a:	b003      	add	sp, #12
1a001f7c:	bd30      	pop	{r4, r5, pc}
1a001f7e:	bf00      	nop
1a001f80:	10000048 	.word	0x10000048
1a001f84:	100000ac 	.word	0x100000ac

1a001f88 <strtol>:
1a001f88:	4b08      	ldr	r3, [pc, #32]	; (1a001fac <strtol+0x24>)
1a001f8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
1a001f8c:	681c      	ldr	r4, [r3, #0]
1a001f8e:	4d08      	ldr	r5, [pc, #32]	; (1a001fb0 <strtol+0x28>)
1a001f90:	6a23      	ldr	r3, [r4, #32]
1a001f92:	2b00      	cmp	r3, #0
1a001f94:	bf08      	it	eq
1a001f96:	462b      	moveq	r3, r5
1a001f98:	9300      	str	r3, [sp, #0]
1a001f9a:	4613      	mov	r3, r2
1a001f9c:	460a      	mov	r2, r1
1a001f9e:	4601      	mov	r1, r0
1a001fa0:	4620      	mov	r0, r4
1a001fa2:	f7ff ff63 	bl	1a001e6c <_strtol_l.isra.0>
1a001fa6:	b003      	add	sp, #12
1a001fa8:	bd30      	pop	{r4, r5, pc}
1a001faa:	bf00      	nop
1a001fac:	10000048 	.word	0x10000048
1a001fb0:	100000ac 	.word	0x100000ac

1a001fb4 <__swbuf_r>:
1a001fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001fb6:	460e      	mov	r6, r1
1a001fb8:	4614      	mov	r4, r2
1a001fba:	4605      	mov	r5, r0
1a001fbc:	b118      	cbz	r0, 1a001fc6 <__swbuf_r+0x12>
1a001fbe:	6983      	ldr	r3, [r0, #24]
1a001fc0:	b90b      	cbnz	r3, 1a001fc6 <__swbuf_r+0x12>
1a001fc2:	f000 f9b9 	bl	1a002338 <__sinit>
1a001fc6:	4b21      	ldr	r3, [pc, #132]	; (1a00204c <__swbuf_r+0x98>)
1a001fc8:	429c      	cmp	r4, r3
1a001fca:	d12a      	bne.n	1a002022 <__swbuf_r+0x6e>
1a001fcc:	686c      	ldr	r4, [r5, #4]
1a001fce:	69a3      	ldr	r3, [r4, #24]
1a001fd0:	60a3      	str	r3, [r4, #8]
1a001fd2:	89a3      	ldrh	r3, [r4, #12]
1a001fd4:	071a      	lsls	r2, r3, #28
1a001fd6:	d52e      	bpl.n	1a002036 <__swbuf_r+0x82>
1a001fd8:	6923      	ldr	r3, [r4, #16]
1a001fda:	b363      	cbz	r3, 1a002036 <__swbuf_r+0x82>
1a001fdc:	6923      	ldr	r3, [r4, #16]
1a001fde:	6820      	ldr	r0, [r4, #0]
1a001fe0:	1ac0      	subs	r0, r0, r3
1a001fe2:	6963      	ldr	r3, [r4, #20]
1a001fe4:	b2f6      	uxtb	r6, r6
1a001fe6:	4283      	cmp	r3, r0
1a001fe8:	4637      	mov	r7, r6
1a001fea:	dc04      	bgt.n	1a001ff6 <__swbuf_r+0x42>
1a001fec:	4621      	mov	r1, r4
1a001fee:	4628      	mov	r0, r5
1a001ff0:	f000 f926 	bl	1a002240 <_fflush_r>
1a001ff4:	bb28      	cbnz	r0, 1a002042 <__swbuf_r+0x8e>
1a001ff6:	68a3      	ldr	r3, [r4, #8]
1a001ff8:	3b01      	subs	r3, #1
1a001ffa:	60a3      	str	r3, [r4, #8]
1a001ffc:	6823      	ldr	r3, [r4, #0]
1a001ffe:	1c5a      	adds	r2, r3, #1
1a002000:	6022      	str	r2, [r4, #0]
1a002002:	701e      	strb	r6, [r3, #0]
1a002004:	6963      	ldr	r3, [r4, #20]
1a002006:	3001      	adds	r0, #1
1a002008:	4283      	cmp	r3, r0
1a00200a:	d004      	beq.n	1a002016 <__swbuf_r+0x62>
1a00200c:	89a3      	ldrh	r3, [r4, #12]
1a00200e:	07db      	lsls	r3, r3, #31
1a002010:	d519      	bpl.n	1a002046 <__swbuf_r+0x92>
1a002012:	2e0a      	cmp	r6, #10
1a002014:	d117      	bne.n	1a002046 <__swbuf_r+0x92>
1a002016:	4621      	mov	r1, r4
1a002018:	4628      	mov	r0, r5
1a00201a:	f000 f911 	bl	1a002240 <_fflush_r>
1a00201e:	b190      	cbz	r0, 1a002046 <__swbuf_r+0x92>
1a002020:	e00f      	b.n	1a002042 <__swbuf_r+0x8e>
1a002022:	4b0b      	ldr	r3, [pc, #44]	; (1a002050 <__swbuf_r+0x9c>)
1a002024:	429c      	cmp	r4, r3
1a002026:	d101      	bne.n	1a00202c <__swbuf_r+0x78>
1a002028:	68ac      	ldr	r4, [r5, #8]
1a00202a:	e7d0      	b.n	1a001fce <__swbuf_r+0x1a>
1a00202c:	4b09      	ldr	r3, [pc, #36]	; (1a002054 <__swbuf_r+0xa0>)
1a00202e:	429c      	cmp	r4, r3
1a002030:	bf08      	it	eq
1a002032:	68ec      	ldreq	r4, [r5, #12]
1a002034:	e7cb      	b.n	1a001fce <__swbuf_r+0x1a>
1a002036:	4621      	mov	r1, r4
1a002038:	4628      	mov	r0, r5
1a00203a:	f000 f80d 	bl	1a002058 <__swsetup_r>
1a00203e:	2800      	cmp	r0, #0
1a002040:	d0cc      	beq.n	1a001fdc <__swbuf_r+0x28>
1a002042:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a002046:	4638      	mov	r0, r7
1a002048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00204a:	bf00      	nop
1a00204c:	1a003b6c 	.word	0x1a003b6c
1a002050:	1a003b8c 	.word	0x1a003b8c
1a002054:	1a003b4c 	.word	0x1a003b4c

1a002058 <__swsetup_r>:
1a002058:	4b32      	ldr	r3, [pc, #200]	; (1a002124 <__swsetup_r+0xcc>)
1a00205a:	b570      	push	{r4, r5, r6, lr}
1a00205c:	681d      	ldr	r5, [r3, #0]
1a00205e:	4606      	mov	r6, r0
1a002060:	460c      	mov	r4, r1
1a002062:	b125      	cbz	r5, 1a00206e <__swsetup_r+0x16>
1a002064:	69ab      	ldr	r3, [r5, #24]
1a002066:	b913      	cbnz	r3, 1a00206e <__swsetup_r+0x16>
1a002068:	4628      	mov	r0, r5
1a00206a:	f000 f965 	bl	1a002338 <__sinit>
1a00206e:	4b2e      	ldr	r3, [pc, #184]	; (1a002128 <__swsetup_r+0xd0>)
1a002070:	429c      	cmp	r4, r3
1a002072:	d10f      	bne.n	1a002094 <__swsetup_r+0x3c>
1a002074:	686c      	ldr	r4, [r5, #4]
1a002076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00207a:	b29a      	uxth	r2, r3
1a00207c:	0715      	lsls	r5, r2, #28
1a00207e:	d42c      	bmi.n	1a0020da <__swsetup_r+0x82>
1a002080:	06d0      	lsls	r0, r2, #27
1a002082:	d411      	bmi.n	1a0020a8 <__swsetup_r+0x50>
1a002084:	2209      	movs	r2, #9
1a002086:	6032      	str	r2, [r6, #0]
1a002088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00208c:	81a3      	strh	r3, [r4, #12]
1a00208e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002092:	e03e      	b.n	1a002112 <__swsetup_r+0xba>
1a002094:	4b25      	ldr	r3, [pc, #148]	; (1a00212c <__swsetup_r+0xd4>)
1a002096:	429c      	cmp	r4, r3
1a002098:	d101      	bne.n	1a00209e <__swsetup_r+0x46>
1a00209a:	68ac      	ldr	r4, [r5, #8]
1a00209c:	e7eb      	b.n	1a002076 <__swsetup_r+0x1e>
1a00209e:	4b24      	ldr	r3, [pc, #144]	; (1a002130 <__swsetup_r+0xd8>)
1a0020a0:	429c      	cmp	r4, r3
1a0020a2:	bf08      	it	eq
1a0020a4:	68ec      	ldreq	r4, [r5, #12]
1a0020a6:	e7e6      	b.n	1a002076 <__swsetup_r+0x1e>
1a0020a8:	0751      	lsls	r1, r2, #29
1a0020aa:	d512      	bpl.n	1a0020d2 <__swsetup_r+0x7a>
1a0020ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a0020ae:	b141      	cbz	r1, 1a0020c2 <__swsetup_r+0x6a>
1a0020b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a0020b4:	4299      	cmp	r1, r3
1a0020b6:	d002      	beq.n	1a0020be <__swsetup_r+0x66>
1a0020b8:	4630      	mov	r0, r6
1a0020ba:	f000 fa6b 	bl	1a002594 <_free_r>
1a0020be:	2300      	movs	r3, #0
1a0020c0:	6363      	str	r3, [r4, #52]	; 0x34
1a0020c2:	89a3      	ldrh	r3, [r4, #12]
1a0020c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a0020c8:	81a3      	strh	r3, [r4, #12]
1a0020ca:	2300      	movs	r3, #0
1a0020cc:	6063      	str	r3, [r4, #4]
1a0020ce:	6923      	ldr	r3, [r4, #16]
1a0020d0:	6023      	str	r3, [r4, #0]
1a0020d2:	89a3      	ldrh	r3, [r4, #12]
1a0020d4:	f043 0308 	orr.w	r3, r3, #8
1a0020d8:	81a3      	strh	r3, [r4, #12]
1a0020da:	6923      	ldr	r3, [r4, #16]
1a0020dc:	b94b      	cbnz	r3, 1a0020f2 <__swsetup_r+0x9a>
1a0020de:	89a3      	ldrh	r3, [r4, #12]
1a0020e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a0020e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a0020e8:	d003      	beq.n	1a0020f2 <__swsetup_r+0x9a>
1a0020ea:	4621      	mov	r1, r4
1a0020ec:	4630      	mov	r0, r6
1a0020ee:	f000 f9ff 	bl	1a0024f0 <__smakebuf_r>
1a0020f2:	89a2      	ldrh	r2, [r4, #12]
1a0020f4:	f012 0301 	ands.w	r3, r2, #1
1a0020f8:	d00c      	beq.n	1a002114 <__swsetup_r+0xbc>
1a0020fa:	2300      	movs	r3, #0
1a0020fc:	60a3      	str	r3, [r4, #8]
1a0020fe:	6963      	ldr	r3, [r4, #20]
1a002100:	425b      	negs	r3, r3
1a002102:	61a3      	str	r3, [r4, #24]
1a002104:	6923      	ldr	r3, [r4, #16]
1a002106:	b953      	cbnz	r3, 1a00211e <__swsetup_r+0xc6>
1a002108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00210c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a002110:	d1ba      	bne.n	1a002088 <__swsetup_r+0x30>
1a002112:	bd70      	pop	{r4, r5, r6, pc}
1a002114:	0792      	lsls	r2, r2, #30
1a002116:	bf58      	it	pl
1a002118:	6963      	ldrpl	r3, [r4, #20]
1a00211a:	60a3      	str	r3, [r4, #8]
1a00211c:	e7f2      	b.n	1a002104 <__swsetup_r+0xac>
1a00211e:	2000      	movs	r0, #0
1a002120:	e7f7      	b.n	1a002112 <__swsetup_r+0xba>
1a002122:	bf00      	nop
1a002124:	10000048 	.word	0x10000048
1a002128:	1a003b6c 	.word	0x1a003b6c
1a00212c:	1a003b8c 	.word	0x1a003b8c
1a002130:	1a003b4c 	.word	0x1a003b4c

1a002134 <__sflush_r>:
1a002134:	898a      	ldrh	r2, [r1, #12]
1a002136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00213a:	4605      	mov	r5, r0
1a00213c:	0710      	lsls	r0, r2, #28
1a00213e:	460c      	mov	r4, r1
1a002140:	d458      	bmi.n	1a0021f4 <__sflush_r+0xc0>
1a002142:	684b      	ldr	r3, [r1, #4]
1a002144:	2b00      	cmp	r3, #0
1a002146:	dc05      	bgt.n	1a002154 <__sflush_r+0x20>
1a002148:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a00214a:	2b00      	cmp	r3, #0
1a00214c:	dc02      	bgt.n	1a002154 <__sflush_r+0x20>
1a00214e:	2000      	movs	r0, #0
1a002150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002154:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a002156:	2e00      	cmp	r6, #0
1a002158:	d0f9      	beq.n	1a00214e <__sflush_r+0x1a>
1a00215a:	2300      	movs	r3, #0
1a00215c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a002160:	682f      	ldr	r7, [r5, #0]
1a002162:	6a21      	ldr	r1, [r4, #32]
1a002164:	602b      	str	r3, [r5, #0]
1a002166:	d032      	beq.n	1a0021ce <__sflush_r+0x9a>
1a002168:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a00216a:	89a3      	ldrh	r3, [r4, #12]
1a00216c:	075a      	lsls	r2, r3, #29
1a00216e:	d505      	bpl.n	1a00217c <__sflush_r+0x48>
1a002170:	6863      	ldr	r3, [r4, #4]
1a002172:	1ac0      	subs	r0, r0, r3
1a002174:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a002176:	b10b      	cbz	r3, 1a00217c <__sflush_r+0x48>
1a002178:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a00217a:	1ac0      	subs	r0, r0, r3
1a00217c:	2300      	movs	r3, #0
1a00217e:	4602      	mov	r2, r0
1a002180:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a002182:	6a21      	ldr	r1, [r4, #32]
1a002184:	4628      	mov	r0, r5
1a002186:	47b0      	blx	r6
1a002188:	1c43      	adds	r3, r0, #1
1a00218a:	89a3      	ldrh	r3, [r4, #12]
1a00218c:	d106      	bne.n	1a00219c <__sflush_r+0x68>
1a00218e:	6829      	ldr	r1, [r5, #0]
1a002190:	291d      	cmp	r1, #29
1a002192:	d848      	bhi.n	1a002226 <__sflush_r+0xf2>
1a002194:	4a29      	ldr	r2, [pc, #164]	; (1a00223c <__sflush_r+0x108>)
1a002196:	40ca      	lsrs	r2, r1
1a002198:	07d6      	lsls	r6, r2, #31
1a00219a:	d544      	bpl.n	1a002226 <__sflush_r+0xf2>
1a00219c:	2200      	movs	r2, #0
1a00219e:	6062      	str	r2, [r4, #4]
1a0021a0:	04d9      	lsls	r1, r3, #19
1a0021a2:	6922      	ldr	r2, [r4, #16]
1a0021a4:	6022      	str	r2, [r4, #0]
1a0021a6:	d504      	bpl.n	1a0021b2 <__sflush_r+0x7e>
1a0021a8:	1c42      	adds	r2, r0, #1
1a0021aa:	d101      	bne.n	1a0021b0 <__sflush_r+0x7c>
1a0021ac:	682b      	ldr	r3, [r5, #0]
1a0021ae:	b903      	cbnz	r3, 1a0021b2 <__sflush_r+0x7e>
1a0021b0:	6560      	str	r0, [r4, #84]	; 0x54
1a0021b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a0021b4:	602f      	str	r7, [r5, #0]
1a0021b6:	2900      	cmp	r1, #0
1a0021b8:	d0c9      	beq.n	1a00214e <__sflush_r+0x1a>
1a0021ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a0021be:	4299      	cmp	r1, r3
1a0021c0:	d002      	beq.n	1a0021c8 <__sflush_r+0x94>
1a0021c2:	4628      	mov	r0, r5
1a0021c4:	f000 f9e6 	bl	1a002594 <_free_r>
1a0021c8:	2000      	movs	r0, #0
1a0021ca:	6360      	str	r0, [r4, #52]	; 0x34
1a0021cc:	e7c0      	b.n	1a002150 <__sflush_r+0x1c>
1a0021ce:	2301      	movs	r3, #1
1a0021d0:	4628      	mov	r0, r5
1a0021d2:	47b0      	blx	r6
1a0021d4:	1c41      	adds	r1, r0, #1
1a0021d6:	d1c8      	bne.n	1a00216a <__sflush_r+0x36>
1a0021d8:	682b      	ldr	r3, [r5, #0]
1a0021da:	2b00      	cmp	r3, #0
1a0021dc:	d0c5      	beq.n	1a00216a <__sflush_r+0x36>
1a0021de:	2b1d      	cmp	r3, #29
1a0021e0:	d001      	beq.n	1a0021e6 <__sflush_r+0xb2>
1a0021e2:	2b16      	cmp	r3, #22
1a0021e4:	d101      	bne.n	1a0021ea <__sflush_r+0xb6>
1a0021e6:	602f      	str	r7, [r5, #0]
1a0021e8:	e7b1      	b.n	1a00214e <__sflush_r+0x1a>
1a0021ea:	89a3      	ldrh	r3, [r4, #12]
1a0021ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0021f0:	81a3      	strh	r3, [r4, #12]
1a0021f2:	e7ad      	b.n	1a002150 <__sflush_r+0x1c>
1a0021f4:	690f      	ldr	r7, [r1, #16]
1a0021f6:	2f00      	cmp	r7, #0
1a0021f8:	d0a9      	beq.n	1a00214e <__sflush_r+0x1a>
1a0021fa:	0793      	lsls	r3, r2, #30
1a0021fc:	680e      	ldr	r6, [r1, #0]
1a0021fe:	bf08      	it	eq
1a002200:	694b      	ldreq	r3, [r1, #20]
1a002202:	600f      	str	r7, [r1, #0]
1a002204:	bf18      	it	ne
1a002206:	2300      	movne	r3, #0
1a002208:	eba6 0807 	sub.w	r8, r6, r7
1a00220c:	608b      	str	r3, [r1, #8]
1a00220e:	f1b8 0f00 	cmp.w	r8, #0
1a002212:	dd9c      	ble.n	1a00214e <__sflush_r+0x1a>
1a002214:	4643      	mov	r3, r8
1a002216:	463a      	mov	r2, r7
1a002218:	6a21      	ldr	r1, [r4, #32]
1a00221a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a00221c:	4628      	mov	r0, r5
1a00221e:	47b0      	blx	r6
1a002220:	2800      	cmp	r0, #0
1a002222:	dc06      	bgt.n	1a002232 <__sflush_r+0xfe>
1a002224:	89a3      	ldrh	r3, [r4, #12]
1a002226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00222a:	81a3      	strh	r3, [r4, #12]
1a00222c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002230:	e78e      	b.n	1a002150 <__sflush_r+0x1c>
1a002232:	4407      	add	r7, r0
1a002234:	eba8 0800 	sub.w	r8, r8, r0
1a002238:	e7e9      	b.n	1a00220e <__sflush_r+0xda>
1a00223a:	bf00      	nop
1a00223c:	20400001 	.word	0x20400001

1a002240 <_fflush_r>:
1a002240:	b538      	push	{r3, r4, r5, lr}
1a002242:	690b      	ldr	r3, [r1, #16]
1a002244:	4605      	mov	r5, r0
1a002246:	460c      	mov	r4, r1
1a002248:	b1db      	cbz	r3, 1a002282 <_fflush_r+0x42>
1a00224a:	b118      	cbz	r0, 1a002254 <_fflush_r+0x14>
1a00224c:	6983      	ldr	r3, [r0, #24]
1a00224e:	b90b      	cbnz	r3, 1a002254 <_fflush_r+0x14>
1a002250:	f000 f872 	bl	1a002338 <__sinit>
1a002254:	4b0c      	ldr	r3, [pc, #48]	; (1a002288 <_fflush_r+0x48>)
1a002256:	429c      	cmp	r4, r3
1a002258:	d109      	bne.n	1a00226e <_fflush_r+0x2e>
1a00225a:	686c      	ldr	r4, [r5, #4]
1a00225c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002260:	b17b      	cbz	r3, 1a002282 <_fflush_r+0x42>
1a002262:	4621      	mov	r1, r4
1a002264:	4628      	mov	r0, r5
1a002266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a00226a:	f7ff bf63 	b.w	1a002134 <__sflush_r>
1a00226e:	4b07      	ldr	r3, [pc, #28]	; (1a00228c <_fflush_r+0x4c>)
1a002270:	429c      	cmp	r4, r3
1a002272:	d101      	bne.n	1a002278 <_fflush_r+0x38>
1a002274:	68ac      	ldr	r4, [r5, #8]
1a002276:	e7f1      	b.n	1a00225c <_fflush_r+0x1c>
1a002278:	4b05      	ldr	r3, [pc, #20]	; (1a002290 <_fflush_r+0x50>)
1a00227a:	429c      	cmp	r4, r3
1a00227c:	bf08      	it	eq
1a00227e:	68ec      	ldreq	r4, [r5, #12]
1a002280:	e7ec      	b.n	1a00225c <_fflush_r+0x1c>
1a002282:	2000      	movs	r0, #0
1a002284:	bd38      	pop	{r3, r4, r5, pc}
1a002286:	bf00      	nop
1a002288:	1a003b6c 	.word	0x1a003b6c
1a00228c:	1a003b8c 	.word	0x1a003b8c
1a002290:	1a003b4c 	.word	0x1a003b4c

1a002294 <fflush>:
1a002294:	4601      	mov	r1, r0
1a002296:	b920      	cbnz	r0, 1a0022a2 <fflush+0xe>
1a002298:	4b04      	ldr	r3, [pc, #16]	; (1a0022ac <fflush+0x18>)
1a00229a:	4905      	ldr	r1, [pc, #20]	; (1a0022b0 <fflush+0x1c>)
1a00229c:	6818      	ldr	r0, [r3, #0]
1a00229e:	f000 b8d3 	b.w	1a002448 <_fwalk_reent>
1a0022a2:	4b04      	ldr	r3, [pc, #16]	; (1a0022b4 <fflush+0x20>)
1a0022a4:	6818      	ldr	r0, [r3, #0]
1a0022a6:	f7ff bfcb 	b.w	1a002240 <_fflush_r>
1a0022aa:	bf00      	nop
1a0022ac:	1a003bac 	.word	0x1a003bac
1a0022b0:	1a002241 	.word	0x1a002241
1a0022b4:	10000048 	.word	0x10000048

1a0022b8 <std>:
1a0022b8:	2300      	movs	r3, #0
1a0022ba:	b510      	push	{r4, lr}
1a0022bc:	4604      	mov	r4, r0
1a0022be:	e9c0 3300 	strd	r3, r3, [r0]
1a0022c2:	6083      	str	r3, [r0, #8]
1a0022c4:	8181      	strh	r1, [r0, #12]
1a0022c6:	6643      	str	r3, [r0, #100]	; 0x64
1a0022c8:	81c2      	strh	r2, [r0, #14]
1a0022ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a0022ce:	6183      	str	r3, [r0, #24]
1a0022d0:	4619      	mov	r1, r3
1a0022d2:	2208      	movs	r2, #8
1a0022d4:	305c      	adds	r0, #92	; 0x5c
1a0022d6:	f7ff fd2c 	bl	1a001d32 <memset>
1a0022da:	4b05      	ldr	r3, [pc, #20]	; (1a0022f0 <std+0x38>)
1a0022dc:	6263      	str	r3, [r4, #36]	; 0x24
1a0022de:	4b05      	ldr	r3, [pc, #20]	; (1a0022f4 <std+0x3c>)
1a0022e0:	62a3      	str	r3, [r4, #40]	; 0x28
1a0022e2:	4b05      	ldr	r3, [pc, #20]	; (1a0022f8 <std+0x40>)
1a0022e4:	62e3      	str	r3, [r4, #44]	; 0x2c
1a0022e6:	4b05      	ldr	r3, [pc, #20]	; (1a0022fc <std+0x44>)
1a0022e8:	6224      	str	r4, [r4, #32]
1a0022ea:	6323      	str	r3, [r4, #48]	; 0x30
1a0022ec:	bd10      	pop	{r4, pc}
1a0022ee:	bf00      	nop
1a0022f0:	1a0033a5 	.word	0x1a0033a5
1a0022f4:	1a0033c7 	.word	0x1a0033c7
1a0022f8:	1a0033ff 	.word	0x1a0033ff
1a0022fc:	1a003423 	.word	0x1a003423

1a002300 <_cleanup_r>:
1a002300:	4901      	ldr	r1, [pc, #4]	; (1a002308 <_cleanup_r+0x8>)
1a002302:	f000 b8a1 	b.w	1a002448 <_fwalk_reent>
1a002306:	bf00      	nop
1a002308:	1a002241 	.word	0x1a002241

1a00230c <__sfmoreglue>:
1a00230c:	b570      	push	{r4, r5, r6, lr}
1a00230e:	1e4a      	subs	r2, r1, #1
1a002310:	2568      	movs	r5, #104	; 0x68
1a002312:	4355      	muls	r5, r2
1a002314:	460e      	mov	r6, r1
1a002316:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a00231a:	f000 f989 	bl	1a002630 <_malloc_r>
1a00231e:	4604      	mov	r4, r0
1a002320:	b140      	cbz	r0, 1a002334 <__sfmoreglue+0x28>
1a002322:	2100      	movs	r1, #0
1a002324:	e9c0 1600 	strd	r1, r6, [r0]
1a002328:	300c      	adds	r0, #12
1a00232a:	60a0      	str	r0, [r4, #8]
1a00232c:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a002330:	f7ff fcff 	bl	1a001d32 <memset>
1a002334:	4620      	mov	r0, r4
1a002336:	bd70      	pop	{r4, r5, r6, pc}

1a002338 <__sinit>:
1a002338:	6983      	ldr	r3, [r0, #24]
1a00233a:	b510      	push	{r4, lr}
1a00233c:	4604      	mov	r4, r0
1a00233e:	bb33      	cbnz	r3, 1a00238e <__sinit+0x56>
1a002340:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
1a002344:	6503      	str	r3, [r0, #80]	; 0x50
1a002346:	4b12      	ldr	r3, [pc, #72]	; (1a002390 <__sinit+0x58>)
1a002348:	4a12      	ldr	r2, [pc, #72]	; (1a002394 <__sinit+0x5c>)
1a00234a:	681b      	ldr	r3, [r3, #0]
1a00234c:	6282      	str	r2, [r0, #40]	; 0x28
1a00234e:	4298      	cmp	r0, r3
1a002350:	bf04      	itt	eq
1a002352:	2301      	moveq	r3, #1
1a002354:	6183      	streq	r3, [r0, #24]
1a002356:	f000 f81f 	bl	1a002398 <__sfp>
1a00235a:	6060      	str	r0, [r4, #4]
1a00235c:	4620      	mov	r0, r4
1a00235e:	f000 f81b 	bl	1a002398 <__sfp>
1a002362:	60a0      	str	r0, [r4, #8]
1a002364:	4620      	mov	r0, r4
1a002366:	f000 f817 	bl	1a002398 <__sfp>
1a00236a:	2200      	movs	r2, #0
1a00236c:	60e0      	str	r0, [r4, #12]
1a00236e:	2104      	movs	r1, #4
1a002370:	6860      	ldr	r0, [r4, #4]
1a002372:	f7ff ffa1 	bl	1a0022b8 <std>
1a002376:	2201      	movs	r2, #1
1a002378:	2109      	movs	r1, #9
1a00237a:	68a0      	ldr	r0, [r4, #8]
1a00237c:	f7ff ff9c 	bl	1a0022b8 <std>
1a002380:	2202      	movs	r2, #2
1a002382:	2112      	movs	r1, #18
1a002384:	68e0      	ldr	r0, [r4, #12]
1a002386:	f7ff ff97 	bl	1a0022b8 <std>
1a00238a:	2301      	movs	r3, #1
1a00238c:	61a3      	str	r3, [r4, #24]
1a00238e:	bd10      	pop	{r4, pc}
1a002390:	1a003bac 	.word	0x1a003bac
1a002394:	1a002301 	.word	0x1a002301

1a002398 <__sfp>:
1a002398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00239a:	4b1b      	ldr	r3, [pc, #108]	; (1a002408 <__sfp+0x70>)
1a00239c:	681e      	ldr	r6, [r3, #0]
1a00239e:	69b3      	ldr	r3, [r6, #24]
1a0023a0:	4607      	mov	r7, r0
1a0023a2:	b913      	cbnz	r3, 1a0023aa <__sfp+0x12>
1a0023a4:	4630      	mov	r0, r6
1a0023a6:	f7ff ffc7 	bl	1a002338 <__sinit>
1a0023aa:	3648      	adds	r6, #72	; 0x48
1a0023ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a0023b0:	3b01      	subs	r3, #1
1a0023b2:	d503      	bpl.n	1a0023bc <__sfp+0x24>
1a0023b4:	6833      	ldr	r3, [r6, #0]
1a0023b6:	b133      	cbz	r3, 1a0023c6 <__sfp+0x2e>
1a0023b8:	6836      	ldr	r6, [r6, #0]
1a0023ba:	e7f7      	b.n	1a0023ac <__sfp+0x14>
1a0023bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a0023c0:	b16d      	cbz	r5, 1a0023de <__sfp+0x46>
1a0023c2:	3468      	adds	r4, #104	; 0x68
1a0023c4:	e7f4      	b.n	1a0023b0 <__sfp+0x18>
1a0023c6:	2104      	movs	r1, #4
1a0023c8:	4638      	mov	r0, r7
1a0023ca:	f7ff ff9f 	bl	1a00230c <__sfmoreglue>
1a0023ce:	6030      	str	r0, [r6, #0]
1a0023d0:	2800      	cmp	r0, #0
1a0023d2:	d1f1      	bne.n	1a0023b8 <__sfp+0x20>
1a0023d4:	230c      	movs	r3, #12
1a0023d6:	603b      	str	r3, [r7, #0]
1a0023d8:	4604      	mov	r4, r0
1a0023da:	4620      	mov	r0, r4
1a0023dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0023de:	4b0b      	ldr	r3, [pc, #44]	; (1a00240c <__sfp+0x74>)
1a0023e0:	6665      	str	r5, [r4, #100]	; 0x64
1a0023e2:	e9c4 5500 	strd	r5, r5, [r4]
1a0023e6:	60a5      	str	r5, [r4, #8]
1a0023e8:	e9c4 3503 	strd	r3, r5, [r4, #12]
1a0023ec:	e9c4 5505 	strd	r5, r5, [r4, #20]
1a0023f0:	2208      	movs	r2, #8
1a0023f2:	4629      	mov	r1, r5
1a0023f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a0023f8:	f7ff fc9b 	bl	1a001d32 <memset>
1a0023fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a002400:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a002404:	e7e9      	b.n	1a0023da <__sfp+0x42>
1a002406:	bf00      	nop
1a002408:	1a003bac 	.word	0x1a003bac
1a00240c:	ffff0001 	.word	0xffff0001

1a002410 <_fwalk>:
1a002410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002414:	4688      	mov	r8, r1
1a002416:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a00241a:	2600      	movs	r6, #0
1a00241c:	b914      	cbnz	r4, 1a002424 <_fwalk+0x14>
1a00241e:	4630      	mov	r0, r6
1a002420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002424:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a002428:	3f01      	subs	r7, #1
1a00242a:	d501      	bpl.n	1a002430 <_fwalk+0x20>
1a00242c:	6824      	ldr	r4, [r4, #0]
1a00242e:	e7f5      	b.n	1a00241c <_fwalk+0xc>
1a002430:	89ab      	ldrh	r3, [r5, #12]
1a002432:	2b01      	cmp	r3, #1
1a002434:	d906      	bls.n	1a002444 <_fwalk+0x34>
1a002436:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a00243a:	3301      	adds	r3, #1
1a00243c:	d002      	beq.n	1a002444 <_fwalk+0x34>
1a00243e:	4628      	mov	r0, r5
1a002440:	47c0      	blx	r8
1a002442:	4306      	orrs	r6, r0
1a002444:	3568      	adds	r5, #104	; 0x68
1a002446:	e7ef      	b.n	1a002428 <_fwalk+0x18>

1a002448 <_fwalk_reent>:
1a002448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00244c:	4680      	mov	r8, r0
1a00244e:	4689      	mov	r9, r1
1a002450:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a002454:	2600      	movs	r6, #0
1a002456:	b914      	cbnz	r4, 1a00245e <_fwalk_reent+0x16>
1a002458:	4630      	mov	r0, r6
1a00245a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00245e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a002462:	3f01      	subs	r7, #1
1a002464:	d501      	bpl.n	1a00246a <_fwalk_reent+0x22>
1a002466:	6824      	ldr	r4, [r4, #0]
1a002468:	e7f5      	b.n	1a002456 <_fwalk_reent+0xe>
1a00246a:	89ab      	ldrh	r3, [r5, #12]
1a00246c:	2b01      	cmp	r3, #1
1a00246e:	d907      	bls.n	1a002480 <_fwalk_reent+0x38>
1a002470:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a002474:	3301      	adds	r3, #1
1a002476:	d003      	beq.n	1a002480 <_fwalk_reent+0x38>
1a002478:	4629      	mov	r1, r5
1a00247a:	4640      	mov	r0, r8
1a00247c:	47c8      	blx	r9
1a00247e:	4306      	orrs	r6, r0
1a002480:	3568      	adds	r5, #104	; 0x68
1a002482:	e7ee      	b.n	1a002462 <_fwalk_reent+0x1a>

1a002484 <__locale_ctype_ptr_l>:
1a002484:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
1a002488:	4770      	bx	lr
1a00248a:	Address 0x000000001a00248a is out of bounds.


1a00248c <__locale_ctype_ptr>:
1a00248c:	4b04      	ldr	r3, [pc, #16]	; (1a0024a0 <__locale_ctype_ptr+0x14>)
1a00248e:	4a05      	ldr	r2, [pc, #20]	; (1a0024a4 <__locale_ctype_ptr+0x18>)
1a002490:	681b      	ldr	r3, [r3, #0]
1a002492:	6a1b      	ldr	r3, [r3, #32]
1a002494:	2b00      	cmp	r3, #0
1a002496:	bf08      	it	eq
1a002498:	4613      	moveq	r3, r2
1a00249a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
1a00249e:	4770      	bx	lr
1a0024a0:	10000048 	.word	0x10000048
1a0024a4:	100000ac 	.word	0x100000ac

1a0024a8 <__swhatbuf_r>:
1a0024a8:	b570      	push	{r4, r5, r6, lr}
1a0024aa:	460e      	mov	r6, r1
1a0024ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0024b0:	2900      	cmp	r1, #0
1a0024b2:	b096      	sub	sp, #88	; 0x58
1a0024b4:	4614      	mov	r4, r2
1a0024b6:	461d      	mov	r5, r3
1a0024b8:	da07      	bge.n	1a0024ca <__swhatbuf_r+0x22>
1a0024ba:	2300      	movs	r3, #0
1a0024bc:	602b      	str	r3, [r5, #0]
1a0024be:	89b3      	ldrh	r3, [r6, #12]
1a0024c0:	061a      	lsls	r2, r3, #24
1a0024c2:	d410      	bmi.n	1a0024e6 <__swhatbuf_r+0x3e>
1a0024c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a0024c8:	e00e      	b.n	1a0024e8 <__swhatbuf_r+0x40>
1a0024ca:	466a      	mov	r2, sp
1a0024cc:	f7fe f8df 	bl	1a00068e <_fstat_r>
1a0024d0:	2800      	cmp	r0, #0
1a0024d2:	dbf2      	blt.n	1a0024ba <__swhatbuf_r+0x12>
1a0024d4:	9a01      	ldr	r2, [sp, #4]
1a0024d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a0024da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a0024de:	425a      	negs	r2, r3
1a0024e0:	415a      	adcs	r2, r3
1a0024e2:	602a      	str	r2, [r5, #0]
1a0024e4:	e7ee      	b.n	1a0024c4 <__swhatbuf_r+0x1c>
1a0024e6:	2340      	movs	r3, #64	; 0x40
1a0024e8:	2000      	movs	r0, #0
1a0024ea:	6023      	str	r3, [r4, #0]
1a0024ec:	b016      	add	sp, #88	; 0x58
1a0024ee:	bd70      	pop	{r4, r5, r6, pc}

1a0024f0 <__smakebuf_r>:
1a0024f0:	898b      	ldrh	r3, [r1, #12]
1a0024f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a0024f4:	079d      	lsls	r5, r3, #30
1a0024f6:	4606      	mov	r6, r0
1a0024f8:	460c      	mov	r4, r1
1a0024fa:	d507      	bpl.n	1a00250c <__smakebuf_r+0x1c>
1a0024fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a002500:	6023      	str	r3, [r4, #0]
1a002502:	6123      	str	r3, [r4, #16]
1a002504:	2301      	movs	r3, #1
1a002506:	6163      	str	r3, [r4, #20]
1a002508:	b002      	add	sp, #8
1a00250a:	bd70      	pop	{r4, r5, r6, pc}
1a00250c:	ab01      	add	r3, sp, #4
1a00250e:	466a      	mov	r2, sp
1a002510:	f7ff ffca 	bl	1a0024a8 <__swhatbuf_r>
1a002514:	9900      	ldr	r1, [sp, #0]
1a002516:	4605      	mov	r5, r0
1a002518:	4630      	mov	r0, r6
1a00251a:	f000 f889 	bl	1a002630 <_malloc_r>
1a00251e:	b948      	cbnz	r0, 1a002534 <__smakebuf_r+0x44>
1a002520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002524:	059a      	lsls	r2, r3, #22
1a002526:	d4ef      	bmi.n	1a002508 <__smakebuf_r+0x18>
1a002528:	f023 0303 	bic.w	r3, r3, #3
1a00252c:	f043 0302 	orr.w	r3, r3, #2
1a002530:	81a3      	strh	r3, [r4, #12]
1a002532:	e7e3      	b.n	1a0024fc <__smakebuf_r+0xc>
1a002534:	4b0d      	ldr	r3, [pc, #52]	; (1a00256c <__smakebuf_r+0x7c>)
1a002536:	62b3      	str	r3, [r6, #40]	; 0x28
1a002538:	89a3      	ldrh	r3, [r4, #12]
1a00253a:	6020      	str	r0, [r4, #0]
1a00253c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002540:	81a3      	strh	r3, [r4, #12]
1a002542:	9b00      	ldr	r3, [sp, #0]
1a002544:	6163      	str	r3, [r4, #20]
1a002546:	9b01      	ldr	r3, [sp, #4]
1a002548:	6120      	str	r0, [r4, #16]
1a00254a:	b15b      	cbz	r3, 1a002564 <__smakebuf_r+0x74>
1a00254c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a002550:	4630      	mov	r0, r6
1a002552:	f7fe f8a1 	bl	1a000698 <_isatty_r>
1a002556:	b128      	cbz	r0, 1a002564 <__smakebuf_r+0x74>
1a002558:	89a3      	ldrh	r3, [r4, #12]
1a00255a:	f023 0303 	bic.w	r3, r3, #3
1a00255e:	f043 0301 	orr.w	r3, r3, #1
1a002562:	81a3      	strh	r3, [r4, #12]
1a002564:	89a3      	ldrh	r3, [r4, #12]
1a002566:	431d      	orrs	r5, r3
1a002568:	81a5      	strh	r5, [r4, #12]
1a00256a:	e7cd      	b.n	1a002508 <__smakebuf_r+0x18>
1a00256c:	1a002301 	.word	0x1a002301

1a002570 <__ascii_mbtowc>:
1a002570:	b082      	sub	sp, #8
1a002572:	b901      	cbnz	r1, 1a002576 <__ascii_mbtowc+0x6>
1a002574:	a901      	add	r1, sp, #4
1a002576:	b142      	cbz	r2, 1a00258a <__ascii_mbtowc+0x1a>
1a002578:	b14b      	cbz	r3, 1a00258e <__ascii_mbtowc+0x1e>
1a00257a:	7813      	ldrb	r3, [r2, #0]
1a00257c:	600b      	str	r3, [r1, #0]
1a00257e:	7812      	ldrb	r2, [r2, #0]
1a002580:	1c10      	adds	r0, r2, #0
1a002582:	bf18      	it	ne
1a002584:	2001      	movne	r0, #1
1a002586:	b002      	add	sp, #8
1a002588:	4770      	bx	lr
1a00258a:	4610      	mov	r0, r2
1a00258c:	e7fb      	b.n	1a002586 <__ascii_mbtowc+0x16>
1a00258e:	f06f 0001 	mvn.w	r0, #1
1a002592:	e7f8      	b.n	1a002586 <__ascii_mbtowc+0x16>

1a002594 <_free_r>:
1a002594:	b538      	push	{r3, r4, r5, lr}
1a002596:	4605      	mov	r5, r0
1a002598:	2900      	cmp	r1, #0
1a00259a:	d045      	beq.n	1a002628 <_free_r+0x94>
1a00259c:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a0025a0:	1f0c      	subs	r4, r1, #4
1a0025a2:	2b00      	cmp	r3, #0
1a0025a4:	bfb8      	it	lt
1a0025a6:	18e4      	addlt	r4, r4, r3
1a0025a8:	f001 f8da 	bl	1a003760 <__malloc_lock>
1a0025ac:	4a1f      	ldr	r2, [pc, #124]	; (1a00262c <_free_r+0x98>)
1a0025ae:	6813      	ldr	r3, [r2, #0]
1a0025b0:	4610      	mov	r0, r2
1a0025b2:	b933      	cbnz	r3, 1a0025c2 <_free_r+0x2e>
1a0025b4:	6063      	str	r3, [r4, #4]
1a0025b6:	6014      	str	r4, [r2, #0]
1a0025b8:	4628      	mov	r0, r5
1a0025ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a0025be:	f001 b8d0 	b.w	1a003762 <__malloc_unlock>
1a0025c2:	42a3      	cmp	r3, r4
1a0025c4:	d90c      	bls.n	1a0025e0 <_free_r+0x4c>
1a0025c6:	6821      	ldr	r1, [r4, #0]
1a0025c8:	1862      	adds	r2, r4, r1
1a0025ca:	4293      	cmp	r3, r2
1a0025cc:	bf04      	itt	eq
1a0025ce:	681a      	ldreq	r2, [r3, #0]
1a0025d0:	685b      	ldreq	r3, [r3, #4]
1a0025d2:	6063      	str	r3, [r4, #4]
1a0025d4:	bf04      	itt	eq
1a0025d6:	1852      	addeq	r2, r2, r1
1a0025d8:	6022      	streq	r2, [r4, #0]
1a0025da:	6004      	str	r4, [r0, #0]
1a0025dc:	e7ec      	b.n	1a0025b8 <_free_r+0x24>
1a0025de:	4613      	mov	r3, r2
1a0025e0:	685a      	ldr	r2, [r3, #4]
1a0025e2:	b10a      	cbz	r2, 1a0025e8 <_free_r+0x54>
1a0025e4:	42a2      	cmp	r2, r4
1a0025e6:	d9fa      	bls.n	1a0025de <_free_r+0x4a>
1a0025e8:	6819      	ldr	r1, [r3, #0]
1a0025ea:	1858      	adds	r0, r3, r1
1a0025ec:	42a0      	cmp	r0, r4
1a0025ee:	d10b      	bne.n	1a002608 <_free_r+0x74>
1a0025f0:	6820      	ldr	r0, [r4, #0]
1a0025f2:	4401      	add	r1, r0
1a0025f4:	1858      	adds	r0, r3, r1
1a0025f6:	4282      	cmp	r2, r0
1a0025f8:	6019      	str	r1, [r3, #0]
1a0025fa:	d1dd      	bne.n	1a0025b8 <_free_r+0x24>
1a0025fc:	6810      	ldr	r0, [r2, #0]
1a0025fe:	6852      	ldr	r2, [r2, #4]
1a002600:	605a      	str	r2, [r3, #4]
1a002602:	4401      	add	r1, r0
1a002604:	6019      	str	r1, [r3, #0]
1a002606:	e7d7      	b.n	1a0025b8 <_free_r+0x24>
1a002608:	d902      	bls.n	1a002610 <_free_r+0x7c>
1a00260a:	230c      	movs	r3, #12
1a00260c:	602b      	str	r3, [r5, #0]
1a00260e:	e7d3      	b.n	1a0025b8 <_free_r+0x24>
1a002610:	6820      	ldr	r0, [r4, #0]
1a002612:	1821      	adds	r1, r4, r0
1a002614:	428a      	cmp	r2, r1
1a002616:	bf04      	itt	eq
1a002618:	6811      	ldreq	r1, [r2, #0]
1a00261a:	6852      	ldreq	r2, [r2, #4]
1a00261c:	6062      	str	r2, [r4, #4]
1a00261e:	bf04      	itt	eq
1a002620:	1809      	addeq	r1, r1, r0
1a002622:	6021      	streq	r1, [r4, #0]
1a002624:	605c      	str	r4, [r3, #4]
1a002626:	e7c7      	b.n	1a0025b8 <_free_r+0x24>
1a002628:	bd38      	pop	{r3, r4, r5, pc}
1a00262a:	bf00      	nop
1a00262c:	10000238 	.word	0x10000238

1a002630 <_malloc_r>:
1a002630:	b570      	push	{r4, r5, r6, lr}
1a002632:	1ccd      	adds	r5, r1, #3
1a002634:	f025 0503 	bic.w	r5, r5, #3
1a002638:	3508      	adds	r5, #8
1a00263a:	2d0c      	cmp	r5, #12
1a00263c:	bf38      	it	cc
1a00263e:	250c      	movcc	r5, #12
1a002640:	2d00      	cmp	r5, #0
1a002642:	4606      	mov	r6, r0
1a002644:	db01      	blt.n	1a00264a <_malloc_r+0x1a>
1a002646:	42a9      	cmp	r1, r5
1a002648:	d903      	bls.n	1a002652 <_malloc_r+0x22>
1a00264a:	230c      	movs	r3, #12
1a00264c:	6033      	str	r3, [r6, #0]
1a00264e:	2000      	movs	r0, #0
1a002650:	bd70      	pop	{r4, r5, r6, pc}
1a002652:	f001 f885 	bl	1a003760 <__malloc_lock>
1a002656:	4a21      	ldr	r2, [pc, #132]	; (1a0026dc <_malloc_r+0xac>)
1a002658:	6814      	ldr	r4, [r2, #0]
1a00265a:	4621      	mov	r1, r4
1a00265c:	b991      	cbnz	r1, 1a002684 <_malloc_r+0x54>
1a00265e:	4c20      	ldr	r4, [pc, #128]	; (1a0026e0 <_malloc_r+0xb0>)
1a002660:	6823      	ldr	r3, [r4, #0]
1a002662:	b91b      	cbnz	r3, 1a00266c <_malloc_r+0x3c>
1a002664:	4630      	mov	r0, r6
1a002666:	f7fe f861 	bl	1a00072c <_sbrk_r>
1a00266a:	6020      	str	r0, [r4, #0]
1a00266c:	4629      	mov	r1, r5
1a00266e:	4630      	mov	r0, r6
1a002670:	f7fe f85c 	bl	1a00072c <_sbrk_r>
1a002674:	1c43      	adds	r3, r0, #1
1a002676:	d124      	bne.n	1a0026c2 <_malloc_r+0x92>
1a002678:	230c      	movs	r3, #12
1a00267a:	6033      	str	r3, [r6, #0]
1a00267c:	4630      	mov	r0, r6
1a00267e:	f001 f870 	bl	1a003762 <__malloc_unlock>
1a002682:	e7e4      	b.n	1a00264e <_malloc_r+0x1e>
1a002684:	680b      	ldr	r3, [r1, #0]
1a002686:	1b5b      	subs	r3, r3, r5
1a002688:	d418      	bmi.n	1a0026bc <_malloc_r+0x8c>
1a00268a:	2b0b      	cmp	r3, #11
1a00268c:	d90f      	bls.n	1a0026ae <_malloc_r+0x7e>
1a00268e:	600b      	str	r3, [r1, #0]
1a002690:	50cd      	str	r5, [r1, r3]
1a002692:	18cc      	adds	r4, r1, r3
1a002694:	4630      	mov	r0, r6
1a002696:	f001 f864 	bl	1a003762 <__malloc_unlock>
1a00269a:	f104 000b 	add.w	r0, r4, #11
1a00269e:	1d23      	adds	r3, r4, #4
1a0026a0:	f020 0007 	bic.w	r0, r0, #7
1a0026a4:	1ac3      	subs	r3, r0, r3
1a0026a6:	d0d3      	beq.n	1a002650 <_malloc_r+0x20>
1a0026a8:	425a      	negs	r2, r3
1a0026aa:	50e2      	str	r2, [r4, r3]
1a0026ac:	e7d0      	b.n	1a002650 <_malloc_r+0x20>
1a0026ae:	428c      	cmp	r4, r1
1a0026b0:	684b      	ldr	r3, [r1, #4]
1a0026b2:	bf16      	itet	ne
1a0026b4:	6063      	strne	r3, [r4, #4]
1a0026b6:	6013      	streq	r3, [r2, #0]
1a0026b8:	460c      	movne	r4, r1
1a0026ba:	e7eb      	b.n	1a002694 <_malloc_r+0x64>
1a0026bc:	460c      	mov	r4, r1
1a0026be:	6849      	ldr	r1, [r1, #4]
1a0026c0:	e7cc      	b.n	1a00265c <_malloc_r+0x2c>
1a0026c2:	1cc4      	adds	r4, r0, #3
1a0026c4:	f024 0403 	bic.w	r4, r4, #3
1a0026c8:	42a0      	cmp	r0, r4
1a0026ca:	d005      	beq.n	1a0026d8 <_malloc_r+0xa8>
1a0026cc:	1a21      	subs	r1, r4, r0
1a0026ce:	4630      	mov	r0, r6
1a0026d0:	f7fe f82c 	bl	1a00072c <_sbrk_r>
1a0026d4:	3001      	adds	r0, #1
1a0026d6:	d0cf      	beq.n	1a002678 <_malloc_r+0x48>
1a0026d8:	6025      	str	r5, [r4, #0]
1a0026da:	e7db      	b.n	1a002694 <_malloc_r+0x64>
1a0026dc:	10000238 	.word	0x10000238
1a0026e0:	1000023c 	.word	0x1000023c

1a0026e4 <__sfputc_r>:
1a0026e4:	6893      	ldr	r3, [r2, #8]
1a0026e6:	3b01      	subs	r3, #1
1a0026e8:	2b00      	cmp	r3, #0
1a0026ea:	b410      	push	{r4}
1a0026ec:	6093      	str	r3, [r2, #8]
1a0026ee:	da08      	bge.n	1a002702 <__sfputc_r+0x1e>
1a0026f0:	6994      	ldr	r4, [r2, #24]
1a0026f2:	42a3      	cmp	r3, r4
1a0026f4:	db01      	blt.n	1a0026fa <__sfputc_r+0x16>
1a0026f6:	290a      	cmp	r1, #10
1a0026f8:	d103      	bne.n	1a002702 <__sfputc_r+0x1e>
1a0026fa:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0026fe:	f7ff bc59 	b.w	1a001fb4 <__swbuf_r>
1a002702:	6813      	ldr	r3, [r2, #0]
1a002704:	1c58      	adds	r0, r3, #1
1a002706:	6010      	str	r0, [r2, #0]
1a002708:	7019      	strb	r1, [r3, #0]
1a00270a:	4608      	mov	r0, r1
1a00270c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002710:	4770      	bx	lr

1a002712 <__sfputs_r>:
1a002712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002714:	4606      	mov	r6, r0
1a002716:	460f      	mov	r7, r1
1a002718:	4614      	mov	r4, r2
1a00271a:	18d5      	adds	r5, r2, r3
1a00271c:	42ac      	cmp	r4, r5
1a00271e:	d101      	bne.n	1a002724 <__sfputs_r+0x12>
1a002720:	2000      	movs	r0, #0
1a002722:	e007      	b.n	1a002734 <__sfputs_r+0x22>
1a002724:	463a      	mov	r2, r7
1a002726:	f814 1b01 	ldrb.w	r1, [r4], #1
1a00272a:	4630      	mov	r0, r6
1a00272c:	f7ff ffda 	bl	1a0026e4 <__sfputc_r>
1a002730:	1c43      	adds	r3, r0, #1
1a002732:	d1f3      	bne.n	1a00271c <__sfputs_r+0xa>
1a002734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002736:	Address 0x000000001a002736 is out of bounds.


1a002738 <_vfiprintf_r>:
1a002738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00273c:	460c      	mov	r4, r1
1a00273e:	b09d      	sub	sp, #116	; 0x74
1a002740:	4617      	mov	r7, r2
1a002742:	461d      	mov	r5, r3
1a002744:	4606      	mov	r6, r0
1a002746:	b118      	cbz	r0, 1a002750 <_vfiprintf_r+0x18>
1a002748:	6983      	ldr	r3, [r0, #24]
1a00274a:	b90b      	cbnz	r3, 1a002750 <_vfiprintf_r+0x18>
1a00274c:	f7ff fdf4 	bl	1a002338 <__sinit>
1a002750:	4b7c      	ldr	r3, [pc, #496]	; (1a002944 <_vfiprintf_r+0x20c>)
1a002752:	429c      	cmp	r4, r3
1a002754:	d158      	bne.n	1a002808 <_vfiprintf_r+0xd0>
1a002756:	6874      	ldr	r4, [r6, #4]
1a002758:	89a3      	ldrh	r3, [r4, #12]
1a00275a:	0718      	lsls	r0, r3, #28
1a00275c:	d55e      	bpl.n	1a00281c <_vfiprintf_r+0xe4>
1a00275e:	6923      	ldr	r3, [r4, #16]
1a002760:	2b00      	cmp	r3, #0
1a002762:	d05b      	beq.n	1a00281c <_vfiprintf_r+0xe4>
1a002764:	2300      	movs	r3, #0
1a002766:	9309      	str	r3, [sp, #36]	; 0x24
1a002768:	2320      	movs	r3, #32
1a00276a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a00276e:	2330      	movs	r3, #48	; 0x30
1a002770:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a002774:	9503      	str	r5, [sp, #12]
1a002776:	f04f 0b01 	mov.w	fp, #1
1a00277a:	46b8      	mov	r8, r7
1a00277c:	4645      	mov	r5, r8
1a00277e:	f815 3b01 	ldrb.w	r3, [r5], #1
1a002782:	b10b      	cbz	r3, 1a002788 <_vfiprintf_r+0x50>
1a002784:	2b25      	cmp	r3, #37	; 0x25
1a002786:	d154      	bne.n	1a002832 <_vfiprintf_r+0xfa>
1a002788:	ebb8 0a07 	subs.w	sl, r8, r7
1a00278c:	d00b      	beq.n	1a0027a6 <_vfiprintf_r+0x6e>
1a00278e:	4653      	mov	r3, sl
1a002790:	463a      	mov	r2, r7
1a002792:	4621      	mov	r1, r4
1a002794:	4630      	mov	r0, r6
1a002796:	f7ff ffbc 	bl	1a002712 <__sfputs_r>
1a00279a:	3001      	adds	r0, #1
1a00279c:	f000 80c2 	beq.w	1a002924 <_vfiprintf_r+0x1ec>
1a0027a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0027a2:	4453      	add	r3, sl
1a0027a4:	9309      	str	r3, [sp, #36]	; 0x24
1a0027a6:	f898 3000 	ldrb.w	r3, [r8]
1a0027aa:	2b00      	cmp	r3, #0
1a0027ac:	f000 80ba 	beq.w	1a002924 <_vfiprintf_r+0x1ec>
1a0027b0:	2300      	movs	r3, #0
1a0027b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0027b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a0027ba:	9304      	str	r3, [sp, #16]
1a0027bc:	9307      	str	r3, [sp, #28]
1a0027be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a0027c2:	931a      	str	r3, [sp, #104]	; 0x68
1a0027c4:	46a8      	mov	r8, r5
1a0027c6:	2205      	movs	r2, #5
1a0027c8:	f818 1b01 	ldrb.w	r1, [r8], #1
1a0027cc:	485e      	ldr	r0, [pc, #376]	; (1a002948 <_vfiprintf_r+0x210>)
1a0027ce:	f000 ff77 	bl	1a0036c0 <memchr>
1a0027d2:	9b04      	ldr	r3, [sp, #16]
1a0027d4:	bb78      	cbnz	r0, 1a002836 <_vfiprintf_r+0xfe>
1a0027d6:	06d9      	lsls	r1, r3, #27
1a0027d8:	bf44      	itt	mi
1a0027da:	2220      	movmi	r2, #32
1a0027dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a0027e0:	071a      	lsls	r2, r3, #28
1a0027e2:	bf44      	itt	mi
1a0027e4:	222b      	movmi	r2, #43	; 0x2b
1a0027e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a0027ea:	782a      	ldrb	r2, [r5, #0]
1a0027ec:	2a2a      	cmp	r2, #42	; 0x2a
1a0027ee:	d02a      	beq.n	1a002846 <_vfiprintf_r+0x10e>
1a0027f0:	9a07      	ldr	r2, [sp, #28]
1a0027f2:	46a8      	mov	r8, r5
1a0027f4:	2000      	movs	r0, #0
1a0027f6:	250a      	movs	r5, #10
1a0027f8:	4641      	mov	r1, r8
1a0027fa:	f811 3b01 	ldrb.w	r3, [r1], #1
1a0027fe:	3b30      	subs	r3, #48	; 0x30
1a002800:	2b09      	cmp	r3, #9
1a002802:	d969      	bls.n	1a0028d8 <_vfiprintf_r+0x1a0>
1a002804:	b360      	cbz	r0, 1a002860 <_vfiprintf_r+0x128>
1a002806:	e024      	b.n	1a002852 <_vfiprintf_r+0x11a>
1a002808:	4b50      	ldr	r3, [pc, #320]	; (1a00294c <_vfiprintf_r+0x214>)
1a00280a:	429c      	cmp	r4, r3
1a00280c:	d101      	bne.n	1a002812 <_vfiprintf_r+0xda>
1a00280e:	68b4      	ldr	r4, [r6, #8]
1a002810:	e7a2      	b.n	1a002758 <_vfiprintf_r+0x20>
1a002812:	4b4f      	ldr	r3, [pc, #316]	; (1a002950 <_vfiprintf_r+0x218>)
1a002814:	429c      	cmp	r4, r3
1a002816:	bf08      	it	eq
1a002818:	68f4      	ldreq	r4, [r6, #12]
1a00281a:	e79d      	b.n	1a002758 <_vfiprintf_r+0x20>
1a00281c:	4621      	mov	r1, r4
1a00281e:	4630      	mov	r0, r6
1a002820:	f7ff fc1a 	bl	1a002058 <__swsetup_r>
1a002824:	2800      	cmp	r0, #0
1a002826:	d09d      	beq.n	1a002764 <_vfiprintf_r+0x2c>
1a002828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00282c:	b01d      	add	sp, #116	; 0x74
1a00282e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002832:	46a8      	mov	r8, r5
1a002834:	e7a2      	b.n	1a00277c <_vfiprintf_r+0x44>
1a002836:	4a44      	ldr	r2, [pc, #272]	; (1a002948 <_vfiprintf_r+0x210>)
1a002838:	1a80      	subs	r0, r0, r2
1a00283a:	fa0b f000 	lsl.w	r0, fp, r0
1a00283e:	4318      	orrs	r0, r3
1a002840:	9004      	str	r0, [sp, #16]
1a002842:	4645      	mov	r5, r8
1a002844:	e7be      	b.n	1a0027c4 <_vfiprintf_r+0x8c>
1a002846:	9a03      	ldr	r2, [sp, #12]
1a002848:	1d11      	adds	r1, r2, #4
1a00284a:	6812      	ldr	r2, [r2, #0]
1a00284c:	9103      	str	r1, [sp, #12]
1a00284e:	2a00      	cmp	r2, #0
1a002850:	db01      	blt.n	1a002856 <_vfiprintf_r+0x11e>
1a002852:	9207      	str	r2, [sp, #28]
1a002854:	e004      	b.n	1a002860 <_vfiprintf_r+0x128>
1a002856:	4252      	negs	r2, r2
1a002858:	f043 0302 	orr.w	r3, r3, #2
1a00285c:	9207      	str	r2, [sp, #28]
1a00285e:	9304      	str	r3, [sp, #16]
1a002860:	f898 3000 	ldrb.w	r3, [r8]
1a002864:	2b2e      	cmp	r3, #46	; 0x2e
1a002866:	d10e      	bne.n	1a002886 <_vfiprintf_r+0x14e>
1a002868:	f898 3001 	ldrb.w	r3, [r8, #1]
1a00286c:	2b2a      	cmp	r3, #42	; 0x2a
1a00286e:	d138      	bne.n	1a0028e2 <_vfiprintf_r+0x1aa>
1a002870:	9b03      	ldr	r3, [sp, #12]
1a002872:	1d1a      	adds	r2, r3, #4
1a002874:	681b      	ldr	r3, [r3, #0]
1a002876:	9203      	str	r2, [sp, #12]
1a002878:	2b00      	cmp	r3, #0
1a00287a:	bfb8      	it	lt
1a00287c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a002880:	f108 0802 	add.w	r8, r8, #2
1a002884:	9305      	str	r3, [sp, #20]
1a002886:	4d33      	ldr	r5, [pc, #204]	; (1a002954 <_vfiprintf_r+0x21c>)
1a002888:	f898 1000 	ldrb.w	r1, [r8]
1a00288c:	2203      	movs	r2, #3
1a00288e:	4628      	mov	r0, r5
1a002890:	f000 ff16 	bl	1a0036c0 <memchr>
1a002894:	b140      	cbz	r0, 1a0028a8 <_vfiprintf_r+0x170>
1a002896:	2340      	movs	r3, #64	; 0x40
1a002898:	1b40      	subs	r0, r0, r5
1a00289a:	fa03 f000 	lsl.w	r0, r3, r0
1a00289e:	9b04      	ldr	r3, [sp, #16]
1a0028a0:	4303      	orrs	r3, r0
1a0028a2:	f108 0801 	add.w	r8, r8, #1
1a0028a6:	9304      	str	r3, [sp, #16]
1a0028a8:	f898 1000 	ldrb.w	r1, [r8]
1a0028ac:	482a      	ldr	r0, [pc, #168]	; (1a002958 <_vfiprintf_r+0x220>)
1a0028ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a0028b2:	2206      	movs	r2, #6
1a0028b4:	f108 0701 	add.w	r7, r8, #1
1a0028b8:	f000 ff02 	bl	1a0036c0 <memchr>
1a0028bc:	2800      	cmp	r0, #0
1a0028be:	d037      	beq.n	1a002930 <_vfiprintf_r+0x1f8>
1a0028c0:	4b26      	ldr	r3, [pc, #152]	; (1a00295c <_vfiprintf_r+0x224>)
1a0028c2:	bb1b      	cbnz	r3, 1a00290c <_vfiprintf_r+0x1d4>
1a0028c4:	9b03      	ldr	r3, [sp, #12]
1a0028c6:	3307      	adds	r3, #7
1a0028c8:	f023 0307 	bic.w	r3, r3, #7
1a0028cc:	3308      	adds	r3, #8
1a0028ce:	9303      	str	r3, [sp, #12]
1a0028d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0028d2:	444b      	add	r3, r9
1a0028d4:	9309      	str	r3, [sp, #36]	; 0x24
1a0028d6:	e750      	b.n	1a00277a <_vfiprintf_r+0x42>
1a0028d8:	fb05 3202 	mla	r2, r5, r2, r3
1a0028dc:	2001      	movs	r0, #1
1a0028de:	4688      	mov	r8, r1
1a0028e0:	e78a      	b.n	1a0027f8 <_vfiprintf_r+0xc0>
1a0028e2:	2300      	movs	r3, #0
1a0028e4:	f108 0801 	add.w	r8, r8, #1
1a0028e8:	9305      	str	r3, [sp, #20]
1a0028ea:	4619      	mov	r1, r3
1a0028ec:	250a      	movs	r5, #10
1a0028ee:	4640      	mov	r0, r8
1a0028f0:	f810 2b01 	ldrb.w	r2, [r0], #1
1a0028f4:	3a30      	subs	r2, #48	; 0x30
1a0028f6:	2a09      	cmp	r2, #9
1a0028f8:	d903      	bls.n	1a002902 <_vfiprintf_r+0x1ca>
1a0028fa:	2b00      	cmp	r3, #0
1a0028fc:	d0c3      	beq.n	1a002886 <_vfiprintf_r+0x14e>
1a0028fe:	9105      	str	r1, [sp, #20]
1a002900:	e7c1      	b.n	1a002886 <_vfiprintf_r+0x14e>
1a002902:	fb05 2101 	mla	r1, r5, r1, r2
1a002906:	2301      	movs	r3, #1
1a002908:	4680      	mov	r8, r0
1a00290a:	e7f0      	b.n	1a0028ee <_vfiprintf_r+0x1b6>
1a00290c:	ab03      	add	r3, sp, #12
1a00290e:	9300      	str	r3, [sp, #0]
1a002910:	4622      	mov	r2, r4
1a002912:	4b13      	ldr	r3, [pc, #76]	; (1a002960 <_vfiprintf_r+0x228>)
1a002914:	a904      	add	r1, sp, #16
1a002916:	4630      	mov	r0, r6
1a002918:	f3af 8000 	nop.w
1a00291c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a002920:	4681      	mov	r9, r0
1a002922:	d1d5      	bne.n	1a0028d0 <_vfiprintf_r+0x198>
1a002924:	89a3      	ldrh	r3, [r4, #12]
1a002926:	065b      	lsls	r3, r3, #25
1a002928:	f53f af7e 	bmi.w	1a002828 <_vfiprintf_r+0xf0>
1a00292c:	9809      	ldr	r0, [sp, #36]	; 0x24
1a00292e:	e77d      	b.n	1a00282c <_vfiprintf_r+0xf4>
1a002930:	ab03      	add	r3, sp, #12
1a002932:	9300      	str	r3, [sp, #0]
1a002934:	4622      	mov	r2, r4
1a002936:	4b0a      	ldr	r3, [pc, #40]	; (1a002960 <_vfiprintf_r+0x228>)
1a002938:	a904      	add	r1, sp, #16
1a00293a:	4630      	mov	r0, r6
1a00293c:	f000 f888 	bl	1a002a50 <_printf_i>
1a002940:	e7ec      	b.n	1a00291c <_vfiprintf_r+0x1e4>
1a002942:	bf00      	nop
1a002944:	1a003b6c 	.word	0x1a003b6c
1a002948:	1a003bba 	.word	0x1a003bba
1a00294c:	1a003b8c 	.word	0x1a003b8c
1a002950:	1a003b4c 	.word	0x1a003b4c
1a002954:	1a003bc0 	.word	0x1a003bc0
1a002958:	1a003bc4 	.word	0x1a003bc4
1a00295c:	00000000 	.word	0x00000000
1a002960:	1a002713 	.word	0x1a002713

1a002964 <_printf_common>:
1a002964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a002968:	4691      	mov	r9, r2
1a00296a:	461f      	mov	r7, r3
1a00296c:	688a      	ldr	r2, [r1, #8]
1a00296e:	690b      	ldr	r3, [r1, #16]
1a002970:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a002974:	4293      	cmp	r3, r2
1a002976:	bfb8      	it	lt
1a002978:	4613      	movlt	r3, r2
1a00297a:	f8c9 3000 	str.w	r3, [r9]
1a00297e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a002982:	4606      	mov	r6, r0
1a002984:	460c      	mov	r4, r1
1a002986:	b112      	cbz	r2, 1a00298e <_printf_common+0x2a>
1a002988:	3301      	adds	r3, #1
1a00298a:	f8c9 3000 	str.w	r3, [r9]
1a00298e:	6823      	ldr	r3, [r4, #0]
1a002990:	0699      	lsls	r1, r3, #26
1a002992:	bf42      	ittt	mi
1a002994:	f8d9 3000 	ldrmi.w	r3, [r9]
1a002998:	3302      	addmi	r3, #2
1a00299a:	f8c9 3000 	strmi.w	r3, [r9]
1a00299e:	6825      	ldr	r5, [r4, #0]
1a0029a0:	f015 0506 	ands.w	r5, r5, #6
1a0029a4:	d107      	bne.n	1a0029b6 <_printf_common+0x52>
1a0029a6:	f104 0a19 	add.w	sl, r4, #25
1a0029aa:	68e3      	ldr	r3, [r4, #12]
1a0029ac:	f8d9 2000 	ldr.w	r2, [r9]
1a0029b0:	1a9b      	subs	r3, r3, r2
1a0029b2:	42ab      	cmp	r3, r5
1a0029b4:	dc28      	bgt.n	1a002a08 <_printf_common+0xa4>
1a0029b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a0029ba:	6822      	ldr	r2, [r4, #0]
1a0029bc:	3300      	adds	r3, #0
1a0029be:	bf18      	it	ne
1a0029c0:	2301      	movne	r3, #1
1a0029c2:	0692      	lsls	r2, r2, #26
1a0029c4:	d42d      	bmi.n	1a002a22 <_printf_common+0xbe>
1a0029c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a0029ca:	4639      	mov	r1, r7
1a0029cc:	4630      	mov	r0, r6
1a0029ce:	47c0      	blx	r8
1a0029d0:	3001      	adds	r0, #1
1a0029d2:	d020      	beq.n	1a002a16 <_printf_common+0xb2>
1a0029d4:	6823      	ldr	r3, [r4, #0]
1a0029d6:	68e5      	ldr	r5, [r4, #12]
1a0029d8:	f8d9 2000 	ldr.w	r2, [r9]
1a0029dc:	f003 0306 	and.w	r3, r3, #6
1a0029e0:	2b04      	cmp	r3, #4
1a0029e2:	bf08      	it	eq
1a0029e4:	1aad      	subeq	r5, r5, r2
1a0029e6:	68a3      	ldr	r3, [r4, #8]
1a0029e8:	6922      	ldr	r2, [r4, #16]
1a0029ea:	bf0c      	ite	eq
1a0029ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a0029f0:	2500      	movne	r5, #0
1a0029f2:	4293      	cmp	r3, r2
1a0029f4:	bfc4      	itt	gt
1a0029f6:	1a9b      	subgt	r3, r3, r2
1a0029f8:	18ed      	addgt	r5, r5, r3
1a0029fa:	f04f 0900 	mov.w	r9, #0
1a0029fe:	341a      	adds	r4, #26
1a002a00:	454d      	cmp	r5, r9
1a002a02:	d11a      	bne.n	1a002a3a <_printf_common+0xd6>
1a002a04:	2000      	movs	r0, #0
1a002a06:	e008      	b.n	1a002a1a <_printf_common+0xb6>
1a002a08:	2301      	movs	r3, #1
1a002a0a:	4652      	mov	r2, sl
1a002a0c:	4639      	mov	r1, r7
1a002a0e:	4630      	mov	r0, r6
1a002a10:	47c0      	blx	r8
1a002a12:	3001      	adds	r0, #1
1a002a14:	d103      	bne.n	1a002a1e <_printf_common+0xba>
1a002a16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002a1e:	3501      	adds	r5, #1
1a002a20:	e7c3      	b.n	1a0029aa <_printf_common+0x46>
1a002a22:	18e1      	adds	r1, r4, r3
1a002a24:	1c5a      	adds	r2, r3, #1
1a002a26:	2030      	movs	r0, #48	; 0x30
1a002a28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a002a2c:	4422      	add	r2, r4
1a002a2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a002a32:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a002a36:	3302      	adds	r3, #2
1a002a38:	e7c5      	b.n	1a0029c6 <_printf_common+0x62>
1a002a3a:	2301      	movs	r3, #1
1a002a3c:	4622      	mov	r2, r4
1a002a3e:	4639      	mov	r1, r7
1a002a40:	4630      	mov	r0, r6
1a002a42:	47c0      	blx	r8
1a002a44:	3001      	adds	r0, #1
1a002a46:	d0e6      	beq.n	1a002a16 <_printf_common+0xb2>
1a002a48:	f109 0901 	add.w	r9, r9, #1
1a002a4c:	e7d8      	b.n	1a002a00 <_printf_common+0x9c>
1a002a4e:	Address 0x000000001a002a4e is out of bounds.


1a002a50 <_printf_i>:
1a002a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a002a54:	f101 0c43 	add.w	ip, r1, #67	; 0x43
1a002a58:	460c      	mov	r4, r1
1a002a5a:	7e09      	ldrb	r1, [r1, #24]
1a002a5c:	b085      	sub	sp, #20
1a002a5e:	296e      	cmp	r1, #110	; 0x6e
1a002a60:	4617      	mov	r7, r2
1a002a62:	4606      	mov	r6, r0
1a002a64:	4698      	mov	r8, r3
1a002a66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a002a68:	f000 80b3 	beq.w	1a002bd2 <_printf_i+0x182>
1a002a6c:	d822      	bhi.n	1a002ab4 <_printf_i+0x64>
1a002a6e:	2963      	cmp	r1, #99	; 0x63
1a002a70:	d036      	beq.n	1a002ae0 <_printf_i+0x90>
1a002a72:	d80a      	bhi.n	1a002a8a <_printf_i+0x3a>
1a002a74:	2900      	cmp	r1, #0
1a002a76:	f000 80b9 	beq.w	1a002bec <_printf_i+0x19c>
1a002a7a:	2958      	cmp	r1, #88	; 0x58
1a002a7c:	f000 8083 	beq.w	1a002b86 <_printf_i+0x136>
1a002a80:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a002a84:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a002a88:	e032      	b.n	1a002af0 <_printf_i+0xa0>
1a002a8a:	2964      	cmp	r1, #100	; 0x64
1a002a8c:	d001      	beq.n	1a002a92 <_printf_i+0x42>
1a002a8e:	2969      	cmp	r1, #105	; 0x69
1a002a90:	d1f6      	bne.n	1a002a80 <_printf_i+0x30>
1a002a92:	6820      	ldr	r0, [r4, #0]
1a002a94:	6813      	ldr	r3, [r2, #0]
1a002a96:	0605      	lsls	r5, r0, #24
1a002a98:	f103 0104 	add.w	r1, r3, #4
1a002a9c:	d52a      	bpl.n	1a002af4 <_printf_i+0xa4>
1a002a9e:	681b      	ldr	r3, [r3, #0]
1a002aa0:	6011      	str	r1, [r2, #0]
1a002aa2:	2b00      	cmp	r3, #0
1a002aa4:	da03      	bge.n	1a002aae <_printf_i+0x5e>
1a002aa6:	222d      	movs	r2, #45	; 0x2d
1a002aa8:	425b      	negs	r3, r3
1a002aaa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
1a002aae:	486f      	ldr	r0, [pc, #444]	; (1a002c6c <_printf_i+0x21c>)
1a002ab0:	220a      	movs	r2, #10
1a002ab2:	e039      	b.n	1a002b28 <_printf_i+0xd8>
1a002ab4:	2973      	cmp	r1, #115	; 0x73
1a002ab6:	f000 809d 	beq.w	1a002bf4 <_printf_i+0x1a4>
1a002aba:	d808      	bhi.n	1a002ace <_printf_i+0x7e>
1a002abc:	296f      	cmp	r1, #111	; 0x6f
1a002abe:	d020      	beq.n	1a002b02 <_printf_i+0xb2>
1a002ac0:	2970      	cmp	r1, #112	; 0x70
1a002ac2:	d1dd      	bne.n	1a002a80 <_printf_i+0x30>
1a002ac4:	6823      	ldr	r3, [r4, #0]
1a002ac6:	f043 0320 	orr.w	r3, r3, #32
1a002aca:	6023      	str	r3, [r4, #0]
1a002acc:	e003      	b.n	1a002ad6 <_printf_i+0x86>
1a002ace:	2975      	cmp	r1, #117	; 0x75
1a002ad0:	d017      	beq.n	1a002b02 <_printf_i+0xb2>
1a002ad2:	2978      	cmp	r1, #120	; 0x78
1a002ad4:	d1d4      	bne.n	1a002a80 <_printf_i+0x30>
1a002ad6:	2378      	movs	r3, #120	; 0x78
1a002ad8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a002adc:	4864      	ldr	r0, [pc, #400]	; (1a002c70 <_printf_i+0x220>)
1a002ade:	e055      	b.n	1a002b8c <_printf_i+0x13c>
1a002ae0:	6813      	ldr	r3, [r2, #0]
1a002ae2:	1d19      	adds	r1, r3, #4
1a002ae4:	681b      	ldr	r3, [r3, #0]
1a002ae6:	6011      	str	r1, [r2, #0]
1a002ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a002aec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a002af0:	2301      	movs	r3, #1
1a002af2:	e08c      	b.n	1a002c0e <_printf_i+0x1be>
1a002af4:	681b      	ldr	r3, [r3, #0]
1a002af6:	6011      	str	r1, [r2, #0]
1a002af8:	f010 0f40 	tst.w	r0, #64	; 0x40
1a002afc:	bf18      	it	ne
1a002afe:	b21b      	sxthne	r3, r3
1a002b00:	e7cf      	b.n	1a002aa2 <_printf_i+0x52>
1a002b02:	6813      	ldr	r3, [r2, #0]
1a002b04:	6825      	ldr	r5, [r4, #0]
1a002b06:	1d18      	adds	r0, r3, #4
1a002b08:	6010      	str	r0, [r2, #0]
1a002b0a:	0628      	lsls	r0, r5, #24
1a002b0c:	d501      	bpl.n	1a002b12 <_printf_i+0xc2>
1a002b0e:	681b      	ldr	r3, [r3, #0]
1a002b10:	e002      	b.n	1a002b18 <_printf_i+0xc8>
1a002b12:	0668      	lsls	r0, r5, #25
1a002b14:	d5fb      	bpl.n	1a002b0e <_printf_i+0xbe>
1a002b16:	881b      	ldrh	r3, [r3, #0]
1a002b18:	4854      	ldr	r0, [pc, #336]	; (1a002c6c <_printf_i+0x21c>)
1a002b1a:	296f      	cmp	r1, #111	; 0x6f
1a002b1c:	bf14      	ite	ne
1a002b1e:	220a      	movne	r2, #10
1a002b20:	2208      	moveq	r2, #8
1a002b22:	2100      	movs	r1, #0
1a002b24:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a002b28:	6865      	ldr	r5, [r4, #4]
1a002b2a:	60a5      	str	r5, [r4, #8]
1a002b2c:	2d00      	cmp	r5, #0
1a002b2e:	f2c0 8095 	blt.w	1a002c5c <_printf_i+0x20c>
1a002b32:	6821      	ldr	r1, [r4, #0]
1a002b34:	f021 0104 	bic.w	r1, r1, #4
1a002b38:	6021      	str	r1, [r4, #0]
1a002b3a:	2b00      	cmp	r3, #0
1a002b3c:	d13d      	bne.n	1a002bba <_printf_i+0x16a>
1a002b3e:	2d00      	cmp	r5, #0
1a002b40:	f040 808e 	bne.w	1a002c60 <_printf_i+0x210>
1a002b44:	4665      	mov	r5, ip
1a002b46:	2a08      	cmp	r2, #8
1a002b48:	d10b      	bne.n	1a002b62 <_printf_i+0x112>
1a002b4a:	6823      	ldr	r3, [r4, #0]
1a002b4c:	07db      	lsls	r3, r3, #31
1a002b4e:	d508      	bpl.n	1a002b62 <_printf_i+0x112>
1a002b50:	6923      	ldr	r3, [r4, #16]
1a002b52:	6862      	ldr	r2, [r4, #4]
1a002b54:	429a      	cmp	r2, r3
1a002b56:	bfde      	ittt	le
1a002b58:	2330      	movle	r3, #48	; 0x30
1a002b5a:	f805 3c01 	strble.w	r3, [r5, #-1]
1a002b5e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a002b62:	ebac 0305 	sub.w	r3, ip, r5
1a002b66:	6123      	str	r3, [r4, #16]
1a002b68:	f8cd 8000 	str.w	r8, [sp]
1a002b6c:	463b      	mov	r3, r7
1a002b6e:	aa03      	add	r2, sp, #12
1a002b70:	4621      	mov	r1, r4
1a002b72:	4630      	mov	r0, r6
1a002b74:	f7ff fef6 	bl	1a002964 <_printf_common>
1a002b78:	3001      	adds	r0, #1
1a002b7a:	d14d      	bne.n	1a002c18 <_printf_i+0x1c8>
1a002b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002b80:	b005      	add	sp, #20
1a002b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a002b86:	4839      	ldr	r0, [pc, #228]	; (1a002c6c <_printf_i+0x21c>)
1a002b88:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a002b8c:	6813      	ldr	r3, [r2, #0]
1a002b8e:	6821      	ldr	r1, [r4, #0]
1a002b90:	1d1d      	adds	r5, r3, #4
1a002b92:	681b      	ldr	r3, [r3, #0]
1a002b94:	6015      	str	r5, [r2, #0]
1a002b96:	060a      	lsls	r2, r1, #24
1a002b98:	d50b      	bpl.n	1a002bb2 <_printf_i+0x162>
1a002b9a:	07ca      	lsls	r2, r1, #31
1a002b9c:	bf44      	itt	mi
1a002b9e:	f041 0120 	orrmi.w	r1, r1, #32
1a002ba2:	6021      	strmi	r1, [r4, #0]
1a002ba4:	b91b      	cbnz	r3, 1a002bae <_printf_i+0x15e>
1a002ba6:	6822      	ldr	r2, [r4, #0]
1a002ba8:	f022 0220 	bic.w	r2, r2, #32
1a002bac:	6022      	str	r2, [r4, #0]
1a002bae:	2210      	movs	r2, #16
1a002bb0:	e7b7      	b.n	1a002b22 <_printf_i+0xd2>
1a002bb2:	064d      	lsls	r5, r1, #25
1a002bb4:	bf48      	it	mi
1a002bb6:	b29b      	uxthmi	r3, r3
1a002bb8:	e7ef      	b.n	1a002b9a <_printf_i+0x14a>
1a002bba:	4665      	mov	r5, ip
1a002bbc:	fbb3 f1f2 	udiv	r1, r3, r2
1a002bc0:	fb02 3311 	mls	r3, r2, r1, r3
1a002bc4:	5cc3      	ldrb	r3, [r0, r3]
1a002bc6:	f805 3d01 	strb.w	r3, [r5, #-1]!
1a002bca:	460b      	mov	r3, r1
1a002bcc:	2900      	cmp	r1, #0
1a002bce:	d1f5      	bne.n	1a002bbc <_printf_i+0x16c>
1a002bd0:	e7b9      	b.n	1a002b46 <_printf_i+0xf6>
1a002bd2:	6813      	ldr	r3, [r2, #0]
1a002bd4:	6825      	ldr	r5, [r4, #0]
1a002bd6:	6961      	ldr	r1, [r4, #20]
1a002bd8:	1d18      	adds	r0, r3, #4
1a002bda:	6010      	str	r0, [r2, #0]
1a002bdc:	0628      	lsls	r0, r5, #24
1a002bde:	681b      	ldr	r3, [r3, #0]
1a002be0:	d501      	bpl.n	1a002be6 <_printf_i+0x196>
1a002be2:	6019      	str	r1, [r3, #0]
1a002be4:	e002      	b.n	1a002bec <_printf_i+0x19c>
1a002be6:	066a      	lsls	r2, r5, #25
1a002be8:	d5fb      	bpl.n	1a002be2 <_printf_i+0x192>
1a002bea:	8019      	strh	r1, [r3, #0]
1a002bec:	2300      	movs	r3, #0
1a002bee:	6123      	str	r3, [r4, #16]
1a002bf0:	4665      	mov	r5, ip
1a002bf2:	e7b9      	b.n	1a002b68 <_printf_i+0x118>
1a002bf4:	6813      	ldr	r3, [r2, #0]
1a002bf6:	1d19      	adds	r1, r3, #4
1a002bf8:	6011      	str	r1, [r2, #0]
1a002bfa:	681d      	ldr	r5, [r3, #0]
1a002bfc:	6862      	ldr	r2, [r4, #4]
1a002bfe:	2100      	movs	r1, #0
1a002c00:	4628      	mov	r0, r5
1a002c02:	f000 fd5d 	bl	1a0036c0 <memchr>
1a002c06:	b108      	cbz	r0, 1a002c0c <_printf_i+0x1bc>
1a002c08:	1b40      	subs	r0, r0, r5
1a002c0a:	6060      	str	r0, [r4, #4]
1a002c0c:	6863      	ldr	r3, [r4, #4]
1a002c0e:	6123      	str	r3, [r4, #16]
1a002c10:	2300      	movs	r3, #0
1a002c12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a002c16:	e7a7      	b.n	1a002b68 <_printf_i+0x118>
1a002c18:	6923      	ldr	r3, [r4, #16]
1a002c1a:	462a      	mov	r2, r5
1a002c1c:	4639      	mov	r1, r7
1a002c1e:	4630      	mov	r0, r6
1a002c20:	47c0      	blx	r8
1a002c22:	3001      	adds	r0, #1
1a002c24:	d0aa      	beq.n	1a002b7c <_printf_i+0x12c>
1a002c26:	6823      	ldr	r3, [r4, #0]
1a002c28:	079b      	lsls	r3, r3, #30
1a002c2a:	d413      	bmi.n	1a002c54 <_printf_i+0x204>
1a002c2c:	68e0      	ldr	r0, [r4, #12]
1a002c2e:	9b03      	ldr	r3, [sp, #12]
1a002c30:	4298      	cmp	r0, r3
1a002c32:	bfb8      	it	lt
1a002c34:	4618      	movlt	r0, r3
1a002c36:	e7a3      	b.n	1a002b80 <_printf_i+0x130>
1a002c38:	2301      	movs	r3, #1
1a002c3a:	464a      	mov	r2, r9
1a002c3c:	4639      	mov	r1, r7
1a002c3e:	4630      	mov	r0, r6
1a002c40:	47c0      	blx	r8
1a002c42:	3001      	adds	r0, #1
1a002c44:	d09a      	beq.n	1a002b7c <_printf_i+0x12c>
1a002c46:	3501      	adds	r5, #1
1a002c48:	68e3      	ldr	r3, [r4, #12]
1a002c4a:	9a03      	ldr	r2, [sp, #12]
1a002c4c:	1a9b      	subs	r3, r3, r2
1a002c4e:	42ab      	cmp	r3, r5
1a002c50:	dcf2      	bgt.n	1a002c38 <_printf_i+0x1e8>
1a002c52:	e7eb      	b.n	1a002c2c <_printf_i+0x1dc>
1a002c54:	2500      	movs	r5, #0
1a002c56:	f104 0919 	add.w	r9, r4, #25
1a002c5a:	e7f5      	b.n	1a002c48 <_printf_i+0x1f8>
1a002c5c:	2b00      	cmp	r3, #0
1a002c5e:	d1ac      	bne.n	1a002bba <_printf_i+0x16a>
1a002c60:	7803      	ldrb	r3, [r0, #0]
1a002c62:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a002c66:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a002c6a:	e76c      	b.n	1a002b46 <_printf_i+0xf6>
1a002c6c:	1a003bcb 	.word	0x1a003bcb
1a002c70:	1a003bdc 	.word	0x1a003bdc

1a002c74 <__svfiscanf_r>:
1a002c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002c78:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
1a002c7c:	460c      	mov	r4, r1
1a002c7e:	2100      	movs	r1, #0
1a002c80:	9144      	str	r1, [sp, #272]	; 0x110
1a002c82:	9145      	str	r1, [sp, #276]	; 0x114
1a002c84:	499f      	ldr	r1, [pc, #636]	; (1a002f04 <__svfiscanf_r+0x290>)
1a002c86:	91a0      	str	r1, [sp, #640]	; 0x280
1a002c88:	f10d 0804 	add.w	r8, sp, #4
1a002c8c:	499e      	ldr	r1, [pc, #632]	; (1a002f08 <__svfiscanf_r+0x294>)
1a002c8e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 1a002f0c <__svfiscanf_r+0x298>
1a002c92:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
1a002c96:	4606      	mov	r6, r0
1a002c98:	4692      	mov	sl, r2
1a002c9a:	91a1      	str	r1, [sp, #644]	; 0x284
1a002c9c:	9300      	str	r3, [sp, #0]
1a002c9e:	270a      	movs	r7, #10
1a002ca0:	f89a 3000 	ldrb.w	r3, [sl]
1a002ca4:	2b00      	cmp	r3, #0
1a002ca6:	f000 812a 	beq.w	1a002efe <__svfiscanf_r+0x28a>
1a002caa:	4655      	mov	r5, sl
1a002cac:	f7ff fbee 	bl	1a00248c <__locale_ctype_ptr>
1a002cb0:	f815 bb01 	ldrb.w	fp, [r5], #1
1a002cb4:	4458      	add	r0, fp
1a002cb6:	7843      	ldrb	r3, [r0, #1]
1a002cb8:	f013 0308 	ands.w	r3, r3, #8
1a002cbc:	d01c      	beq.n	1a002cf8 <__svfiscanf_r+0x84>
1a002cbe:	6863      	ldr	r3, [r4, #4]
1a002cc0:	2b00      	cmp	r3, #0
1a002cc2:	dd12      	ble.n	1a002cea <__svfiscanf_r+0x76>
1a002cc4:	f7ff fbe2 	bl	1a00248c <__locale_ctype_ptr>
1a002cc8:	6823      	ldr	r3, [r4, #0]
1a002cca:	781a      	ldrb	r2, [r3, #0]
1a002ccc:	4410      	add	r0, r2
1a002cce:	7842      	ldrb	r2, [r0, #1]
1a002cd0:	0712      	lsls	r2, r2, #28
1a002cd2:	d401      	bmi.n	1a002cd8 <__svfiscanf_r+0x64>
1a002cd4:	46aa      	mov	sl, r5
1a002cd6:	e7e3      	b.n	1a002ca0 <__svfiscanf_r+0x2c>
1a002cd8:	9a45      	ldr	r2, [sp, #276]	; 0x114
1a002cda:	3201      	adds	r2, #1
1a002cdc:	9245      	str	r2, [sp, #276]	; 0x114
1a002cde:	6862      	ldr	r2, [r4, #4]
1a002ce0:	3301      	adds	r3, #1
1a002ce2:	3a01      	subs	r2, #1
1a002ce4:	6062      	str	r2, [r4, #4]
1a002ce6:	6023      	str	r3, [r4, #0]
1a002ce8:	e7e9      	b.n	1a002cbe <__svfiscanf_r+0x4a>
1a002cea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
1a002cec:	4621      	mov	r1, r4
1a002cee:	4630      	mov	r0, r6
1a002cf0:	4798      	blx	r3
1a002cf2:	2800      	cmp	r0, #0
1a002cf4:	d0e6      	beq.n	1a002cc4 <__svfiscanf_r+0x50>
1a002cf6:	e7ed      	b.n	1a002cd4 <__svfiscanf_r+0x60>
1a002cf8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
1a002cfc:	f040 8082 	bne.w	1a002e04 <__svfiscanf_r+0x190>
1a002d00:	9343      	str	r3, [sp, #268]	; 0x10c
1a002d02:	9341      	str	r3, [sp, #260]	; 0x104
1a002d04:	f89a 3001 	ldrb.w	r3, [sl, #1]
1a002d08:	2b2a      	cmp	r3, #42	; 0x2a
1a002d0a:	d103      	bne.n	1a002d14 <__svfiscanf_r+0xa0>
1a002d0c:	2310      	movs	r3, #16
1a002d0e:	9341      	str	r3, [sp, #260]	; 0x104
1a002d10:	f10a 0502 	add.w	r5, sl, #2
1a002d14:	46aa      	mov	sl, r5
1a002d16:	f815 1b01 	ldrb.w	r1, [r5], #1
1a002d1a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
1a002d1e:	2a09      	cmp	r2, #9
1a002d20:	d922      	bls.n	1a002d68 <__svfiscanf_r+0xf4>
1a002d22:	2203      	movs	r2, #3
1a002d24:	4879      	ldr	r0, [pc, #484]	; (1a002f0c <__svfiscanf_r+0x298>)
1a002d26:	f000 fccb 	bl	1a0036c0 <memchr>
1a002d2a:	b138      	cbz	r0, 1a002d3c <__svfiscanf_r+0xc8>
1a002d2c:	eba0 0309 	sub.w	r3, r0, r9
1a002d30:	2001      	movs	r0, #1
1a002d32:	4098      	lsls	r0, r3
1a002d34:	9b41      	ldr	r3, [sp, #260]	; 0x104
1a002d36:	4318      	orrs	r0, r3
1a002d38:	9041      	str	r0, [sp, #260]	; 0x104
1a002d3a:	46aa      	mov	sl, r5
1a002d3c:	f89a 3000 	ldrb.w	r3, [sl]
1a002d40:	2b67      	cmp	r3, #103	; 0x67
1a002d42:	f10a 0501 	add.w	r5, sl, #1
1a002d46:	d82b      	bhi.n	1a002da0 <__svfiscanf_r+0x12c>
1a002d48:	2b65      	cmp	r3, #101	; 0x65
1a002d4a:	f080 809f 	bcs.w	1a002e8c <__svfiscanf_r+0x218>
1a002d4e:	2b47      	cmp	r3, #71	; 0x47
1a002d50:	d810      	bhi.n	1a002d74 <__svfiscanf_r+0x100>
1a002d52:	2b45      	cmp	r3, #69	; 0x45
1a002d54:	f080 809a 	bcs.w	1a002e8c <__svfiscanf_r+0x218>
1a002d58:	2b00      	cmp	r3, #0
1a002d5a:	d06c      	beq.n	1a002e36 <__svfiscanf_r+0x1c2>
1a002d5c:	2b25      	cmp	r3, #37	; 0x25
1a002d5e:	d051      	beq.n	1a002e04 <__svfiscanf_r+0x190>
1a002d60:	2303      	movs	r3, #3
1a002d62:	9347      	str	r3, [sp, #284]	; 0x11c
1a002d64:	9742      	str	r7, [sp, #264]	; 0x108
1a002d66:	e027      	b.n	1a002db8 <__svfiscanf_r+0x144>
1a002d68:	9b43      	ldr	r3, [sp, #268]	; 0x10c
1a002d6a:	fb07 1303 	mla	r3, r7, r3, r1
1a002d6e:	3b30      	subs	r3, #48	; 0x30
1a002d70:	9343      	str	r3, [sp, #268]	; 0x10c
1a002d72:	e7cf      	b.n	1a002d14 <__svfiscanf_r+0xa0>
1a002d74:	2b5b      	cmp	r3, #91	; 0x5b
1a002d76:	d06a      	beq.n	1a002e4e <__svfiscanf_r+0x1da>
1a002d78:	d80c      	bhi.n	1a002d94 <__svfiscanf_r+0x120>
1a002d7a:	2b58      	cmp	r3, #88	; 0x58
1a002d7c:	d1f0      	bne.n	1a002d60 <__svfiscanf_r+0xec>
1a002d7e:	9a41      	ldr	r2, [sp, #260]	; 0x104
1a002d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
1a002d84:	9241      	str	r2, [sp, #260]	; 0x104
1a002d86:	2210      	movs	r2, #16
1a002d88:	9242      	str	r2, [sp, #264]	; 0x108
1a002d8a:	2b6e      	cmp	r3, #110	; 0x6e
1a002d8c:	bf8c      	ite	hi
1a002d8e:	2304      	movhi	r3, #4
1a002d90:	2303      	movls	r3, #3
1a002d92:	e010      	b.n	1a002db6 <__svfiscanf_r+0x142>
1a002d94:	2b63      	cmp	r3, #99	; 0x63
1a002d96:	d065      	beq.n	1a002e64 <__svfiscanf_r+0x1f0>
1a002d98:	2b64      	cmp	r3, #100	; 0x64
1a002d9a:	d1e1      	bne.n	1a002d60 <__svfiscanf_r+0xec>
1a002d9c:	9742      	str	r7, [sp, #264]	; 0x108
1a002d9e:	e7f4      	b.n	1a002d8a <__svfiscanf_r+0x116>
1a002da0:	2b70      	cmp	r3, #112	; 0x70
1a002da2:	d04b      	beq.n	1a002e3c <__svfiscanf_r+0x1c8>
1a002da4:	d826      	bhi.n	1a002df4 <__svfiscanf_r+0x180>
1a002da6:	2b6e      	cmp	r3, #110	; 0x6e
1a002da8:	d062      	beq.n	1a002e70 <__svfiscanf_r+0x1fc>
1a002daa:	d84c      	bhi.n	1a002e46 <__svfiscanf_r+0x1d2>
1a002dac:	2b69      	cmp	r3, #105	; 0x69
1a002dae:	d1d7      	bne.n	1a002d60 <__svfiscanf_r+0xec>
1a002db0:	2300      	movs	r3, #0
1a002db2:	9342      	str	r3, [sp, #264]	; 0x108
1a002db4:	2303      	movs	r3, #3
1a002db6:	9347      	str	r3, [sp, #284]	; 0x11c
1a002db8:	6863      	ldr	r3, [r4, #4]
1a002dba:	2b00      	cmp	r3, #0
1a002dbc:	dd68      	ble.n	1a002e90 <__svfiscanf_r+0x21c>
1a002dbe:	9b41      	ldr	r3, [sp, #260]	; 0x104
1a002dc0:	0659      	lsls	r1, r3, #25
1a002dc2:	d407      	bmi.n	1a002dd4 <__svfiscanf_r+0x160>
1a002dc4:	f7ff fb62 	bl	1a00248c <__locale_ctype_ptr>
1a002dc8:	6823      	ldr	r3, [r4, #0]
1a002dca:	781a      	ldrb	r2, [r3, #0]
1a002dcc:	4410      	add	r0, r2
1a002dce:	7842      	ldrb	r2, [r0, #1]
1a002dd0:	0712      	lsls	r2, r2, #28
1a002dd2:	d464      	bmi.n	1a002e9e <__svfiscanf_r+0x22a>
1a002dd4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
1a002dd6:	2b02      	cmp	r3, #2
1a002dd8:	dc73      	bgt.n	1a002ec2 <__svfiscanf_r+0x24e>
1a002dda:	466b      	mov	r3, sp
1a002ddc:	4622      	mov	r2, r4
1a002dde:	a941      	add	r1, sp, #260	; 0x104
1a002de0:	4630      	mov	r0, r6
1a002de2:	f000 f8bf 	bl	1a002f64 <_scanf_chars>
1a002de6:	2801      	cmp	r0, #1
1a002de8:	f000 8089 	beq.w	1a002efe <__svfiscanf_r+0x28a>
1a002dec:	2802      	cmp	r0, #2
1a002dee:	f47f af71 	bne.w	1a002cd4 <__svfiscanf_r+0x60>
1a002df2:	e01d      	b.n	1a002e30 <__svfiscanf_r+0x1bc>
1a002df4:	2b75      	cmp	r3, #117	; 0x75
1a002df6:	d0d1      	beq.n	1a002d9c <__svfiscanf_r+0x128>
1a002df8:	2b78      	cmp	r3, #120	; 0x78
1a002dfa:	d0c0      	beq.n	1a002d7e <__svfiscanf_r+0x10a>
1a002dfc:	2b73      	cmp	r3, #115	; 0x73
1a002dfe:	d1af      	bne.n	1a002d60 <__svfiscanf_r+0xec>
1a002e00:	2302      	movs	r3, #2
1a002e02:	e7d8      	b.n	1a002db6 <__svfiscanf_r+0x142>
1a002e04:	6863      	ldr	r3, [r4, #4]
1a002e06:	2b00      	cmp	r3, #0
1a002e08:	dd0c      	ble.n	1a002e24 <__svfiscanf_r+0x1b0>
1a002e0a:	6823      	ldr	r3, [r4, #0]
1a002e0c:	781a      	ldrb	r2, [r3, #0]
1a002e0e:	455a      	cmp	r2, fp
1a002e10:	d175      	bne.n	1a002efe <__svfiscanf_r+0x28a>
1a002e12:	3301      	adds	r3, #1
1a002e14:	6862      	ldr	r2, [r4, #4]
1a002e16:	6023      	str	r3, [r4, #0]
1a002e18:	9b45      	ldr	r3, [sp, #276]	; 0x114
1a002e1a:	3a01      	subs	r2, #1
1a002e1c:	3301      	adds	r3, #1
1a002e1e:	6062      	str	r2, [r4, #4]
1a002e20:	9345      	str	r3, [sp, #276]	; 0x114
1a002e22:	e757      	b.n	1a002cd4 <__svfiscanf_r+0x60>
1a002e24:	9ba1      	ldr	r3, [sp, #644]	; 0x284
1a002e26:	4621      	mov	r1, r4
1a002e28:	4630      	mov	r0, r6
1a002e2a:	4798      	blx	r3
1a002e2c:	2800      	cmp	r0, #0
1a002e2e:	d0ec      	beq.n	1a002e0a <__svfiscanf_r+0x196>
1a002e30:	9844      	ldr	r0, [sp, #272]	; 0x110
1a002e32:	2800      	cmp	r0, #0
1a002e34:	d159      	bne.n	1a002eea <__svfiscanf_r+0x276>
1a002e36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002e3a:	e05c      	b.n	1a002ef6 <__svfiscanf_r+0x282>
1a002e3c:	9a41      	ldr	r2, [sp, #260]	; 0x104
1a002e3e:	f042 0220 	orr.w	r2, r2, #32
1a002e42:	9241      	str	r2, [sp, #260]	; 0x104
1a002e44:	e79b      	b.n	1a002d7e <__svfiscanf_r+0x10a>
1a002e46:	2308      	movs	r3, #8
1a002e48:	9342      	str	r3, [sp, #264]	; 0x108
1a002e4a:	2304      	movs	r3, #4
1a002e4c:	e7b3      	b.n	1a002db6 <__svfiscanf_r+0x142>
1a002e4e:	4629      	mov	r1, r5
1a002e50:	4640      	mov	r0, r8
1a002e52:	f000 fa75 	bl	1a003340 <__sccl>
1a002e56:	9b41      	ldr	r3, [sp, #260]	; 0x104
1a002e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002e5c:	9341      	str	r3, [sp, #260]	; 0x104
1a002e5e:	4605      	mov	r5, r0
1a002e60:	2301      	movs	r3, #1
1a002e62:	e7a8      	b.n	1a002db6 <__svfiscanf_r+0x142>
1a002e64:	9b41      	ldr	r3, [sp, #260]	; 0x104
1a002e66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002e6a:	9341      	str	r3, [sp, #260]	; 0x104
1a002e6c:	2300      	movs	r3, #0
1a002e6e:	e7a2      	b.n	1a002db6 <__svfiscanf_r+0x142>
1a002e70:	9841      	ldr	r0, [sp, #260]	; 0x104
1a002e72:	06c3      	lsls	r3, r0, #27
1a002e74:	f53f af2e 	bmi.w	1a002cd4 <__svfiscanf_r+0x60>
1a002e78:	9b00      	ldr	r3, [sp, #0]
1a002e7a:	9a45      	ldr	r2, [sp, #276]	; 0x114
1a002e7c:	1d19      	adds	r1, r3, #4
1a002e7e:	9100      	str	r1, [sp, #0]
1a002e80:	681b      	ldr	r3, [r3, #0]
1a002e82:	07c0      	lsls	r0, r0, #31
1a002e84:	bf4c      	ite	mi
1a002e86:	801a      	strhmi	r2, [r3, #0]
1a002e88:	601a      	strpl	r2, [r3, #0]
1a002e8a:	e723      	b.n	1a002cd4 <__svfiscanf_r+0x60>
1a002e8c:	2305      	movs	r3, #5
1a002e8e:	e792      	b.n	1a002db6 <__svfiscanf_r+0x142>
1a002e90:	9ba1      	ldr	r3, [sp, #644]	; 0x284
1a002e92:	4621      	mov	r1, r4
1a002e94:	4630      	mov	r0, r6
1a002e96:	4798      	blx	r3
1a002e98:	2800      	cmp	r0, #0
1a002e9a:	d090      	beq.n	1a002dbe <__svfiscanf_r+0x14a>
1a002e9c:	e7c8      	b.n	1a002e30 <__svfiscanf_r+0x1bc>
1a002e9e:	9a45      	ldr	r2, [sp, #276]	; 0x114
1a002ea0:	3201      	adds	r2, #1
1a002ea2:	9245      	str	r2, [sp, #276]	; 0x114
1a002ea4:	6862      	ldr	r2, [r4, #4]
1a002ea6:	3a01      	subs	r2, #1
1a002ea8:	2a00      	cmp	r2, #0
1a002eaa:	6062      	str	r2, [r4, #4]
1a002eac:	dd02      	ble.n	1a002eb4 <__svfiscanf_r+0x240>
1a002eae:	3301      	adds	r3, #1
1a002eb0:	6023      	str	r3, [r4, #0]
1a002eb2:	e787      	b.n	1a002dc4 <__svfiscanf_r+0x150>
1a002eb4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
1a002eb6:	4621      	mov	r1, r4
1a002eb8:	4630      	mov	r0, r6
1a002eba:	4798      	blx	r3
1a002ebc:	2800      	cmp	r0, #0
1a002ebe:	d081      	beq.n	1a002dc4 <__svfiscanf_r+0x150>
1a002ec0:	e7b6      	b.n	1a002e30 <__svfiscanf_r+0x1bc>
1a002ec2:	2b04      	cmp	r3, #4
1a002ec4:	dc06      	bgt.n	1a002ed4 <__svfiscanf_r+0x260>
1a002ec6:	466b      	mov	r3, sp
1a002ec8:	4622      	mov	r2, r4
1a002eca:	a941      	add	r1, sp, #260	; 0x104
1a002ecc:	4630      	mov	r0, r6
1a002ece:	f000 f8ad 	bl	1a00302c <_scanf_i>
1a002ed2:	e788      	b.n	1a002de6 <__svfiscanf_r+0x172>
1a002ed4:	4b0e      	ldr	r3, [pc, #56]	; (1a002f10 <__svfiscanf_r+0x29c>)
1a002ed6:	2b00      	cmp	r3, #0
1a002ed8:	f43f aefc 	beq.w	1a002cd4 <__svfiscanf_r+0x60>
1a002edc:	466b      	mov	r3, sp
1a002ede:	4622      	mov	r2, r4
1a002ee0:	a941      	add	r1, sp, #260	; 0x104
1a002ee2:	4630      	mov	r0, r6
1a002ee4:	f3af 8000 	nop.w
1a002ee8:	e77d      	b.n	1a002de6 <__svfiscanf_r+0x172>
1a002eea:	89a3      	ldrh	r3, [r4, #12]
1a002eec:	f013 0f40 	tst.w	r3, #64	; 0x40
1a002ef0:	bf18      	it	ne
1a002ef2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a002ef6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
1a002efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002efe:	9844      	ldr	r0, [sp, #272]	; 0x110
1a002f00:	e7f9      	b.n	1a002ef6 <__svfiscanf_r+0x282>
1a002f02:	bf00      	nop
1a002f04:	1a0035b9 	.word	0x1a0035b9
1a002f08:	1a003229 	.word	0x1a003229
1a002f0c:	1a003bc0 	.word	0x1a003bc0
1a002f10:	00000000 	.word	0x00000000

1a002f14 <_vfiscanf_r>:
1a002f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002f18:	460c      	mov	r4, r1
1a002f1a:	4616      	mov	r6, r2
1a002f1c:	461f      	mov	r7, r3
1a002f1e:	4605      	mov	r5, r0
1a002f20:	b118      	cbz	r0, 1a002f2a <_vfiscanf_r+0x16>
1a002f22:	6983      	ldr	r3, [r0, #24]
1a002f24:	b90b      	cbnz	r3, 1a002f2a <_vfiscanf_r+0x16>
1a002f26:	f7ff fa07 	bl	1a002338 <__sinit>
1a002f2a:	4b0b      	ldr	r3, [pc, #44]	; (1a002f58 <_vfiscanf_r+0x44>)
1a002f2c:	429c      	cmp	r4, r3
1a002f2e:	d108      	bne.n	1a002f42 <_vfiscanf_r+0x2e>
1a002f30:	686c      	ldr	r4, [r5, #4]
1a002f32:	463b      	mov	r3, r7
1a002f34:	4632      	mov	r2, r6
1a002f36:	4621      	mov	r1, r4
1a002f38:	4628      	mov	r0, r5
1a002f3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a002f3e:	f7ff be99 	b.w	1a002c74 <__svfiscanf_r>
1a002f42:	4b06      	ldr	r3, [pc, #24]	; (1a002f5c <_vfiscanf_r+0x48>)
1a002f44:	429c      	cmp	r4, r3
1a002f46:	d101      	bne.n	1a002f4c <_vfiscanf_r+0x38>
1a002f48:	68ac      	ldr	r4, [r5, #8]
1a002f4a:	e7f2      	b.n	1a002f32 <_vfiscanf_r+0x1e>
1a002f4c:	4b04      	ldr	r3, [pc, #16]	; (1a002f60 <_vfiscanf_r+0x4c>)
1a002f4e:	429c      	cmp	r4, r3
1a002f50:	bf08      	it	eq
1a002f52:	68ec      	ldreq	r4, [r5, #12]
1a002f54:	e7ed      	b.n	1a002f32 <_vfiscanf_r+0x1e>
1a002f56:	bf00      	nop
1a002f58:	1a003b6c 	.word	0x1a003b6c
1a002f5c:	1a003b8c 	.word	0x1a003b8c
1a002f60:	1a003b4c 	.word	0x1a003b4c

1a002f64 <_scanf_chars>:
1a002f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002f68:	4615      	mov	r5, r2
1a002f6a:	688a      	ldr	r2, [r1, #8]
1a002f6c:	4680      	mov	r8, r0
1a002f6e:	460c      	mov	r4, r1
1a002f70:	b932      	cbnz	r2, 1a002f80 <_scanf_chars+0x1c>
1a002f72:	698a      	ldr	r2, [r1, #24]
1a002f74:	2a00      	cmp	r2, #0
1a002f76:	bf14      	ite	ne
1a002f78:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
1a002f7c:	2201      	moveq	r2, #1
1a002f7e:	608a      	str	r2, [r1, #8]
1a002f80:	6822      	ldr	r2, [r4, #0]
1a002f82:	06d1      	lsls	r1, r2, #27
1a002f84:	bf5f      	itttt	pl
1a002f86:	681a      	ldrpl	r2, [r3, #0]
1a002f88:	1d11      	addpl	r1, r2, #4
1a002f8a:	6019      	strpl	r1, [r3, #0]
1a002f8c:	6817      	ldrpl	r7, [r2, #0]
1a002f8e:	2600      	movs	r6, #0
1a002f90:	69a3      	ldr	r3, [r4, #24]
1a002f92:	b1db      	cbz	r3, 1a002fcc <_scanf_chars+0x68>
1a002f94:	2b01      	cmp	r3, #1
1a002f96:	d107      	bne.n	1a002fa8 <_scanf_chars+0x44>
1a002f98:	682b      	ldr	r3, [r5, #0]
1a002f9a:	6962      	ldr	r2, [r4, #20]
1a002f9c:	781b      	ldrb	r3, [r3, #0]
1a002f9e:	5cd3      	ldrb	r3, [r2, r3]
1a002fa0:	b9a3      	cbnz	r3, 1a002fcc <_scanf_chars+0x68>
1a002fa2:	2e00      	cmp	r6, #0
1a002fa4:	d132      	bne.n	1a00300c <_scanf_chars+0xa8>
1a002fa6:	e006      	b.n	1a002fb6 <_scanf_chars+0x52>
1a002fa8:	2b02      	cmp	r3, #2
1a002faa:	d007      	beq.n	1a002fbc <_scanf_chars+0x58>
1a002fac:	2e00      	cmp	r6, #0
1a002fae:	d12d      	bne.n	1a00300c <_scanf_chars+0xa8>
1a002fb0:	69a3      	ldr	r3, [r4, #24]
1a002fb2:	2b01      	cmp	r3, #1
1a002fb4:	d12a      	bne.n	1a00300c <_scanf_chars+0xa8>
1a002fb6:	2001      	movs	r0, #1
1a002fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002fbc:	f7ff fa66 	bl	1a00248c <__locale_ctype_ptr>
1a002fc0:	682b      	ldr	r3, [r5, #0]
1a002fc2:	781b      	ldrb	r3, [r3, #0]
1a002fc4:	4418      	add	r0, r3
1a002fc6:	7843      	ldrb	r3, [r0, #1]
1a002fc8:	071b      	lsls	r3, r3, #28
1a002fca:	d4ef      	bmi.n	1a002fac <_scanf_chars+0x48>
1a002fcc:	6823      	ldr	r3, [r4, #0]
1a002fce:	06da      	lsls	r2, r3, #27
1a002fd0:	bf5e      	ittt	pl
1a002fd2:	682b      	ldrpl	r3, [r5, #0]
1a002fd4:	781b      	ldrbpl	r3, [r3, #0]
1a002fd6:	703b      	strbpl	r3, [r7, #0]
1a002fd8:	682a      	ldr	r2, [r5, #0]
1a002fda:	686b      	ldr	r3, [r5, #4]
1a002fdc:	f102 0201 	add.w	r2, r2, #1
1a002fe0:	602a      	str	r2, [r5, #0]
1a002fe2:	68a2      	ldr	r2, [r4, #8]
1a002fe4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
1a002fe8:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
1a002fec:	606b      	str	r3, [r5, #4]
1a002fee:	f106 0601 	add.w	r6, r6, #1
1a002ff2:	bf58      	it	pl
1a002ff4:	3701      	addpl	r7, #1
1a002ff6:	60a2      	str	r2, [r4, #8]
1a002ff8:	b142      	cbz	r2, 1a00300c <_scanf_chars+0xa8>
1a002ffa:	2b00      	cmp	r3, #0
1a002ffc:	dcc8      	bgt.n	1a002f90 <_scanf_chars+0x2c>
1a002ffe:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
1a003002:	4629      	mov	r1, r5
1a003004:	4640      	mov	r0, r8
1a003006:	4798      	blx	r3
1a003008:	2800      	cmp	r0, #0
1a00300a:	d0c1      	beq.n	1a002f90 <_scanf_chars+0x2c>
1a00300c:	6823      	ldr	r3, [r4, #0]
1a00300e:	f013 0310 	ands.w	r3, r3, #16
1a003012:	d105      	bne.n	1a003020 <_scanf_chars+0xbc>
1a003014:	68e2      	ldr	r2, [r4, #12]
1a003016:	3201      	adds	r2, #1
1a003018:	60e2      	str	r2, [r4, #12]
1a00301a:	69a2      	ldr	r2, [r4, #24]
1a00301c:	b102      	cbz	r2, 1a003020 <_scanf_chars+0xbc>
1a00301e:	703b      	strb	r3, [r7, #0]
1a003020:	6923      	ldr	r3, [r4, #16]
1a003022:	441e      	add	r6, r3
1a003024:	6126      	str	r6, [r4, #16]
1a003026:	2000      	movs	r0, #0
1a003028:	e7c6      	b.n	1a002fb8 <_scanf_chars+0x54>
1a00302a:	Address 0x000000001a00302a is out of bounds.


1a00302c <_scanf_i>:
1a00302c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003030:	469a      	mov	sl, r3
1a003032:	4b74      	ldr	r3, [pc, #464]	; (1a003204 <_scanf_i+0x1d8>)
1a003034:	460c      	mov	r4, r1
1a003036:	4683      	mov	fp, r0
1a003038:	4616      	mov	r6, r2
1a00303a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
1a00303e:	b087      	sub	sp, #28
1a003040:	ab03      	add	r3, sp, #12
1a003042:	68a7      	ldr	r7, [r4, #8]
1a003044:	e883 0007 	stmia.w	r3, {r0, r1, r2}
1a003048:	4b6f      	ldr	r3, [pc, #444]	; (1a003208 <_scanf_i+0x1dc>)
1a00304a:	69a1      	ldr	r1, [r4, #24]
1a00304c:	4a6f      	ldr	r2, [pc, #444]	; (1a00320c <_scanf_i+0x1e0>)
1a00304e:	2903      	cmp	r1, #3
1a003050:	bf08      	it	eq
1a003052:	461a      	moveq	r2, r3
1a003054:	1e7b      	subs	r3, r7, #1
1a003056:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
1a00305a:	bf84      	itt	hi
1a00305c:	f240 135d 	movwhi	r3, #349	; 0x15d
1a003060:	60a3      	strhi	r3, [r4, #8]
1a003062:	6823      	ldr	r3, [r4, #0]
1a003064:	9200      	str	r2, [sp, #0]
1a003066:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
1a00306a:	bf88      	it	hi
1a00306c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
1a003070:	f104 091c 	add.w	r9, r4, #28
1a003074:	6023      	str	r3, [r4, #0]
1a003076:	bf8c      	ite	hi
1a003078:	197f      	addhi	r7, r7, r5
1a00307a:	2700      	movls	r7, #0
1a00307c:	464b      	mov	r3, r9
1a00307e:	f04f 0800 	mov.w	r8, #0
1a003082:	9301      	str	r3, [sp, #4]
1a003084:	6831      	ldr	r1, [r6, #0]
1a003086:	ab03      	add	r3, sp, #12
1a003088:	2202      	movs	r2, #2
1a00308a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
1a00308e:	7809      	ldrb	r1, [r1, #0]
1a003090:	f000 fb16 	bl	1a0036c0 <memchr>
1a003094:	9b01      	ldr	r3, [sp, #4]
1a003096:	b330      	cbz	r0, 1a0030e6 <_scanf_i+0xba>
1a003098:	f1b8 0f01 	cmp.w	r8, #1
1a00309c:	d15a      	bne.n	1a003154 <_scanf_i+0x128>
1a00309e:	6862      	ldr	r2, [r4, #4]
1a0030a0:	b92a      	cbnz	r2, 1a0030ae <_scanf_i+0x82>
1a0030a2:	6822      	ldr	r2, [r4, #0]
1a0030a4:	2108      	movs	r1, #8
1a0030a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
1a0030aa:	6061      	str	r1, [r4, #4]
1a0030ac:	6022      	str	r2, [r4, #0]
1a0030ae:	6822      	ldr	r2, [r4, #0]
1a0030b0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
1a0030b4:	6022      	str	r2, [r4, #0]
1a0030b6:	68a2      	ldr	r2, [r4, #8]
1a0030b8:	1e51      	subs	r1, r2, #1
1a0030ba:	60a1      	str	r1, [r4, #8]
1a0030bc:	b19a      	cbz	r2, 1a0030e6 <_scanf_i+0xba>
1a0030be:	6832      	ldr	r2, [r6, #0]
1a0030c0:	1c51      	adds	r1, r2, #1
1a0030c2:	6031      	str	r1, [r6, #0]
1a0030c4:	7812      	ldrb	r2, [r2, #0]
1a0030c6:	701a      	strb	r2, [r3, #0]
1a0030c8:	1c5d      	adds	r5, r3, #1
1a0030ca:	6873      	ldr	r3, [r6, #4]
1a0030cc:	3b01      	subs	r3, #1
1a0030ce:	2b00      	cmp	r3, #0
1a0030d0:	6073      	str	r3, [r6, #4]
1a0030d2:	dc07      	bgt.n	1a0030e4 <_scanf_i+0xb8>
1a0030d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
1a0030d8:	4631      	mov	r1, r6
1a0030da:	4658      	mov	r0, fp
1a0030dc:	4798      	blx	r3
1a0030de:	2800      	cmp	r0, #0
1a0030e0:	f040 8086 	bne.w	1a0031f0 <_scanf_i+0x1c4>
1a0030e4:	462b      	mov	r3, r5
1a0030e6:	f108 0801 	add.w	r8, r8, #1
1a0030ea:	f1b8 0f03 	cmp.w	r8, #3
1a0030ee:	d1c8      	bne.n	1a003082 <_scanf_i+0x56>
1a0030f0:	6862      	ldr	r2, [r4, #4]
1a0030f2:	b90a      	cbnz	r2, 1a0030f8 <_scanf_i+0xcc>
1a0030f4:	220a      	movs	r2, #10
1a0030f6:	6062      	str	r2, [r4, #4]
1a0030f8:	6862      	ldr	r2, [r4, #4]
1a0030fa:	4945      	ldr	r1, [pc, #276]	; (1a003210 <_scanf_i+0x1e4>)
1a0030fc:	6960      	ldr	r0, [r4, #20]
1a0030fe:	9301      	str	r3, [sp, #4]
1a003100:	1a89      	subs	r1, r1, r2
1a003102:	f000 f91d 	bl	1a003340 <__sccl>
1a003106:	9b01      	ldr	r3, [sp, #4]
1a003108:	f04f 0800 	mov.w	r8, #0
1a00310c:	461d      	mov	r5, r3
1a00310e:	68a3      	ldr	r3, [r4, #8]
1a003110:	6822      	ldr	r2, [r4, #0]
1a003112:	2b00      	cmp	r3, #0
1a003114:	d03a      	beq.n	1a00318c <_scanf_i+0x160>
1a003116:	6831      	ldr	r1, [r6, #0]
1a003118:	6960      	ldr	r0, [r4, #20]
1a00311a:	f891 c000 	ldrb.w	ip, [r1]
1a00311e:	f810 000c 	ldrb.w	r0, [r0, ip]
1a003122:	2800      	cmp	r0, #0
1a003124:	d032      	beq.n	1a00318c <_scanf_i+0x160>
1a003126:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
1a00312a:	d121      	bne.n	1a003170 <_scanf_i+0x144>
1a00312c:	0510      	lsls	r0, r2, #20
1a00312e:	d51f      	bpl.n	1a003170 <_scanf_i+0x144>
1a003130:	f108 0801 	add.w	r8, r8, #1
1a003134:	b117      	cbz	r7, 1a00313c <_scanf_i+0x110>
1a003136:	3301      	adds	r3, #1
1a003138:	3f01      	subs	r7, #1
1a00313a:	60a3      	str	r3, [r4, #8]
1a00313c:	6873      	ldr	r3, [r6, #4]
1a00313e:	3b01      	subs	r3, #1
1a003140:	2b00      	cmp	r3, #0
1a003142:	6073      	str	r3, [r6, #4]
1a003144:	dd1b      	ble.n	1a00317e <_scanf_i+0x152>
1a003146:	6833      	ldr	r3, [r6, #0]
1a003148:	3301      	adds	r3, #1
1a00314a:	6033      	str	r3, [r6, #0]
1a00314c:	68a3      	ldr	r3, [r4, #8]
1a00314e:	3b01      	subs	r3, #1
1a003150:	60a3      	str	r3, [r4, #8]
1a003152:	e7dc      	b.n	1a00310e <_scanf_i+0xe2>
1a003154:	f1b8 0f02 	cmp.w	r8, #2
1a003158:	d1ad      	bne.n	1a0030b6 <_scanf_i+0x8a>
1a00315a:	6822      	ldr	r2, [r4, #0]
1a00315c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
1a003160:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
1a003164:	d1bf      	bne.n	1a0030e6 <_scanf_i+0xba>
1a003166:	2110      	movs	r1, #16
1a003168:	6061      	str	r1, [r4, #4]
1a00316a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
1a00316e:	e7a1      	b.n	1a0030b4 <_scanf_i+0x88>
1a003170:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
1a003174:	6022      	str	r2, [r4, #0]
1a003176:	780b      	ldrb	r3, [r1, #0]
1a003178:	702b      	strb	r3, [r5, #0]
1a00317a:	3501      	adds	r5, #1
1a00317c:	e7de      	b.n	1a00313c <_scanf_i+0x110>
1a00317e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
1a003182:	4631      	mov	r1, r6
1a003184:	4658      	mov	r0, fp
1a003186:	4798      	blx	r3
1a003188:	2800      	cmp	r0, #0
1a00318a:	d0df      	beq.n	1a00314c <_scanf_i+0x120>
1a00318c:	6823      	ldr	r3, [r4, #0]
1a00318e:	05d9      	lsls	r1, r3, #23
1a003190:	d50c      	bpl.n	1a0031ac <_scanf_i+0x180>
1a003192:	454d      	cmp	r5, r9
1a003194:	d908      	bls.n	1a0031a8 <_scanf_i+0x17c>
1a003196:	f815 1c01 	ldrb.w	r1, [r5, #-1]
1a00319a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
1a00319e:	4632      	mov	r2, r6
1a0031a0:	4658      	mov	r0, fp
1a0031a2:	4798      	blx	r3
1a0031a4:	1e6f      	subs	r7, r5, #1
1a0031a6:	463d      	mov	r5, r7
1a0031a8:	454d      	cmp	r5, r9
1a0031aa:	d029      	beq.n	1a003200 <_scanf_i+0x1d4>
1a0031ac:	6822      	ldr	r2, [r4, #0]
1a0031ae:	f012 0210 	ands.w	r2, r2, #16
1a0031b2:	d113      	bne.n	1a0031dc <_scanf_i+0x1b0>
1a0031b4:	702a      	strb	r2, [r5, #0]
1a0031b6:	6863      	ldr	r3, [r4, #4]
1a0031b8:	9e00      	ldr	r6, [sp, #0]
1a0031ba:	4649      	mov	r1, r9
1a0031bc:	4658      	mov	r0, fp
1a0031be:	47b0      	blx	r6
1a0031c0:	f8da 3000 	ldr.w	r3, [sl]
1a0031c4:	6821      	ldr	r1, [r4, #0]
1a0031c6:	1d1a      	adds	r2, r3, #4
1a0031c8:	f8ca 2000 	str.w	r2, [sl]
1a0031cc:	f011 0f20 	tst.w	r1, #32
1a0031d0:	681b      	ldr	r3, [r3, #0]
1a0031d2:	d010      	beq.n	1a0031f6 <_scanf_i+0x1ca>
1a0031d4:	6018      	str	r0, [r3, #0]
1a0031d6:	68e3      	ldr	r3, [r4, #12]
1a0031d8:	3301      	adds	r3, #1
1a0031da:	60e3      	str	r3, [r4, #12]
1a0031dc:	eba5 0509 	sub.w	r5, r5, r9
1a0031e0:	44a8      	add	r8, r5
1a0031e2:	6925      	ldr	r5, [r4, #16]
1a0031e4:	4445      	add	r5, r8
1a0031e6:	6125      	str	r5, [r4, #16]
1a0031e8:	2000      	movs	r0, #0
1a0031ea:	b007      	add	sp, #28
1a0031ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0031f0:	f04f 0800 	mov.w	r8, #0
1a0031f4:	e7ca      	b.n	1a00318c <_scanf_i+0x160>
1a0031f6:	07ca      	lsls	r2, r1, #31
1a0031f8:	bf4c      	ite	mi
1a0031fa:	8018      	strhmi	r0, [r3, #0]
1a0031fc:	6018      	strpl	r0, [r3, #0]
1a0031fe:	e7ea      	b.n	1a0031d6 <_scanf_i+0x1aa>
1a003200:	2001      	movs	r0, #1
1a003202:	e7f2      	b.n	1a0031ea <_scanf_i+0x1be>
1a003204:	1a003bf0 	.word	0x1a003bf0
1a003208:	1a001f65 	.word	0x1a001f65
1a00320c:	1a003521 	.word	0x1a003521
1a003210:	1a003c0c 	.word	0x1a003c0c

1a003214 <lflush>:
1a003214:	8983      	ldrh	r3, [r0, #12]
1a003216:	f003 0309 	and.w	r3, r3, #9
1a00321a:	2b09      	cmp	r3, #9
1a00321c:	d101      	bne.n	1a003222 <lflush+0xe>
1a00321e:	f7ff b839 	b.w	1a002294 <fflush>
1a003222:	2000      	movs	r0, #0
1a003224:	4770      	bx	lr
1a003226:	Address 0x000000001a003226 is out of bounds.


1a003228 <__srefill_r>:
1a003228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00322a:	460c      	mov	r4, r1
1a00322c:	4605      	mov	r5, r0
1a00322e:	b118      	cbz	r0, 1a003238 <__srefill_r+0x10>
1a003230:	6983      	ldr	r3, [r0, #24]
1a003232:	b90b      	cbnz	r3, 1a003238 <__srefill_r+0x10>
1a003234:	f7ff f880 	bl	1a002338 <__sinit>
1a003238:	4b3c      	ldr	r3, [pc, #240]	; (1a00332c <__srefill_r+0x104>)
1a00323a:	429c      	cmp	r4, r3
1a00323c:	d10a      	bne.n	1a003254 <__srefill_r+0x2c>
1a00323e:	686c      	ldr	r4, [r5, #4]
1a003240:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a003244:	2300      	movs	r3, #0
1a003246:	6063      	str	r3, [r4, #4]
1a003248:	b293      	uxth	r3, r2
1a00324a:	069e      	lsls	r6, r3, #26
1a00324c:	d50c      	bpl.n	1a003268 <__srefill_r+0x40>
1a00324e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003252:	e067      	b.n	1a003324 <__srefill_r+0xfc>
1a003254:	4b36      	ldr	r3, [pc, #216]	; (1a003330 <__srefill_r+0x108>)
1a003256:	429c      	cmp	r4, r3
1a003258:	d101      	bne.n	1a00325e <__srefill_r+0x36>
1a00325a:	68ac      	ldr	r4, [r5, #8]
1a00325c:	e7f0      	b.n	1a003240 <__srefill_r+0x18>
1a00325e:	4b35      	ldr	r3, [pc, #212]	; (1a003334 <__srefill_r+0x10c>)
1a003260:	429c      	cmp	r4, r3
1a003262:	bf08      	it	eq
1a003264:	68ec      	ldreq	r4, [r5, #12]
1a003266:	e7eb      	b.n	1a003240 <__srefill_r+0x18>
1a003268:	0758      	lsls	r0, r3, #29
1a00326a:	d449      	bmi.n	1a003300 <__srefill_r+0xd8>
1a00326c:	06d9      	lsls	r1, r3, #27
1a00326e:	d405      	bmi.n	1a00327c <__srefill_r+0x54>
1a003270:	2309      	movs	r3, #9
1a003272:	f042 0240 	orr.w	r2, r2, #64	; 0x40
1a003276:	602b      	str	r3, [r5, #0]
1a003278:	81a2      	strh	r2, [r4, #12]
1a00327a:	e7e8      	b.n	1a00324e <__srefill_r+0x26>
1a00327c:	071a      	lsls	r2, r3, #28
1a00327e:	d50b      	bpl.n	1a003298 <__srefill_r+0x70>
1a003280:	4621      	mov	r1, r4
1a003282:	4628      	mov	r0, r5
1a003284:	f7fe ffdc 	bl	1a002240 <_fflush_r>
1a003288:	2800      	cmp	r0, #0
1a00328a:	d1e0      	bne.n	1a00324e <__srefill_r+0x26>
1a00328c:	89a3      	ldrh	r3, [r4, #12]
1a00328e:	60a0      	str	r0, [r4, #8]
1a003290:	f023 0308 	bic.w	r3, r3, #8
1a003294:	81a3      	strh	r3, [r4, #12]
1a003296:	61a0      	str	r0, [r4, #24]
1a003298:	89a3      	ldrh	r3, [r4, #12]
1a00329a:	f043 0304 	orr.w	r3, r3, #4
1a00329e:	81a3      	strh	r3, [r4, #12]
1a0032a0:	6923      	ldr	r3, [r4, #16]
1a0032a2:	b91b      	cbnz	r3, 1a0032ac <__srefill_r+0x84>
1a0032a4:	4621      	mov	r1, r4
1a0032a6:	4628      	mov	r0, r5
1a0032a8:	f7ff f922 	bl	1a0024f0 <__smakebuf_r>
1a0032ac:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
1a0032b0:	b2be      	uxth	r6, r7
1a0032b2:	07b3      	lsls	r3, r6, #30
1a0032b4:	d00f      	beq.n	1a0032d6 <__srefill_r+0xae>
1a0032b6:	2301      	movs	r3, #1
1a0032b8:	81a3      	strh	r3, [r4, #12]
1a0032ba:	4b1f      	ldr	r3, [pc, #124]	; (1a003338 <__srefill_r+0x110>)
1a0032bc:	491f      	ldr	r1, [pc, #124]	; (1a00333c <__srefill_r+0x114>)
1a0032be:	6818      	ldr	r0, [r3, #0]
1a0032c0:	f006 0609 	and.w	r6, r6, #9
1a0032c4:	f7ff f8a4 	bl	1a002410 <_fwalk>
1a0032c8:	2e09      	cmp	r6, #9
1a0032ca:	81a7      	strh	r7, [r4, #12]
1a0032cc:	d103      	bne.n	1a0032d6 <__srefill_r+0xae>
1a0032ce:	4621      	mov	r1, r4
1a0032d0:	4628      	mov	r0, r5
1a0032d2:	f7fe ff2f 	bl	1a002134 <__sflush_r>
1a0032d6:	6922      	ldr	r2, [r4, #16]
1a0032d8:	6022      	str	r2, [r4, #0]
1a0032da:	6a66      	ldr	r6, [r4, #36]	; 0x24
1a0032dc:	6963      	ldr	r3, [r4, #20]
1a0032de:	6a21      	ldr	r1, [r4, #32]
1a0032e0:	4628      	mov	r0, r5
1a0032e2:	47b0      	blx	r6
1a0032e4:	2800      	cmp	r0, #0
1a0032e6:	6060      	str	r0, [r4, #4]
1a0032e8:	dc1d      	bgt.n	1a003326 <__srefill_r+0xfe>
1a0032ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0032ee:	bf17      	itett	ne
1a0032f0:	2200      	movne	r2, #0
1a0032f2:	f043 0320 	orreq.w	r3, r3, #32
1a0032f6:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
1a0032fa:	6062      	strne	r2, [r4, #4]
1a0032fc:	81a3      	strh	r3, [r4, #12]
1a0032fe:	e7a6      	b.n	1a00324e <__srefill_r+0x26>
1a003300:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a003302:	2900      	cmp	r1, #0
1a003304:	d0cc      	beq.n	1a0032a0 <__srefill_r+0x78>
1a003306:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a00330a:	4299      	cmp	r1, r3
1a00330c:	d002      	beq.n	1a003314 <__srefill_r+0xec>
1a00330e:	4628      	mov	r0, r5
1a003310:	f7ff f940 	bl	1a002594 <_free_r>
1a003314:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a003316:	6063      	str	r3, [r4, #4]
1a003318:	2000      	movs	r0, #0
1a00331a:	6360      	str	r0, [r4, #52]	; 0x34
1a00331c:	2b00      	cmp	r3, #0
1a00331e:	d0bf      	beq.n	1a0032a0 <__srefill_r+0x78>
1a003320:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a003322:	6023      	str	r3, [r4, #0]
1a003324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003326:	2000      	movs	r0, #0
1a003328:	e7fc      	b.n	1a003324 <__srefill_r+0xfc>
1a00332a:	bf00      	nop
1a00332c:	1a003b6c 	.word	0x1a003b6c
1a003330:	1a003b8c 	.word	0x1a003b8c
1a003334:	1a003b4c 	.word	0x1a003b4c
1a003338:	1a003bac 	.word	0x1a003bac
1a00333c:	1a003215 	.word	0x1a003215

1a003340 <__sccl>:
1a003340:	b570      	push	{r4, r5, r6, lr}
1a003342:	780b      	ldrb	r3, [r1, #0]
1a003344:	2b5e      	cmp	r3, #94	; 0x5e
1a003346:	bf13      	iteet	ne
1a003348:	1c4a      	addne	r2, r1, #1
1a00334a:	1c8a      	addeq	r2, r1, #2
1a00334c:	784b      	ldrbeq	r3, [r1, #1]
1a00334e:	2100      	movne	r1, #0
1a003350:	bf08      	it	eq
1a003352:	2101      	moveq	r1, #1
1a003354:	1e44      	subs	r4, r0, #1
1a003356:	f100 05ff 	add.w	r5, r0, #255	; 0xff
1a00335a:	f804 1f01 	strb.w	r1, [r4, #1]!
1a00335e:	42ac      	cmp	r4, r5
1a003360:	d1fb      	bne.n	1a00335a <__sccl+0x1a>
1a003362:	b913      	cbnz	r3, 1a00336a <__sccl+0x2a>
1a003364:	3a01      	subs	r2, #1
1a003366:	4610      	mov	r0, r2
1a003368:	bd70      	pop	{r4, r5, r6, pc}
1a00336a:	f081 0401 	eor.w	r4, r1, #1
1a00336e:	54c4      	strb	r4, [r0, r3]
1a003370:	1c51      	adds	r1, r2, #1
1a003372:	f811 5c01 	ldrb.w	r5, [r1, #-1]
1a003376:	2d2d      	cmp	r5, #45	; 0x2d
1a003378:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
1a00337c:	460a      	mov	r2, r1
1a00337e:	d006      	beq.n	1a00338e <__sccl+0x4e>
1a003380:	2d5d      	cmp	r5, #93	; 0x5d
1a003382:	d0f0      	beq.n	1a003366 <__sccl+0x26>
1a003384:	b90d      	cbnz	r5, 1a00338a <__sccl+0x4a>
1a003386:	4632      	mov	r2, r6
1a003388:	e7ed      	b.n	1a003366 <__sccl+0x26>
1a00338a:	462b      	mov	r3, r5
1a00338c:	e7ef      	b.n	1a00336e <__sccl+0x2e>
1a00338e:	780e      	ldrb	r6, [r1, #0]
1a003390:	2e5d      	cmp	r6, #93	; 0x5d
1a003392:	d0fa      	beq.n	1a00338a <__sccl+0x4a>
1a003394:	42b3      	cmp	r3, r6
1a003396:	dcf8      	bgt.n	1a00338a <__sccl+0x4a>
1a003398:	3301      	adds	r3, #1
1a00339a:	429e      	cmp	r6, r3
1a00339c:	54c4      	strb	r4, [r0, r3]
1a00339e:	dcfb      	bgt.n	1a003398 <__sccl+0x58>
1a0033a0:	3102      	adds	r1, #2
1a0033a2:	e7e6      	b.n	1a003372 <__sccl+0x32>

1a0033a4 <__sread>:
1a0033a4:	b510      	push	{r4, lr}
1a0033a6:	460c      	mov	r4, r1
1a0033a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0033ac:	f7fd f982 	bl	1a0006b4 <_read_r>
1a0033b0:	2800      	cmp	r0, #0
1a0033b2:	bfab      	itete	ge
1a0033b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a0033b6:	89a3      	ldrhlt	r3, [r4, #12]
1a0033b8:	181b      	addge	r3, r3, r0
1a0033ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a0033be:	bfac      	ite	ge
1a0033c0:	6563      	strge	r3, [r4, #84]	; 0x54
1a0033c2:	81a3      	strhlt	r3, [r4, #12]
1a0033c4:	bd10      	pop	{r4, pc}

1a0033c6 <__swrite>:
1a0033c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0033ca:	461f      	mov	r7, r3
1a0033cc:	898b      	ldrh	r3, [r1, #12]
1a0033ce:	05db      	lsls	r3, r3, #23
1a0033d0:	4605      	mov	r5, r0
1a0033d2:	460c      	mov	r4, r1
1a0033d4:	4616      	mov	r6, r2
1a0033d6:	d505      	bpl.n	1a0033e4 <__swrite+0x1e>
1a0033d8:	2302      	movs	r3, #2
1a0033da:	2200      	movs	r2, #0
1a0033dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0033e0:	f7fd f963 	bl	1a0006aa <_lseek_r>
1a0033e4:	89a3      	ldrh	r3, [r4, #12]
1a0033e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0033ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a0033ee:	81a3      	strh	r3, [r4, #12]
1a0033f0:	4632      	mov	r2, r6
1a0033f2:	463b      	mov	r3, r7
1a0033f4:	4628      	mov	r0, r5
1a0033f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a0033fa:	f7fd b982 	b.w	1a000702 <_write_r>

1a0033fe <__sseek>:
1a0033fe:	b510      	push	{r4, lr}
1a003400:	460c      	mov	r4, r1
1a003402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003406:	f7fd f950 	bl	1a0006aa <_lseek_r>
1a00340a:	1c43      	adds	r3, r0, #1
1a00340c:	89a3      	ldrh	r3, [r4, #12]
1a00340e:	bf15      	itete	ne
1a003410:	6560      	strne	r0, [r4, #84]	; 0x54
1a003412:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a003416:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a00341a:	81a3      	strheq	r3, [r4, #12]
1a00341c:	bf18      	it	ne
1a00341e:	81a3      	strhne	r3, [r4, #12]
1a003420:	bd10      	pop	{r4, pc}

1a003422 <__sclose>:
1a003422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003426:	f7fd b92d 	b.w	1a000684 <_close_r>

1a00342a <_strtoul_l.isra.0>:
1a00342a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00342e:	4680      	mov	r8, r0
1a003430:	4689      	mov	r9, r1
1a003432:	4692      	mov	sl, r2
1a003434:	461e      	mov	r6, r3
1a003436:	460f      	mov	r7, r1
1a003438:	463d      	mov	r5, r7
1a00343a:	9808      	ldr	r0, [sp, #32]
1a00343c:	f815 4b01 	ldrb.w	r4, [r5], #1
1a003440:	f7ff f820 	bl	1a002484 <__locale_ctype_ptr_l>
1a003444:	4420      	add	r0, r4
1a003446:	7843      	ldrb	r3, [r0, #1]
1a003448:	f013 0308 	ands.w	r3, r3, #8
1a00344c:	d130      	bne.n	1a0034b0 <_strtoul_l.isra.0+0x86>
1a00344e:	2c2d      	cmp	r4, #45	; 0x2d
1a003450:	d130      	bne.n	1a0034b4 <_strtoul_l.isra.0+0x8a>
1a003452:	787c      	ldrb	r4, [r7, #1]
1a003454:	1cbd      	adds	r5, r7, #2
1a003456:	2101      	movs	r1, #1
1a003458:	2e00      	cmp	r6, #0
1a00345a:	d05c      	beq.n	1a003516 <_strtoul_l.isra.0+0xec>
1a00345c:	2e10      	cmp	r6, #16
1a00345e:	d109      	bne.n	1a003474 <_strtoul_l.isra.0+0x4a>
1a003460:	2c30      	cmp	r4, #48	; 0x30
1a003462:	d107      	bne.n	1a003474 <_strtoul_l.isra.0+0x4a>
1a003464:	782b      	ldrb	r3, [r5, #0]
1a003466:	f003 03df 	and.w	r3, r3, #223	; 0xdf
1a00346a:	2b58      	cmp	r3, #88	; 0x58
1a00346c:	d14e      	bne.n	1a00350c <_strtoul_l.isra.0+0xe2>
1a00346e:	786c      	ldrb	r4, [r5, #1]
1a003470:	2610      	movs	r6, #16
1a003472:	3502      	adds	r5, #2
1a003474:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a003478:	2300      	movs	r3, #0
1a00347a:	fbb2 f2f6 	udiv	r2, r2, r6
1a00347e:	fb06 fc02 	mul.w	ip, r6, r2
1a003482:	ea6f 0c0c 	mvn.w	ip, ip
1a003486:	4618      	mov	r0, r3
1a003488:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
1a00348c:	2f09      	cmp	r7, #9
1a00348e:	d817      	bhi.n	1a0034c0 <_strtoul_l.isra.0+0x96>
1a003490:	463c      	mov	r4, r7
1a003492:	42a6      	cmp	r6, r4
1a003494:	dd23      	ble.n	1a0034de <_strtoul_l.isra.0+0xb4>
1a003496:	2b00      	cmp	r3, #0
1a003498:	db1e      	blt.n	1a0034d8 <_strtoul_l.isra.0+0xae>
1a00349a:	4282      	cmp	r2, r0
1a00349c:	d31c      	bcc.n	1a0034d8 <_strtoul_l.isra.0+0xae>
1a00349e:	d101      	bne.n	1a0034a4 <_strtoul_l.isra.0+0x7a>
1a0034a0:	45a4      	cmp	ip, r4
1a0034a2:	db19      	blt.n	1a0034d8 <_strtoul_l.isra.0+0xae>
1a0034a4:	fb00 4006 	mla	r0, r0, r6, r4
1a0034a8:	2301      	movs	r3, #1
1a0034aa:	f815 4b01 	ldrb.w	r4, [r5], #1
1a0034ae:	e7eb      	b.n	1a003488 <_strtoul_l.isra.0+0x5e>
1a0034b0:	462f      	mov	r7, r5
1a0034b2:	e7c1      	b.n	1a003438 <_strtoul_l.isra.0+0xe>
1a0034b4:	2c2b      	cmp	r4, #43	; 0x2b
1a0034b6:	bf04      	itt	eq
1a0034b8:	1cbd      	addeq	r5, r7, #2
1a0034ba:	787c      	ldrbeq	r4, [r7, #1]
1a0034bc:	4619      	mov	r1, r3
1a0034be:	e7cb      	b.n	1a003458 <_strtoul_l.isra.0+0x2e>
1a0034c0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
1a0034c4:	2f19      	cmp	r7, #25
1a0034c6:	d801      	bhi.n	1a0034cc <_strtoul_l.isra.0+0xa2>
1a0034c8:	3c37      	subs	r4, #55	; 0x37
1a0034ca:	e7e2      	b.n	1a003492 <_strtoul_l.isra.0+0x68>
1a0034cc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
1a0034d0:	2f19      	cmp	r7, #25
1a0034d2:	d804      	bhi.n	1a0034de <_strtoul_l.isra.0+0xb4>
1a0034d4:	3c57      	subs	r4, #87	; 0x57
1a0034d6:	e7dc      	b.n	1a003492 <_strtoul_l.isra.0+0x68>
1a0034d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0034dc:	e7e5      	b.n	1a0034aa <_strtoul_l.isra.0+0x80>
1a0034de:	2b00      	cmp	r3, #0
1a0034e0:	da09      	bge.n	1a0034f6 <_strtoul_l.isra.0+0xcc>
1a0034e2:	2322      	movs	r3, #34	; 0x22
1a0034e4:	f8c8 3000 	str.w	r3, [r8]
1a0034e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0034ec:	f1ba 0f00 	cmp.w	sl, #0
1a0034f0:	d107      	bne.n	1a003502 <_strtoul_l.isra.0+0xd8>
1a0034f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0034f6:	b101      	cbz	r1, 1a0034fa <_strtoul_l.isra.0+0xd0>
1a0034f8:	4240      	negs	r0, r0
1a0034fa:	f1ba 0f00 	cmp.w	sl, #0
1a0034fe:	d0f8      	beq.n	1a0034f2 <_strtoul_l.isra.0+0xc8>
1a003500:	b10b      	cbz	r3, 1a003506 <_strtoul_l.isra.0+0xdc>
1a003502:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
1a003506:	f8ca 9000 	str.w	r9, [sl]
1a00350a:	e7f2      	b.n	1a0034f2 <_strtoul_l.isra.0+0xc8>
1a00350c:	2430      	movs	r4, #48	; 0x30
1a00350e:	2e00      	cmp	r6, #0
1a003510:	d1b0      	bne.n	1a003474 <_strtoul_l.isra.0+0x4a>
1a003512:	2608      	movs	r6, #8
1a003514:	e7ae      	b.n	1a003474 <_strtoul_l.isra.0+0x4a>
1a003516:	2c30      	cmp	r4, #48	; 0x30
1a003518:	d0a4      	beq.n	1a003464 <_strtoul_l.isra.0+0x3a>
1a00351a:	260a      	movs	r6, #10
1a00351c:	e7aa      	b.n	1a003474 <_strtoul_l.isra.0+0x4a>
1a00351e:	Address 0x000000001a00351e is out of bounds.


1a003520 <_strtoul_r>:
1a003520:	b537      	push	{r0, r1, r2, r4, r5, lr}
1a003522:	4c06      	ldr	r4, [pc, #24]	; (1a00353c <_strtoul_r+0x1c>)
1a003524:	4d06      	ldr	r5, [pc, #24]	; (1a003540 <_strtoul_r+0x20>)
1a003526:	6824      	ldr	r4, [r4, #0]
1a003528:	6a24      	ldr	r4, [r4, #32]
1a00352a:	2c00      	cmp	r4, #0
1a00352c:	bf08      	it	eq
1a00352e:	462c      	moveq	r4, r5
1a003530:	9400      	str	r4, [sp, #0]
1a003532:	f7ff ff7a 	bl	1a00342a <_strtoul_l.isra.0>
1a003536:	b003      	add	sp, #12
1a003538:	bd30      	pop	{r4, r5, pc}
1a00353a:	bf00      	nop
1a00353c:	10000048 	.word	0x10000048
1a003540:	100000ac 	.word	0x100000ac

1a003544 <__submore>:
1a003544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003548:	460c      	mov	r4, r1
1a00354a:	6b49      	ldr	r1, [r1, #52]	; 0x34
1a00354c:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a003550:	4299      	cmp	r1, r3
1a003552:	d11d      	bne.n	1a003590 <__submore+0x4c>
1a003554:	f44f 6180 	mov.w	r1, #1024	; 0x400
1a003558:	f7ff f86a 	bl	1a002630 <_malloc_r>
1a00355c:	b918      	cbnz	r0, 1a003566 <__submore+0x22>
1a00355e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003566:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a00356a:	63a3      	str	r3, [r4, #56]	; 0x38
1a00356c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
1a003570:	6360      	str	r0, [r4, #52]	; 0x34
1a003572:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
1a003576:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a00357a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
1a00357e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a003582:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
1a003586:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
1a00358a:	6020      	str	r0, [r4, #0]
1a00358c:	2000      	movs	r0, #0
1a00358e:	e7e8      	b.n	1a003562 <__submore+0x1e>
1a003590:	6ba6      	ldr	r6, [r4, #56]	; 0x38
1a003592:	0077      	lsls	r7, r6, #1
1a003594:	463a      	mov	r2, r7
1a003596:	f000 f8e5 	bl	1a003764 <_realloc_r>
1a00359a:	4605      	mov	r5, r0
1a00359c:	2800      	cmp	r0, #0
1a00359e:	d0de      	beq.n	1a00355e <__submore+0x1a>
1a0035a0:	eb00 0806 	add.w	r8, r0, r6
1a0035a4:	4601      	mov	r1, r0
1a0035a6:	4632      	mov	r2, r6
1a0035a8:	4640      	mov	r0, r8
1a0035aa:	f7fe fbb7 	bl	1a001d1c <memcpy>
1a0035ae:	f8c4 8000 	str.w	r8, [r4]
1a0035b2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
1a0035b6:	e7e9      	b.n	1a00358c <__submore+0x48>

1a0035b8 <_ungetc_r>:
1a0035b8:	1c4b      	adds	r3, r1, #1
1a0035ba:	b570      	push	{r4, r5, r6, lr}
1a0035bc:	4606      	mov	r6, r0
1a0035be:	460d      	mov	r5, r1
1a0035c0:	4614      	mov	r4, r2
1a0035c2:	d103      	bne.n	1a0035cc <_ungetc_r+0x14>
1a0035c4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a0035c8:	4628      	mov	r0, r5
1a0035ca:	bd70      	pop	{r4, r5, r6, pc}
1a0035cc:	b118      	cbz	r0, 1a0035d6 <_ungetc_r+0x1e>
1a0035ce:	6983      	ldr	r3, [r0, #24]
1a0035d0:	b90b      	cbnz	r3, 1a0035d6 <_ungetc_r+0x1e>
1a0035d2:	f7fe feb1 	bl	1a002338 <__sinit>
1a0035d6:	4b2e      	ldr	r3, [pc, #184]	; (1a003690 <_ungetc_r+0xd8>)
1a0035d8:	429c      	cmp	r4, r3
1a0035da:	d12c      	bne.n	1a003636 <_ungetc_r+0x7e>
1a0035dc:	6874      	ldr	r4, [r6, #4]
1a0035de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0035e2:	f023 0320 	bic.w	r3, r3, #32
1a0035e6:	81a3      	strh	r3, [r4, #12]
1a0035e8:	b29b      	uxth	r3, r3
1a0035ea:	0759      	lsls	r1, r3, #29
1a0035ec:	d413      	bmi.n	1a003616 <_ungetc_r+0x5e>
1a0035ee:	06da      	lsls	r2, r3, #27
1a0035f0:	d5e8      	bpl.n	1a0035c4 <_ungetc_r+0xc>
1a0035f2:	071b      	lsls	r3, r3, #28
1a0035f4:	d50b      	bpl.n	1a00360e <_ungetc_r+0x56>
1a0035f6:	4621      	mov	r1, r4
1a0035f8:	4630      	mov	r0, r6
1a0035fa:	f7fe fe21 	bl	1a002240 <_fflush_r>
1a0035fe:	2800      	cmp	r0, #0
1a003600:	d1e0      	bne.n	1a0035c4 <_ungetc_r+0xc>
1a003602:	89a3      	ldrh	r3, [r4, #12]
1a003604:	60a0      	str	r0, [r4, #8]
1a003606:	f023 0308 	bic.w	r3, r3, #8
1a00360a:	81a3      	strh	r3, [r4, #12]
1a00360c:	61a0      	str	r0, [r4, #24]
1a00360e:	89a3      	ldrh	r3, [r4, #12]
1a003610:	f043 0304 	orr.w	r3, r3, #4
1a003614:	81a3      	strh	r3, [r4, #12]
1a003616:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a003618:	6862      	ldr	r2, [r4, #4]
1a00361a:	b2ed      	uxtb	r5, r5
1a00361c:	b1e3      	cbz	r3, 1a003658 <_ungetc_r+0xa0>
1a00361e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a003620:	4293      	cmp	r3, r2
1a003622:	dd12      	ble.n	1a00364a <_ungetc_r+0x92>
1a003624:	6823      	ldr	r3, [r4, #0]
1a003626:	1e5a      	subs	r2, r3, #1
1a003628:	6022      	str	r2, [r4, #0]
1a00362a:	f803 5c01 	strb.w	r5, [r3, #-1]
1a00362e:	6863      	ldr	r3, [r4, #4]
1a003630:	3301      	adds	r3, #1
1a003632:	6063      	str	r3, [r4, #4]
1a003634:	e7c8      	b.n	1a0035c8 <_ungetc_r+0x10>
1a003636:	4b17      	ldr	r3, [pc, #92]	; (1a003694 <_ungetc_r+0xdc>)
1a003638:	429c      	cmp	r4, r3
1a00363a:	d101      	bne.n	1a003640 <_ungetc_r+0x88>
1a00363c:	68b4      	ldr	r4, [r6, #8]
1a00363e:	e7ce      	b.n	1a0035de <_ungetc_r+0x26>
1a003640:	4b15      	ldr	r3, [pc, #84]	; (1a003698 <_ungetc_r+0xe0>)
1a003642:	429c      	cmp	r4, r3
1a003644:	bf08      	it	eq
1a003646:	68f4      	ldreq	r4, [r6, #12]
1a003648:	e7c9      	b.n	1a0035de <_ungetc_r+0x26>
1a00364a:	4621      	mov	r1, r4
1a00364c:	4630      	mov	r0, r6
1a00364e:	f7ff ff79 	bl	1a003544 <__submore>
1a003652:	2800      	cmp	r0, #0
1a003654:	d0e6      	beq.n	1a003624 <_ungetc_r+0x6c>
1a003656:	e7b5      	b.n	1a0035c4 <_ungetc_r+0xc>
1a003658:	6921      	ldr	r1, [r4, #16]
1a00365a:	6823      	ldr	r3, [r4, #0]
1a00365c:	b151      	cbz	r1, 1a003674 <_ungetc_r+0xbc>
1a00365e:	4299      	cmp	r1, r3
1a003660:	d208      	bcs.n	1a003674 <_ungetc_r+0xbc>
1a003662:	f813 1c01 	ldrb.w	r1, [r3, #-1]
1a003666:	42a9      	cmp	r1, r5
1a003668:	d104      	bne.n	1a003674 <_ungetc_r+0xbc>
1a00366a:	3b01      	subs	r3, #1
1a00366c:	3201      	adds	r2, #1
1a00366e:	6023      	str	r3, [r4, #0]
1a003670:	6062      	str	r2, [r4, #4]
1a003672:	e7a9      	b.n	1a0035c8 <_ungetc_r+0x10>
1a003674:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
1a003678:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a00367c:	6363      	str	r3, [r4, #52]	; 0x34
1a00367e:	2303      	movs	r3, #3
1a003680:	63a3      	str	r3, [r4, #56]	; 0x38
1a003682:	4623      	mov	r3, r4
1a003684:	f803 5f46 	strb.w	r5, [r3, #70]!
1a003688:	6023      	str	r3, [r4, #0]
1a00368a:	2301      	movs	r3, #1
1a00368c:	e7d1      	b.n	1a003632 <_ungetc_r+0x7a>
1a00368e:	bf00      	nop
1a003690:	1a003b6c 	.word	0x1a003b6c
1a003694:	1a003b8c 	.word	0x1a003b8c
1a003698:	1a003b4c 	.word	0x1a003b4c

1a00369c <__ascii_wctomb>:
1a00369c:	b149      	cbz	r1, 1a0036b2 <__ascii_wctomb+0x16>
1a00369e:	2aff      	cmp	r2, #255	; 0xff
1a0036a0:	bf85      	ittet	hi
1a0036a2:	238a      	movhi	r3, #138	; 0x8a
1a0036a4:	6003      	strhi	r3, [r0, #0]
1a0036a6:	700a      	strbls	r2, [r1, #0]
1a0036a8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
1a0036ac:	bf98      	it	ls
1a0036ae:	2001      	movls	r0, #1
1a0036b0:	4770      	bx	lr
1a0036b2:	4608      	mov	r0, r1
1a0036b4:	4770      	bx	lr
1a0036b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0036ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0036be:	Address 0x000000001a0036be is out of bounds.


1a0036c0 <memchr>:
1a0036c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0036c4:	2a10      	cmp	r2, #16
1a0036c6:	db2b      	blt.n	1a003720 <memchr+0x60>
1a0036c8:	f010 0f07 	tst.w	r0, #7
1a0036cc:	d008      	beq.n	1a0036e0 <memchr+0x20>
1a0036ce:	f810 3b01 	ldrb.w	r3, [r0], #1
1a0036d2:	3a01      	subs	r2, #1
1a0036d4:	428b      	cmp	r3, r1
1a0036d6:	d02d      	beq.n	1a003734 <memchr+0x74>
1a0036d8:	f010 0f07 	tst.w	r0, #7
1a0036dc:	b342      	cbz	r2, 1a003730 <memchr+0x70>
1a0036de:	d1f6      	bne.n	1a0036ce <memchr+0xe>
1a0036e0:	b4f0      	push	{r4, r5, r6, r7}
1a0036e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a0036e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a0036ea:	f022 0407 	bic.w	r4, r2, #7
1a0036ee:	f07f 0700 	mvns.w	r7, #0
1a0036f2:	2300      	movs	r3, #0
1a0036f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a0036f8:	3c08      	subs	r4, #8
1a0036fa:	ea85 0501 	eor.w	r5, r5, r1
1a0036fe:	ea86 0601 	eor.w	r6, r6, r1
1a003702:	fa85 f547 	uadd8	r5, r5, r7
1a003706:	faa3 f587 	sel	r5, r3, r7
1a00370a:	fa86 f647 	uadd8	r6, r6, r7
1a00370e:	faa5 f687 	sel	r6, r5, r7
1a003712:	b98e      	cbnz	r6, 1a003738 <memchr+0x78>
1a003714:	d1ee      	bne.n	1a0036f4 <memchr+0x34>
1a003716:	bcf0      	pop	{r4, r5, r6, r7}
1a003718:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a00371c:	f002 0207 	and.w	r2, r2, #7
1a003720:	b132      	cbz	r2, 1a003730 <memchr+0x70>
1a003722:	f810 3b01 	ldrb.w	r3, [r0], #1
1a003726:	3a01      	subs	r2, #1
1a003728:	ea83 0301 	eor.w	r3, r3, r1
1a00372c:	b113      	cbz	r3, 1a003734 <memchr+0x74>
1a00372e:	d1f8      	bne.n	1a003722 <memchr+0x62>
1a003730:	2000      	movs	r0, #0
1a003732:	4770      	bx	lr
1a003734:	3801      	subs	r0, #1
1a003736:	4770      	bx	lr
1a003738:	2d00      	cmp	r5, #0
1a00373a:	bf06      	itte	eq
1a00373c:	4635      	moveq	r5, r6
1a00373e:	3803      	subeq	r0, #3
1a003740:	3807      	subne	r0, #7
1a003742:	f015 0f01 	tst.w	r5, #1
1a003746:	d107      	bne.n	1a003758 <memchr+0x98>
1a003748:	3001      	adds	r0, #1
1a00374a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a00374e:	bf02      	ittt	eq
1a003750:	3001      	addeq	r0, #1
1a003752:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a003756:	3001      	addeq	r0, #1
1a003758:	bcf0      	pop	{r4, r5, r6, r7}
1a00375a:	3801      	subs	r0, #1
1a00375c:	4770      	bx	lr
1a00375e:	bf00      	nop

1a003760 <__malloc_lock>:
1a003760:	4770      	bx	lr

1a003762 <__malloc_unlock>:
1a003762:	4770      	bx	lr

1a003764 <_realloc_r>:
1a003764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003766:	4607      	mov	r7, r0
1a003768:	4614      	mov	r4, r2
1a00376a:	460e      	mov	r6, r1
1a00376c:	b921      	cbnz	r1, 1a003778 <_realloc_r+0x14>
1a00376e:	4611      	mov	r1, r2
1a003770:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a003774:	f7fe bf5c 	b.w	1a002630 <_malloc_r>
1a003778:	b922      	cbnz	r2, 1a003784 <_realloc_r+0x20>
1a00377a:	f7fe ff0b 	bl	1a002594 <_free_r>
1a00377e:	4625      	mov	r5, r4
1a003780:	4628      	mov	r0, r5
1a003782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003784:	f000 f814 	bl	1a0037b0 <_malloc_usable_size_r>
1a003788:	42a0      	cmp	r0, r4
1a00378a:	d20f      	bcs.n	1a0037ac <_realloc_r+0x48>
1a00378c:	4621      	mov	r1, r4
1a00378e:	4638      	mov	r0, r7
1a003790:	f7fe ff4e 	bl	1a002630 <_malloc_r>
1a003794:	4605      	mov	r5, r0
1a003796:	2800      	cmp	r0, #0
1a003798:	d0f2      	beq.n	1a003780 <_realloc_r+0x1c>
1a00379a:	4631      	mov	r1, r6
1a00379c:	4622      	mov	r2, r4
1a00379e:	f7fe fabd 	bl	1a001d1c <memcpy>
1a0037a2:	4631      	mov	r1, r6
1a0037a4:	4638      	mov	r0, r7
1a0037a6:	f7fe fef5 	bl	1a002594 <_free_r>
1a0037aa:	e7e9      	b.n	1a003780 <_realloc_r+0x1c>
1a0037ac:	4635      	mov	r5, r6
1a0037ae:	e7e7      	b.n	1a003780 <_realloc_r+0x1c>

1a0037b0 <_malloc_usable_size_r>:
1a0037b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a0037b4:	1f18      	subs	r0, r3, #4
1a0037b6:	2b00      	cmp	r3, #0
1a0037b8:	bfbc      	itt	lt
1a0037ba:	580b      	ldrlt	r3, [r1, r0]
1a0037bc:	18c0      	addlt	r0, r0, r3
1a0037be:	4770      	bx	lr
1a0037c0:	7778797a 	.word	0x7778797a
1a0037c4:	73747576 	.word	0x73747576
1a0037c8:	6f707172 	.word	0x6f707172
1a0037cc:	6b6c6d6e 	.word	0x6b6c6d6e
1a0037d0:	6768696a 	.word	0x6768696a
1a0037d4:	63646566 	.word	0x63646566
1a0037d8:	38396162 	.word	0x38396162
1a0037dc:	34353637 	.word	0x34353637
1a0037e0:	30313233 	.word	0x30313233
1a0037e4:	34333231 	.word	0x34333231
1a0037e8:	38373635 	.word	0x38373635
1a0037ec:	63626139 	.word	0x63626139
1a0037f0:	67666564 	.word	0x67666564
1a0037f4:	6b6a6968 	.word	0x6b6a6968
1a0037f8:	6f6e6d6c 	.word	0x6f6e6d6c
1a0037fc:	73727170 	.word	0x73727170
1a003800:	77767574 	.word	0x77767574
1a003804:	007a7978 	.word	0x007a7978
1a003808:	554e454d 	.word	0x554e454d
1a00380c:	49525020 	.word	0x49525020
1a003810:	5049434e 	.word	0x5049434e
1a003814:	000d4c41 	.word	0x000d4c41
1a003818:	20293128 	.word	0x20293128
1a00381c:	6964654d 	.word	0x6964654d
1a003820:	61432072 	.word	0x61432072
1a003824:	0d6f706d 	.word	0x0d6f706d
1a003828:	00000000 	.word	0x00000000
1a00382c:	20293228 	.word	0x20293228
1a003830:	0d2d2d2d 	.word	0x0d2d2d2d
1a003834:	00000000 	.word	0x00000000
1a003838:	20293328 	.word	0x20293328
1a00383c:	202d2d2d 	.word	0x202d2d2d
1a003840:	0000000d 	.word	0x0000000d
1a003844:	00007325 	.word	0x00007325
1a003848:	76206c45 	.word	0x76206c45
1a00384c:	726f6c61 	.word	0x726f6c61
1a003850:	676e6920 	.word	0x676e6920
1a003854:	61736572 	.word	0x61736572
1a003858:	203a6f64 	.word	0x203a6f64
1a00385c:	0a0d7325 	.word	0x0a0d7325
1a003860:	00000000 	.word	0x00000000
1a003864:	45434e45 	.word	0x45434e45
1a003868:	5245444e 	.word	0x5245444e
1a00386c:	4e4f5320 	.word	0x4e4f5320
1a003870:	2e2e4144 	.word	0x2e2e4144
1a003874:	000d202e 	.word	0x000d202e
1a003878:	41545345 	.word	0x41545345
1a00387c:	44204f44 	.word	0x44204f44
1a003880:	4f532045 	.word	0x4f532045
1a003884:	3a41444e 	.word	0x3a41444e
1a003888:	0d4e4f20 	.word	0x0d4e4f20
1a00388c:	00000000 	.word	0x00000000
1a003890:	4944454d 	.word	0x4944454d
1a003894:	41432052 	.word	0x41432052
1a003898:	2e4f504d 	.word	0x2e4f504d
1a00389c:	0d202e2e 	.word	0x0d202e2e
1a0038a0:	ffffff00 	.word	0xffffff00

1a0038a4 <ExtRateIn>:
1a0038a4:	00000000                                ....

1a0038a8 <GpioButtons>:
1a0038a8:	08000400 09010900                       ........

1a0038b0 <GpioLeds>:
1a0038b0:	01050005 0e000205 0c010b01              ............

1a0038bc <GpioPorts>:
1a0038bc:	03030003 0f050403 05031005 07030603     ................
1a0038cc:	ffff0802                                ....

1a0038d0 <OscRateIn>:
1a0038d0:	00b71b00                                ....

1a0038d4 <InitClkStates>:
1a0038d4:	01010f01                                ....

1a0038d8 <pinmuxing>:
1a0038d8:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a0038e8:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a0038f8:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a003908:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a003918:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a003928:	00d50301 00d50401 00160107 00560207     ..............V.
1a003938:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a003948:	00570206                                ..W.

1a00394c <UART_BClock>:
1a00394c:	01a201c2 01620182                       ......b.

1a003954 <UART_PClock>:
1a003954:	00820081 00a200a1 08040201 0f0f0f03     ................
1a003964:	000000ff                                ....

1a003968 <periph_to_base>:
1a003968:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a003978:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a003988:	000100e0 01000100 01200003 00060120     .......... . ...
1a003998:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a0039a8:	01820013 00120182 01a201a2 01c20011     ................
1a0039b8:	001001c2 01e201e2 0202000f 000e0202     ................
1a0039c8:	02220222 0223000d 001c0223              "."...#.#...

1a0039d4 <InitClkStates>:
1a0039d4:	00010100 00010909 0001090a 01010701     ................
1a0039e4:	00010902 00010906 0101090c 0001090d     ................
1a0039f4:	0001090e 0001090f 00010910 00010911     ................
1a003a04:	00010912 00010913 00011114 00011119     ................
1a003a14:	0001111a 0001111b                       ........

1a003a1c <lpcUarts>:
1a003a1c:	40081000 06020406 00180205 40081000     ...@...........@
1a003a2c:	09070509 00180706 40082000 00000000     ......... .@....
1a003a3c:	00190000 400c1000 07060107 001a0602     .......@........
1a003a4c:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a003a5c:	02020302 001b0204                       ........

1a003a64 <gpioPinsInit>:
1a003a64:	02000104 00050701 05010d03 04080100     ................
1a003a74:	02020002 02000304 00000403 04070002     ................
1a003a84:	030c0300 09050402 05040103 04030208     ................
1a003a94:	04020305 06040504 0802000c 03000b06     ................
1a003aa4:	00090607 07060503 060f0504 03030004     ................
1a003ab4:	02000404 00050404 06040502 04060200     ................
1a003ac4:	0c050408 05040a04 0003010e 14010a00     ................
1a003ad4:	010f0000 0d000012 00001101 0010010c     ................
1a003ae4:	07070300 000f0300 01000001 00000000     ................
1a003af4:	000a0600 08060603 06100504 04030005     ................
1a003b04:	03000106 04090400 04010d05 010b0000     ................
1a003b14:	0200000f 00000001 00010104 02010800     ................
1a003b24:	01090000 09010006 05040002 04010200     ................
1a003b34:	02020105 02020504 0e00000a 01000b02     ................
1a003b44:	000c020b ffff0c01                       ........

1a003b4c <__sf_fake_stderr>:
	...

1a003b6c <__sf_fake_stdin>:
	...

1a003b8c <__sf_fake_stdout>:
	...

1a003bac <_global_impure_ptr>:
1a003bac:	1000004c 4f500043 00584953 2d23002e     L...C.POSIX...#-
1a003bbc:	00202b30 004c6c68 45676665 30004746     0+ .hlL.efgEFG.0
1a003bcc:	34333231 38373635 43424139 00464544     123456789ABCDEF.
1a003bdc:	33323130 37363534 62613938 66656463     0123456789abcdef
1a003bec:	ffffff00 1a003c0e 1a003c11 1a003c14     .....<...<...<..
1a003bfc:	61462d41 3938662d 33323130 37363534     A-Fa-f8901234567
1a003c0c:	2d2b005d 00303000                        ].+-.00.xX.

1a003c17 <_ctype_>:
1a003c17:	20202000 20202020 28282020 20282828     .         ((((( 
1a003c27:	20202020 20202020 20202020 20202020                     
1a003c37:	10108820 10101010 10101010 10101010      ...............
1a003c47:	04040410 04040404 10040404 10101010     ................
1a003c57:	41411010 41414141 01010101 01010101     ..AAAAAA........
1a003c67:	01010101 01010101 01010101 10101010     ................
1a003c77:	42421010 42424242 02020202 02020202     ..BBBBBB........
1a003c87:	02020202 02020202 02020202 10101010     ................
1a003c97:	00000020 00000000 00000000 00000000      ...............
	...
