
_programs/TestUart/out/TestUart.elf:     file format elf32-littlearm
_programs/TestUart/out/TestUart.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000615

Program Header:
0x70000001 off    0x00013d3c vaddr 0x1a003d3c paddr 0x1a003d3c align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x0000024c flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00003d44 memsz 0x00003d44 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a003d44 align 2**16
         filesz 0x00000218 memsz 0x00000218 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d38  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000218  10000000  1a003d44  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020218  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020218  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020218  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020218  2**2
                  CONTENTS
  6 .bss          00000034  10000218  10000218  00000218  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020218  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020218  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020218  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020218  2**2
                  CONTENTS
 11 .init_array   00000004  1a003d38  1a003d38  00013d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a003d3c  1a003d3c  00013d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020218  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020218  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020218  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020218  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020218  2**2
                  CONTENTS
 18 .noinit       00000000  1000024c  1000024c  00020218  2**2
                  CONTENTS
 19 .debug_info   0001a354  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00003ad2  00000000  00000000  0003a56c  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00006c49  00000000  00000000  0003e03e  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000950  00000000  00000000  00044c87  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000940  00000000  00000000  000455d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000c090  00000000  00000000  00045f17  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0000bec3  00000000  00000000  00051fa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002769d  00000000  00000000  0005de6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  00085507  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  00085586  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00002138  00000000  00000000  000855c0  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000218 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a003d38 l    d  .init_array	00000000 .init_array
1a003d3c l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
1000024c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 TestUart.c
00000000 l    df *ABS*	00000000 system.c
10000218 l     O .bss	00000004 heap_end.5778
00000000 l    df *ABS*	00000000 board.c
1a000768 l     F .text	00000044 Board_LED_Init
1a0007ac l     F .text	00000040 Board_TEC_Init
1a0007ec l     F .text	00000040 Board_GPIO_Init
1a00082c l     F .text	00000030 Board_ADC_Init
1a00085c l     F .text	00000038 Board_SPI_Init
1a000894 l     F .text	00000024 Board_I2C_Init
1a0038c8 l     O .text	00000008 GpioButtons
1a0038d0 l     O .text	0000000c GpioLeds
1a0038dc l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0038f4 l     O .text	00000004 InitClkStates
1a0038f8 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000a84 l     F .text	0000002c Chip_UART_GetIndex
1a00396c l     O .text	00000008 UART_BClock
1a003974 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000c2c l     F .text	00000014 Chip_ADC_GetClockIndex
1a000c40 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000cf4 l     F .text	000000a4 pll_calc_divs
1a000d98 l     F .text	0000010c pll_get_frac
1a000ea4 l     F .text	0000004c Chip_Clock_FindBaseClock
1a001118 l     F .text	00000022 Chip_Clock_GetDivRate
1000021c l     O .bss	00000008 audio_usb_pll_freq
1a003988 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0039f4 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0013f0 l     F .text	00000014 Chip_SSP_GetClockIndex
1a001404 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000038 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a003a3c l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_tick.c
10000224 l     O .bss	00000004 callBackFuncParams
10000228 l     O .bss	00000008 tickCounter
10000230 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0016a0 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10000234 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 strtol.c
1a001e88 l     F .text	000000f6 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a0022d4 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a002700 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 nano-vfscanf.c
00000000 l    df *ABS*	00000000 nano-vfscanf_i.c
00000000 l    df *ABS*	00000000 refill.c
1a003230 l     F .text	00000012 lflush
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strtoul.c
1a003446 l     F .text	000000f4 _strtoul_l.isra.0
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 impure.c
1000004c l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 
1a003d3c l       .init_array	00000000 __init_array_end
1a003d38 l       .bss_RAM5	00000000 __preinit_array_end
1a003d38 l       .init_array	00000000 __init_array_start
1a003d38 l       .bss_RAM5	00000000 __preinit_array_start
1a0037d0 g     F .text	00000010 _malloc_usable_size_r
1a002f80 g     F .text	000000c6 _scanf_chars
1a000f3c g     F .text	0000001c Chip_Clock_GetDividerSource
1a0006b4 g     F .text	00000012 _isatty_r
1a001d90 g     F .text	000000b8 _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a001528 g     F .text	00000014 uartRxRead
1a0006c6 g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a001d60 g     F .text	00000030 printf
1a00094e g     F .text	00000008 __stdio_init
1a00341a g     F .text	00000024 __sseek
1a002354 g     F .text	00000060 __sinit
1a001fd0 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a002328 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a000ce6 g     F .text	0000000c Chip_ADC_SetResolution
1a003782 g     F .text	00000002 __malloc_unlock
1a00166c g     F .text	00000034 SysTick_Handler
1a000b04 g     F .text	00000040 Chip_UART_SetBaud
1a000610  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0008f0 g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a0024a8 g     F .text	0000001c __locale_ctype_ptr
1a000178  w    F .text	00000002 NMI_Handler
1a003d44 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a0006aa g     F .text	0000000a _fstat_r
53ff727a g       *ABS*	00000000 __valid_user_code_checksum
1a003048 g     F .text	000001e8 _scanf_i
1a003d44 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a002f30 g     F .text	00000050 _vfiscanf_r
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a0011ba g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a001d38 g     F .text	00000016 memcpy
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a00231c g     F .text	0000000c _cleanup_r
1a0019f0 g     F .text	00000000 .hidden __aeabi_uldivmod
1000024c g       .noinit	00000000 _noinit
1a001e48 g     F .text	00000010 puts
10000244 g     O .bss	00000004 SystemCoreClock
1a002f30 g     F .text	00000050 _vfscanf_r
1a001e58 g     F .text	00000030 iscanf
1a000ab0 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a001238 g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
10000240 g     O .bss	00000001 flag
1a000990 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a000300 g     F .text	00000068 itoa
1a001a20 g     F .text	000002cc .hidden __udivmoddi4
1a000748 g     F .text	00000020 _sbrk_r
1a0038c4 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a0006d0 g     F .text	0000004e _read_r
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a0022b0 g     F .text	00000024 fflush
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a0014f8 g     F .text	00000018 uartRxReady
1a003d3c g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a003bcc g     O .text	00000004 _global_impure_ptr
1a003784 g     F .text	0000004c _realloc_r
1a001cf0 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a00090c g     F .text	00000030 Board_Init
1a00069e  w    F .text	00000002 _init
10000241 g     O .bss	00000001 state
1a000114 g       .text	00000000 __data_section_table
1a001fa4 g     F .text	0000002c strtol
1a0001ba  w    F .text	00000002 RTC_IRQHandler
1000024c g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000614 g     F .text	00000088 Reset_Handler
1a0015f0 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a000a4c g     F .text	00000038 Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a000ef0 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a003b6c g     O .text	00000020 __sf_fake_stderr
1a000a28 g     F .text	00000024 Chip_I2C_Init
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a0010ac g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a003a84 g     O .text	000000e6 gpioPinsInit
1a00141c g     F .text	00000012 Chip_SSP_SetClockRate
1a001912 g     F .text	00000016 gpioToggle
1a00272e g     F .text	00000024 __sfputs_r
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a0036e0 g     F .text	00000000 memchr
1a0025b0 g     F .text	0000009c _free_r
1a001194 g     F .text	00000026 Chip_Clock_GetBaseClock
10000218 g       .bss	00000000 _bss
10000242 g     O .bss	00000001 dato
1a000cb4 g     F .text	00000032 Chip_ADC_SetSampleRate
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a00142e g     F .text	0000003e Chip_SSP_SetBitRate
10000243 g     O .bss	00000001 flagdat
1a0013ec g     F .text	00000002 Chip_GPIO_Init
1a0038f0 g     O .text	00000004 OscRateIn
1a001550 g     F .text	0000007c uartInit
1000024c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a00353c g     F .text	00000024 _strtoul_r
1a000178 g       .text	00000000 __bss_section_table_end
1a0006a0 g     F .text	0000000a _close_r
1a0016d4 g     F .text	00000194 gpioInit
1a002074 g     F .text	000000dc __swsetup_r
1a001cec  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0023b4 g     F .text	00000078 __sfp
1a0033c0 g     F .text	00000022 __sread
1a001928 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a003780 g     F .text	00000002 __malloc_lock
1a0008dc g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a00225c g     F .text	00000054 _fflush_r
1a003b8c g     O .text	00000020 __sf_fake_stdin
1a000f58 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a001d4e g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000368 g     F .text	000002a8 main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a00343e g     F .text	00000008 __sclose
1a001f80 g     F .text	00000024 _strtol_r
1a00264c g     F .text	000000b4 _malloc_r
1a0036b8 g     F .text	0000001a __ascii_wctomb
1a001510 g     F .text	00000018 uartTxReady
1a003560 g     F .text	00000074 __submore
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a0011c8 g     F .text	0000003c Chip_Clock_EnableOpts
1a000946 g     F .text	00000008 __stdio_getchar
1a00242c g     F .text	00000038 _fwalk
1a000f74 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a00102c g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0014a4 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0019b8 g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a001868 g     F .text	00000056 gpioWrite
1a00069c  w    F .text	00000002 _fini
1a001d60 g     F .text	00000030 iprintf
1a002c90 g     F .text	000002a0 __svfiscanf_r
1a000c74 g     F .text	00000040 Chip_ADC_Init
10000248 g     O .bss	00000004 g_pUsbApi
1a000958 g     F .text	00000038 Board_SetupMuxing
1a000b44 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a0015cc g     F .text	0000000c tickRead
1a00071e g     F .text	00000028 _write_r
10000040 g     O .data	00000008 tickRateMS
1a001e58 g     F .text	00000030 scanf
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a002980 g     F .text	000000ea _printf_common
10000048 g     O .data	00000004 _impure_ptr
1a002150 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a00153c g     F .text	00000014 uartTxWrite
1a003244 g     F .text	00000118 __srefill_r
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a00258c g     F .text	00000024 __ascii_mbtowc
10000000 g       .data	00000000 _data
1000024c g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a00146c g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0024c4 g     F .text	00000048 __swhatbuf_r
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a0008b8 g     F .text	00000024 Board_Debug_Init
1a00093c g     F .text	0000000a __stdio_putchar
10000218 g       .data	00000000 _edata
1a000a08 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a001298 g     F .text	00000154 Chip_SetupCoreClock
1a0033e2 g     F .text	00000038 __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a002754 g     F .text	0000022c _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a002464 g     F .text	0000003c _fwalk_reent
1a001284 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a003bac g     O .text	00000020 __sf_fake_stdout
1a00335c g     F .text	00000064 __sccl
1a003c37 g     O .text	00000101 _ctype_
1a001cec  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a00250c g     F .text	00000080 __smakebuf_r
1a002a6c g     F .text	00000224 _printf_i
1a0024a0 g     F .text	00000006 __locale_ctype_ptr_l
1a001204 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1000023c g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a0018be g     F .text	00000054 gpioRead
1a001944 g     F .text	00000074 boardInit
10000238 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a002754 g     F .text	0000022c _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a002c90 g     F .text	000002a0 __svfscanf_r
1a0035d4 g     F .text	000000e4 _ungetc_r
1a0015d8 g     F .text	00000018 tickPowerSet
100000ac g     O .data	0000016c __global_locale
1a00113c g     F .text	00000058 Chip_Clock_SetBaseClock
1a0014dc g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a0009fc g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 15 06 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 7a 72 ff 53     }...........zr.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	6d 16 00 1a                                         m...

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	29 19 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     )...............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a003d44 	.word	0x1a003d44
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000218 	.word	0x00000218
1a000120:	1a003d44 	.word	0x1a003d44
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a003d44 	.word	0x1a003d44
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a003d44 	.word	0x1a003d44
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a003d44 	.word	0x1a003d44
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000218 	.word	0x10000218
1a000154:	00000034 	.word	0x00000034
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <itoa>:

/*=====[Definitions of private global variables]=============================*/

char* itoa(int value, char* result, int base) {
   // check that the base if valid
   if (base < 2 || base > 36) { *result = '\0'; return result; }
1a000300:	1e93      	subs	r3, r2, #2
1a000302:	2b22      	cmp	r3, #34	; 0x22
1a000304:	d802      	bhi.n	1a00030c <itoa+0xc>
char* itoa(int value, char* result, int base) {
1a000306:	b4f0      	push	{r4, r5, r6, r7}

   char* ptr = result, *ptr1 = result, tmp_char;
1a000308:	460d      	mov	r5, r1
1a00030a:	e005      	b.n	1a000318 <itoa+0x18>
   if (base < 2 || base > 36) { *result = '\0'; return result; }
1a00030c:	2300      	movs	r3, #0
1a00030e:	700b      	strb	r3, [r1, #0]
      tmp_char = *ptr;
      *ptr--= *ptr1;
      *ptr1++ = tmp_char;
   }
   return result;
}
1a000310:	4608      	mov	r0, r1
1a000312:	4770      	bx	lr
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
1a000314:	4635      	mov	r5, r6
      value /= base;
1a000316:	4620      	mov	r0, r4
1a000318:	fb90 f4f2 	sdiv	r4, r0, r2
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
1a00031c:	fb02 0314 	mls	r3, r2, r4, r0
1a000320:	3323      	adds	r3, #35	; 0x23
1a000322:	1c6e      	adds	r6, r5, #1
1a000324:	4f0f      	ldr	r7, [pc, #60]	; (1a000364 <itoa+0x64>)
1a000326:	5cfb      	ldrb	r3, [r7, r3]
1a000328:	702b      	strb	r3, [r5, #0]
   } while ( value );
1a00032a:	2c00      	cmp	r4, #0
1a00032c:	d1f2      	bne.n	1a000314 <itoa+0x14>
   if (tmp_value < 0) *ptr++ = '-';
1a00032e:	2800      	cmp	r0, #0
1a000330:	db04      	blt.n	1a00033c <itoa+0x3c>
   *ptr-- = '\0';
1a000332:	1e72      	subs	r2, r6, #1
1a000334:	2300      	movs	r3, #0
1a000336:	7033      	strb	r3, [r6, #0]
   char* ptr = result, *ptr1 = result, tmp_char;
1a000338:	460b      	mov	r3, r1
   while(ptr1 < ptr) {
1a00033a:	e00d      	b.n	1a000358 <itoa+0x58>
   if (tmp_value < 0) *ptr++ = '-';
1a00033c:	1cae      	adds	r6, r5, #2
1a00033e:	232d      	movs	r3, #45	; 0x2d
1a000340:	706b      	strb	r3, [r5, #1]
1a000342:	e7f6      	b.n	1a000332 <itoa+0x32>
      tmp_char = *ptr;
1a000344:	4614      	mov	r4, r2
1a000346:	f814 0901 	ldrb.w	r0, [r4], #-1
      *ptr--= *ptr1;
1a00034a:	461d      	mov	r5, r3
1a00034c:	f815 6b01 	ldrb.w	r6, [r5], #1
1a000350:	7016      	strb	r6, [r2, #0]
      *ptr1++ = tmp_char;
1a000352:	7018      	strb	r0, [r3, #0]
1a000354:	462b      	mov	r3, r5
      *ptr--= *ptr1;
1a000356:	4622      	mov	r2, r4
   while(ptr1 < ptr) {
1a000358:	429a      	cmp	r2, r3
1a00035a:	d8f3      	bhi.n	1a000344 <itoa+0x44>
}
1a00035c:	4608      	mov	r0, r1
1a00035e:	bcf0      	pop	{r4, r5, r6, r7}
1a000360:	4770      	bx	lr
1a000362:	bf00      	nop
1a000364:	1a0037e0 	.word	0x1a0037e0

1a000368 <main>:

/*=====[Main function, program entry point after power on or reset]==========*/

int main( void )
{
1a000368:	b530      	push	{r4, r5, lr}
1a00036a:	b095      	sub	sp, #84	; 0x54
   // ----- Setup -----------------------------------
	boardInit();
1a00036c:	f001 faea 	bl	1a001944 <boardInit>
	state = standByState;			//Inicializo la variable state
1a000370:	2500      	movs	r5, #0
1a000372:	4b9d      	ldr	r3, [pc, #628]	; (1a0005e8 <main+0x280>)
1a000374:	701d      	strb	r5, [r3, #0]
	uint8_t cuenta = 0; //Cantidad de datos
	int32_t list[4];
	char *ptr;

	//-- configuracion UART
	uartConfig( UART_USB, 115200 ); // Inicializar UART_USB a 115200 baudios
1a000376:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a00037a:	2003      	movs	r0, #3
1a00037c:	f001 f8e8 	bl	1a001550 <uartInit>
	uartConfig( UART_232, 115200 ); // Inicializar UART_232 a 115200 baudios
1a000380:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000384:	2005      	movs	r0, #5
1a000386:	f001 f8e3 	bl	1a001550 <uartInit>
1a00038a:	e016      	b.n	1a0003ba <main+0x52>

		switch  (state) {

		case standByState:			// Estado principal

			printf("MENU PRINCIPAL\r\n");
1a00038c:	4897      	ldr	r0, [pc, #604]	; (1a0005ec <main+0x284>)
1a00038e:	f001 fd5b 	bl	1a001e48 <puts>
			printf("(1) Medir Campo\r\n");
1a000392:	4897      	ldr	r0, [pc, #604]	; (1a0005f0 <main+0x288>)
1a000394:	f001 fd58 	bl	1a001e48 <puts>
			printf("(2) ---\r\n");
1a000398:	4896      	ldr	r0, [pc, #600]	; (1a0005f4 <main+0x28c>)
1a00039a:	f001 fd55 	bl	1a001e48 <puts>
			printf("(3) --- \r\n");
1a00039e:	4896      	ldr	r0, [pc, #600]	; (1a0005f8 <main+0x290>)
1a0003a0:	f001 fd52 	bl	1a001e48 <puts>
			scanf("%s",text);   // en el cutecom para scanf y printf usar CR/LF para interpretar el cierre del string
1a0003a4:	a913      	add	r1, sp, #76	; 0x4c
1a0003a6:	4895      	ldr	r0, [pc, #596]	; (1a0005fc <main+0x294>)
1a0003a8:	f001 fd56 	bl	1a001e58 <iscanf>
			printf("El valor ingresado: %s\r\n", text);
1a0003ac:	a913      	add	r1, sp, #76	; 0x4c
1a0003ae:	4894      	ldr	r0, [pc, #592]	; (1a000600 <main+0x298>)
1a0003b0:	f001 fcd6 	bl	1a001d60 <iprintf>
			state = workState;
1a0003b4:	4b8c      	ldr	r3, [pc, #560]	; (1a0005e8 <main+0x280>)
1a0003b6:	2201      	movs	r2, #1
1a0003b8:	701a      	strb	r2, [r3, #0]
		switch  (state) {
1a0003ba:	4b8b      	ldr	r3, [pc, #556]	; (1a0005e8 <main+0x280>)
1a0003bc:	781b      	ldrb	r3, [r3, #0]
1a0003be:	2b05      	cmp	r3, #5
1a0003c0:	f200 810d 	bhi.w	1a0005de <main+0x276>
1a0003c4:	a201      	add	r2, pc, #4	; (adr r2, 1a0003cc <main+0x64>)
1a0003c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0003ca:	bf00      	nop
1a0003cc:	1a00038d 	.word	0x1a00038d
1a0003d0:	1a0003e5 	.word	0x1a0003e5
1a0003d4:	1a00044b 	.word	0x1a00044b
1a0003d8:	1a0004bb 	.word	0x1a0004bb
1a0003dc:	1a0004f3 	.word	0x1a0004f3
1a0003e0:	1a0003bb 	.word	0x1a0003bb
			break;

		case workState:			// Estado de trabajo

			if (text[0] == '1'){
1a0003e4:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
1a0003e8:	2b31      	cmp	r3, #49	; 0x31
1a0003ea:	d00a      	beq.n	1a000402 <main+0x9a>
				uartTxWrite(UART_232, '\n');
				state = busyState;
				break;
				}

			if (text[0] == '2'){
1a0003ec:	2b32      	cmp	r3, #50	; 0x32
1a0003ee:	d01e      	beq.n	1a00042e <main+0xc6>
				text[0]= '0'; 		//clear text
				state = standByState;
				break;
			}

			if (text[0] == '3'){
1a0003f0:	2b33      	cmp	r3, #51	; 0x33
1a0003f2:	d023      	beq.n	1a00043c <main+0xd4>
				text[0]= '0'; 		//clear text
				state = standByState;
				break;
			}

			state = standByState;
1a0003f4:	4b7c      	ldr	r3, [pc, #496]	; (1a0005e8 <main+0x280>)
1a0003f6:	2200      	movs	r2, #0
1a0003f8:	701a      	strb	r2, [r3, #0]
			text[0]= '0'; //clear text
1a0003fa:	2330      	movs	r3, #48	; 0x30
1a0003fc:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
			break;
1a000400:	e7db      	b.n	1a0003ba <main+0x52>
				text[0]= '0'; 		//clear text
1a000402:	2330      	movs	r3, #48	; 0x30
1a000404:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				printf("ENCENDER SONDA... \r\n");
1a000408:	487e      	ldr	r0, [pc, #504]	; (1a000604 <main+0x29c>)
1a00040a:	f001 fd1d 	bl	1a001e48 <puts>
				uartTxWrite(UART_232, 'o');
1a00040e:	216f      	movs	r1, #111	; 0x6f
1a000410:	2005      	movs	r0, #5
1a000412:	f001 f893 	bl	1a00153c <uartTxWrite>
				uartTxWrite(UART_232, '\r');
1a000416:	210d      	movs	r1, #13
1a000418:	2005      	movs	r0, #5
1a00041a:	f001 f88f 	bl	1a00153c <uartTxWrite>
				uartTxWrite(UART_232, '\n');
1a00041e:	210a      	movs	r1, #10
1a000420:	2005      	movs	r0, #5
1a000422:	f001 f88b 	bl	1a00153c <uartTxWrite>
				state = busyState;
1a000426:	4b70      	ldr	r3, [pc, #448]	; (1a0005e8 <main+0x280>)
1a000428:	2202      	movs	r2, #2
1a00042a:	701a      	strb	r2, [r3, #0]
				break;
1a00042c:	e7c5      	b.n	1a0003ba <main+0x52>
				text[0]= '0'; 		//clear text
1a00042e:	2330      	movs	r3, #48	; 0x30
1a000430:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				state = standByState;
1a000434:	4b6c      	ldr	r3, [pc, #432]	; (1a0005e8 <main+0x280>)
1a000436:	2200      	movs	r2, #0
1a000438:	701a      	strb	r2, [r3, #0]
				break;
1a00043a:	e7be      	b.n	1a0003ba <main+0x52>
				text[0]= '0'; 		//clear text
1a00043c:	2330      	movs	r3, #48	; 0x30
1a00043e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				state = standByState;
1a000442:	4b69      	ldr	r3, [pc, #420]	; (1a0005e8 <main+0x280>)
1a000444:	2200      	movs	r2, #0
1a000446:	701a      	strb	r2, [r3, #0]
				break;
1a000448:	e7b7      	b.n	1a0003ba <main+0x52>

		case busyState:				// Estado de espera

			gpioToggle(LEDB);
1a00044a:	202a      	movs	r0, #42	; 0x2a
1a00044c:	f001 fa61 	bl	1a001912 <gpioToggle>
			delay(100);
1a000450:	2064      	movs	r0, #100	; 0x64
1a000452:	2100      	movs	r1, #0
1a000454:	f001 fab0 	bl	1a0019b8 <delay>
			date [0] = 0;							//clear text
1a000458:	2300      	movs	r3, #0
1a00045a:	f88d 3018 	strb.w	r3, [sp, #24]
			while (uartRxReady(UART_232)) { 		//Hay datos no leidos
1a00045e:	e00a      	b.n	1a000476 <main+0x10e>
				for (uint8_t i = 0; i < 50; i++){
					date[i]= uartRxRead(UART_232); //Almaceno Dato
1a000460:	2005      	movs	r0, #5
1a000462:	f001 f861 	bl	1a001528 <uartRxRead>
1a000466:	ab14      	add	r3, sp, #80	; 0x50
1a000468:	4423      	add	r3, r4
1a00046a:	f803 0c38 	strb.w	r0, [r3, #-56]
				for (uint8_t i = 0; i < 50; i++){
1a00046e:	3401      	adds	r4, #1
1a000470:	b2e4      	uxtb	r4, r4
1a000472:	2c31      	cmp	r4, #49	; 0x31
1a000474:	d9f4      	bls.n	1a000460 <main+0xf8>
			while (uartRxReady(UART_232)) { 		//Hay datos no leidos
1a000476:	2005      	movs	r0, #5
1a000478:	f001 f83e 	bl	1a0014f8 <uartRxReady>
1a00047c:	b108      	cbz	r0, 1a000482 <main+0x11a>
				for (uint8_t i = 0; i < 50; i++){
1a00047e:	2400      	movs	r4, #0
1a000480:	e7f7      	b.n	1a000472 <main+0x10a>
					}
				}

			if ((date[0] == ':') && (date[1] == 'o')){  //Repuesta de sonda
1a000482:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000486:	2b3a      	cmp	r3, #58	; 0x3a
1a000488:	d197      	bne.n	1a0003ba <main+0x52>
1a00048a:	f89d 3019 	ldrb.w	r3, [sp, #25]
1a00048e:	2b6f      	cmp	r3, #111	; 0x6f
1a000490:	d193      	bne.n	1a0003ba <main+0x52>
				printf("ESTADO DE SONDA: ON\r\n");
1a000492:	485d      	ldr	r0, [pc, #372]	; (1a000608 <main+0x2a0>)
1a000494:	f001 fcd8 	bl	1a001e48 <puts>
				for (uint8_t i = 0; date[i] != '\0'; i++) {
1a000498:	2400      	movs	r4, #0
1a00049a:	e004      	b.n	1a0004a6 <main+0x13e>
					uartTxWrite(UART_USB, date[i]);
1a00049c:	2003      	movs	r0, #3
1a00049e:	f001 f84d 	bl	1a00153c <uartTxWrite>
				for (uint8_t i = 0; date[i] != '\0'; i++) {
1a0004a2:	3401      	adds	r4, #1
1a0004a4:	b2e4      	uxtb	r4, r4
1a0004a6:	ab14      	add	r3, sp, #80	; 0x50
1a0004a8:	4423      	add	r3, r4
1a0004aa:	f813 1c38 	ldrb.w	r1, [r3, #-56]
1a0004ae:	2900      	cmp	r1, #0
1a0004b0:	d1f4      	bne.n	1a00049c <main+0x134>
					}
				state = MeasureState;
1a0004b2:	4b4d      	ldr	r3, [pc, #308]	; (1a0005e8 <main+0x280>)
1a0004b4:	2203      	movs	r2, #3
1a0004b6:	701a      	strb	r2, [r3, #0]
1a0004b8:	e77f      	b.n	1a0003ba <main+0x52>
				}
			break;

		case MeasureState:			// Estado de medicion

			printf("MEDIR CAMPO... \r\n");
1a0004ba:	4854      	ldr	r0, [pc, #336]	; (1a00060c <main+0x2a4>)
1a0004bc:	f001 fcc4 	bl	1a001e48 <puts>

			if (uartTxReady(UART_232)){  		//Hay espacio para escribir
1a0004c0:	2005      	movs	r0, #5
1a0004c2:	f001 f825 	bl	1a001510 <uartTxReady>
1a0004c6:	b918      	cbnz	r0, 1a0004d0 <main+0x168>
				uartTxWrite(UART_232, '5');         //
				uartTxWrite(UART_232, '\r');
				uartTxWrite(UART_232, '\n');
				}

			state = finishState;
1a0004c8:	4b47      	ldr	r3, [pc, #284]	; (1a0005e8 <main+0x280>)
1a0004ca:	2204      	movs	r2, #4
1a0004cc:	701a      	strb	r2, [r3, #0]
			break;
1a0004ce:	e774      	b.n	1a0003ba <main+0x52>
				uartTxWrite(UART_232, 'D');         //Comando D5 -> Medir Campo
1a0004d0:	2144      	movs	r1, #68	; 0x44
1a0004d2:	2005      	movs	r0, #5
1a0004d4:	f001 f832 	bl	1a00153c <uartTxWrite>
				uartTxWrite(UART_232, '5');         //
1a0004d8:	2135      	movs	r1, #53	; 0x35
1a0004da:	2005      	movs	r0, #5
1a0004dc:	f001 f82e 	bl	1a00153c <uartTxWrite>
				uartTxWrite(UART_232, '\r');
1a0004e0:	210d      	movs	r1, #13
1a0004e2:	2005      	movs	r0, #5
1a0004e4:	f001 f82a 	bl	1a00153c <uartTxWrite>
				uartTxWrite(UART_232, '\n');
1a0004e8:	210a      	movs	r1, #10
1a0004ea:	2005      	movs	r0, #5
1a0004ec:	f001 f826 	bl	1a00153c <uartTxWrite>
1a0004f0:	e7ea      	b.n	1a0004c8 <main+0x160>

		case finishState:

			gpioToggle(LED1);
1a0004f2:	202b      	movs	r0, #43	; 0x2b
1a0004f4:	f001 fa0d 	bl	1a001912 <gpioToggle>
			delay(100);
1a0004f8:	2064      	movs	r0, #100	; 0x64
1a0004fa:	2100      	movs	r1, #0
1a0004fc:	f001 fa5c 	bl	1a0019b8 <delay>
			date [0] = 0; 					//clear text
1a000500:	2300      	movs	r3, #0
1a000502:	f88d 3018 	strb.w	r3, [sp, #24]


			while (uartRxReady(UART_232)) { 		//Hay datos no leidos
1a000506:	e00e      	b.n	1a000526 <main+0x1be>
				for (uint8_t i = 0; i < 50; i++){

					date[i]= uartRxRead(UART_232); //Almaceno Dato
1a000508:	2005      	movs	r0, #5
1a00050a:	f001 f80d 	bl	1a001528 <uartRxRead>
1a00050e:	4601      	mov	r1, r0
1a000510:	ab14      	add	r3, sp, #80	; 0x50
1a000512:	4423      	add	r3, r4
1a000514:	f803 0c38 	strb.w	r0, [r3, #-56]

					uartTxWrite(UART_USB, date[i]);; //Almaceno Dato
1a000518:	2003      	movs	r0, #3
1a00051a:	f001 f80f 	bl	1a00153c <uartTxWrite>
				for (uint8_t i = 0; i < 50; i++){
1a00051e:	3401      	adds	r4, #1
1a000520:	b2e4      	uxtb	r4, r4
1a000522:	2c31      	cmp	r4, #49	; 0x31
1a000524:	d9f0      	bls.n	1a000508 <main+0x1a0>
			while (uartRxReady(UART_232)) { 		//Hay datos no leidos
1a000526:	2005      	movs	r0, #5
1a000528:	f000 ffe6 	bl	1a0014f8 <uartRxReady>
1a00052c:	b108      	cbz	r0, 1a000532 <main+0x1ca>
				for (uint8_t i = 0; i < 50; i++){
1a00052e:	2400      	movs	r4, #0
1a000530:	e7f7      	b.n	1a000522 <main+0x1ba>
					}
				}

			if ((date[0] == ':') && (date[1] == 'D')){  //Repuesta de sonda seguido del valor de medicion
1a000532:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000536:	2b3a      	cmp	r3, #58	; 0x3a
1a000538:	d011      	beq.n	1a00055e <main+0x1f6>
				cuenta++;
				uartTxWrite(UART_USB, ret);
				state = finishState;
				}

			if (cuenta == 5){
1a00053a:	2d05      	cmp	r5, #5
1a00053c:	f47f af3d 	bne.w	1a0003ba <main+0x52>
				state = standByState;
1a000540:	2000      	movs	r0, #0
1a000542:	4b29      	ldr	r3, [pc, #164]	; (1a0005e8 <main+0x280>)
1a000544:	7018      	strb	r0, [r3, #0]
				cuenta = 0;
				aux = 0;
				for (uint8_t i = 0; i<5; i++){
1a000546:	4603      	mov	r3, r0
1a000548:	2b04      	cmp	r3, #4
1a00054a:	d830      	bhi.n	1a0005ae <main+0x246>
					aux = list[i] + aux;
1a00054c:	aa14      	add	r2, sp, #80	; 0x50
1a00054e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
1a000552:	f852 2c4c 	ldr.w	r2, [r2, #-76]
1a000556:	4410      	add	r0, r2
				for (uint8_t i = 0; i<5; i++){
1a000558:	3301      	adds	r3, #1
1a00055a:	b2db      	uxtb	r3, r3
1a00055c:	e7f4      	b.n	1a000548 <main+0x1e0>
			if ((date[0] == ':') && (date[1] == 'D')){  //Repuesta de sonda seguido del valor de medicion
1a00055e:	f89d 3019 	ldrb.w	r3, [sp, #25]
1a000562:	2b44      	cmp	r3, #68	; 0x44
1a000564:	d1e9      	bne.n	1a00053a <main+0x1d2>
				for(uint8_t i = 19; i < 25; i++) { //:D18  Coordenada C
1a000566:	2313      	movs	r3, #19
1a000568:	e00b      	b.n	1a000582 <main+0x21a>
					auxX[i-19]= date[i];			 // 18  Coordenada C
1a00056a:	f1a3 0213 	sub.w	r2, r3, #19
1a00056e:	a914      	add	r1, sp, #80	; 0x50
1a000570:	4419      	add	r1, r3
1a000572:	f811 1c38 	ldrb.w	r1, [r1, #-56]
1a000576:	a814      	add	r0, sp, #80	; 0x50
1a000578:	4402      	add	r2, r0
1a00057a:	f802 1c3c 	strb.w	r1, [r2, #-60]
				for(uint8_t i = 19; i < 25; i++) { //:D18  Coordenada C
1a00057e:	3301      	adds	r3, #1
1a000580:	b2db      	uxtb	r3, r3
1a000582:	2b18      	cmp	r3, #24
1a000584:	d9f1      	bls.n	1a00056a <main+0x202>
				long int ret = strtol (auxX, &ptr, 10) ;  // De CHAR a INT atoi base 10
1a000586:	220a      	movs	r2, #10
1a000588:	4669      	mov	r1, sp
1a00058a:	a805      	add	r0, sp, #20
1a00058c:	f001 fd0a 	bl	1a001fa4 <strtol>
				list[cuenta] = ret;
1a000590:	ab14      	add	r3, sp, #80	; 0x50
1a000592:	eb03 0385 	add.w	r3, r3, r5, lsl #2
1a000596:	f843 0c4c 	str.w	r0, [r3, #-76]
				cuenta++;
1a00059a:	3501      	adds	r5, #1
1a00059c:	b2ed      	uxtb	r5, r5
				uartTxWrite(UART_USB, ret);
1a00059e:	b2c1      	uxtb	r1, r0
1a0005a0:	2003      	movs	r0, #3
1a0005a2:	f000 ffcb 	bl	1a00153c <uartTxWrite>
				state = finishState;
1a0005a6:	4b10      	ldr	r3, [pc, #64]	; (1a0005e8 <main+0x280>)
1a0005a8:	2204      	movs	r2, #4
1a0005aa:	701a      	strb	r2, [r3, #0]
1a0005ac:	e7c5      	b.n	1a00053a <main+0x1d2>
					}

				itoa( aux, auxX, 10 );			// De INT a CHAR  itoa base 10  (aux y list son int32_t)
1a0005ae:	220a      	movs	r2, #10
1a0005b0:	a905      	add	r1, sp, #20
1a0005b2:	f7ff fea5 	bl	1a000300 <itoa>

				uartTxWrite(UART_USB, auxX[0]);
1a0005b6:	f89d 1014 	ldrb.w	r1, [sp, #20]
1a0005ba:	2003      	movs	r0, #3
1a0005bc:	f000 ffbe 	bl	1a00153c <uartTxWrite>
				uartTxWrite(UART_USB, auxX[1]);
1a0005c0:	f89d 1015 	ldrb.w	r1, [sp, #21]
1a0005c4:	2003      	movs	r0, #3
1a0005c6:	f000 ffb9 	bl	1a00153c <uartTxWrite>
				uartTxWrite(UART_USB, '\r');
1a0005ca:	210d      	movs	r1, #13
1a0005cc:	2003      	movs	r0, #3
1a0005ce:	f000 ffb5 	bl	1a00153c <uartTxWrite>
				uartTxWrite(UART_USB, '\n');
1a0005d2:	210a      	movs	r1, #10
1a0005d4:	2003      	movs	r0, #3
1a0005d6:	f000 ffb1 	bl	1a00153c <uartTxWrite>
				cuenta = 0;
1a0005da:	2500      	movs	r5, #0
1a0005dc:	e6ed      	b.n	1a0003ba <main+0x52>
		case errorState:

			break;

		default:
			state = standByState;
1a0005de:	4b02      	ldr	r3, [pc, #8]	; (1a0005e8 <main+0x280>)
1a0005e0:	2200      	movs	r2, #0
1a0005e2:	701a      	strb	r2, [r3, #0]
			break;
1a0005e4:	e6e9      	b.n	1a0003ba <main+0x52>
1a0005e6:	bf00      	nop
1a0005e8:	10000241 	.word	0x10000241
1a0005ec:	1a003828 	.word	0x1a003828
1a0005f0:	1a003838 	.word	0x1a003838
1a0005f4:	1a00384c 	.word	0x1a00384c
1a0005f8:	1a003858 	.word	0x1a003858
1a0005fc:	1a003864 	.word	0x1a003864
1a000600:	1a003868 	.word	0x1a003868
1a000604:	1a003884 	.word	0x1a003884
1a000608:	1a003898 	.word	0x1a003898
1a00060c:	1a0038b0 	.word	0x1a0038b0

1a000610 <initialise_monitor_handles>:
}
1a000610:	4770      	bx	lr
1a000612:	Address 0x000000001a000612 is out of bounds.


1a000614 <Reset_Handler>:
void Reset_Handler(void) {
1a000614:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000616:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000618:	4b19      	ldr	r3, [pc, #100]	; (1a000680 <Reset_Handler+0x6c>)
1a00061a:	4a1a      	ldr	r2, [pc, #104]	; (1a000684 <Reset_Handler+0x70>)
1a00061c:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00061e:	3304      	adds	r3, #4
1a000620:	4a19      	ldr	r2, [pc, #100]	; (1a000688 <Reset_Handler+0x74>)
1a000622:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000624:	2300      	movs	r3, #0
1a000626:	e005      	b.n	1a000634 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000628:	4a18      	ldr	r2, [pc, #96]	; (1a00068c <Reset_Handler+0x78>)
1a00062a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a00062e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000632:	3301      	adds	r3, #1
1a000634:	2b07      	cmp	r3, #7
1a000636:	d9f7      	bls.n	1a000628 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000638:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a00063a:	4b15      	ldr	r3, [pc, #84]	; (1a000690 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a00063c:	e007      	b.n	1a00064e <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a00063e:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000642:	689a      	ldr	r2, [r3, #8]
1a000644:	6859      	ldr	r1, [r3, #4]
1a000646:	6818      	ldr	r0, [r3, #0]
1a000648:	f7ff fd9f 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a00064c:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a00064e:	4a11      	ldr	r2, [pc, #68]	; (1a000694 <Reset_Handler+0x80>)
1a000650:	4293      	cmp	r3, r2
1a000652:	d3f4      	bcc.n	1a00063e <Reset_Handler+0x2a>
1a000654:	e006      	b.n	1a000664 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000656:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000658:	6859      	ldr	r1, [r3, #4]
1a00065a:	f854 0b08 	ldr.w	r0, [r4], #8
1a00065e:	f7ff fda3 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000662:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000664:	4a0c      	ldr	r2, [pc, #48]	; (1a000698 <Reset_Handler+0x84>)
1a000666:	4293      	cmp	r3, r2
1a000668:	d3f5      	bcc.n	1a000656 <Reset_Handler+0x42>
    SystemInit();
1a00066a:	f000 ff1b 	bl	1a0014a4 <SystemInit>
    __libc_init_array();
1a00066e:	f001 fb3f 	bl	1a001cf0 <__libc_init_array>
    initialise_monitor_handles();
1a000672:	f7ff ffcd 	bl	1a000610 <initialise_monitor_handles>
    main();
1a000676:	f7ff fe77 	bl	1a000368 <main>
        __asm__ volatile("wfi");
1a00067a:	bf30      	wfi
1a00067c:	e7fd      	b.n	1a00067a <Reset_Handler+0x66>
1a00067e:	bf00      	nop
1a000680:	40053100 	.word	0x40053100
1a000684:	10df1000 	.word	0x10df1000
1a000688:	01dff7ff 	.word	0x01dff7ff
1a00068c:	e000e280 	.word	0xe000e280
1a000690:	1a000114 	.word	0x1a000114
1a000694:	1a000150 	.word	0x1a000150
1a000698:	1a000178 	.word	0x1a000178

1a00069c <_fini>:
void _fini(void) {}
1a00069c:	4770      	bx	lr

1a00069e <_init>:
void _init(void) {}
1a00069e:	4770      	bx	lr

1a0006a0 <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a0006a0:	2309      	movs	r3, #9
1a0006a2:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0006a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0006a8:	4770      	bx	lr

1a0006aa <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a0006aa:	2358      	movs	r3, #88	; 0x58
1a0006ac:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0006ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0006b2:	4770      	bx	lr

1a0006b4 <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a0006b4:	2902      	cmp	r1, #2
1a0006b6:	d801      	bhi.n	1a0006bc <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a0006b8:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a0006ba:	4770      	bx	lr
       SET_ERR(EBADF);
1a0006bc:	2309      	movs	r3, #9
1a0006be:	6003      	str	r3, [r0, #0]
       return -1;
1a0006c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0006c4:	4770      	bx	lr

1a0006c6 <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a0006c6:	2358      	movs	r3, #88	; 0x58
1a0006c8:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0006ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0006ce:	4770      	bx	lr

1a0006d0 <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a0006d0:	2902      	cmp	r1, #2
1a0006d2:	d81f      	bhi.n	1a000714 <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a0006d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0006d8:	461d      	mov	r5, r3
1a0006da:	4617      	mov	r7, r2
1a0006dc:	4606      	mov	r6, r0
  size_t i = 0;
1a0006de:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a0006e0:	42ac      	cmp	r4, r5
1a0006e2:	d211      	bcs.n	1a000708 <_read_r+0x38>
         int c = __stdio_getchar();
1a0006e4:	f000 f92f 	bl	1a000946 <__stdio_getchar>
         if( c != -1 ){
1a0006e8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0006ec:	d0f8      	beq.n	1a0006e0 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a0006ee:	f104 0801 	add.w	r8, r4, #1
1a0006f2:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a0006f4:	280d      	cmp	r0, #13
1a0006f6:	d003      	beq.n	1a000700 <_read_r+0x30>
1a0006f8:	280a      	cmp	r0, #10
1a0006fa:	d001      	beq.n	1a000700 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a0006fc:	4644      	mov	r4, r8
1a0006fe:	e7ef      	b.n	1a0006e0 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000700:	f000 f921 	bl	1a000946 <__stdio_getchar>
               return i;
1a000704:	4640      	mov	r0, r8
1a000706:	e003      	b.n	1a000710 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a000708:	2313      	movs	r3, #19
1a00070a:	6033      	str	r3, [r6, #0]
      return -1;
1a00070c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a000714:	2313      	movs	r3, #19
1a000716:	6003      	str	r3, [r0, #0]
      return -1;
1a000718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a00071c:	4770      	bx	lr

1a00071e <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a00071e:	2902      	cmp	r1, #2
1a000720:	d80c      	bhi.n	1a00073c <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000722:	b570      	push	{r4, r5, r6, lr}
1a000724:	461d      	mov	r5, r3
1a000726:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000728:	2400      	movs	r4, #0
1a00072a:	e003      	b.n	1a000734 <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a00072c:	5d30      	ldrb	r0, [r6, r4]
1a00072e:	f000 f905 	bl	1a00093c <__stdio_putchar>
       for (i = 0; i < n; i++)
1a000732:	3401      	adds	r4, #1
1a000734:	42ac      	cmp	r4, r5
1a000736:	d3f9      	bcc.n	1a00072c <_write_r+0xe>
       return n;
1a000738:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a00073a:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a00073c:	2313      	movs	r3, #19
1a00073e:	6003      	str	r3, [r0, #0]
       return -1;
1a000740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000744:	4770      	bx	lr
1a000746:	Address 0x000000001a000746 is out of bounds.


1a000748 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000748:	4b05      	ldr	r3, [pc, #20]	; (1a000760 <_sbrk_r+0x18>)
1a00074a:	681b      	ldr	r3, [r3, #0]
1a00074c:	b123      	cbz	r3, 1a000758 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a00074e:	4b04      	ldr	r3, [pc, #16]	; (1a000760 <_sbrk_r+0x18>)
1a000750:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000752:	4401      	add	r1, r0
1a000754:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a000756:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000758:	4b01      	ldr	r3, [pc, #4]	; (1a000760 <_sbrk_r+0x18>)
1a00075a:	4a02      	ldr	r2, [pc, #8]	; (1a000764 <_sbrk_r+0x1c>)
1a00075c:	601a      	str	r2, [r3, #0]
1a00075e:	e7f6      	b.n	1a00074e <_sbrk_r+0x6>
1a000760:	10000218 	.word	0x10000218
1a000764:	1000024c 	.word	0x1000024c

1a000768 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000768:	2200      	movs	r2, #0
1a00076a:	2a05      	cmp	r2, #5
1a00076c:	d819      	bhi.n	1a0007a2 <Board_LED_Init+0x3a>
{
1a00076e:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a000770:	490c      	ldr	r1, [pc, #48]	; (1a0007a4 <Board_LED_Init+0x3c>)
1a000772:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a000776:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a00077a:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a00077c:	4b0a      	ldr	r3, [pc, #40]	; (1a0007a8 <Board_LED_Init+0x40>)
1a00077e:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a000782:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a000786:	2001      	movs	r0, #1
1a000788:	40a0      	lsls	r0, r4
1a00078a:	4301      	orrs	r1, r0
1a00078c:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a000790:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000794:	2100      	movs	r1, #0
1a000796:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000798:	3201      	adds	r2, #1
1a00079a:	2a05      	cmp	r2, #5
1a00079c:	d9e8      	bls.n	1a000770 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a00079e:	bc70      	pop	{r4, r5, r6}
1a0007a0:	4770      	bx	lr
1a0007a2:	4770      	bx	lr
1a0007a4:	1a0038d0 	.word	0x1a0038d0
1a0007a8:	400f4000 	.word	0x400f4000

1a0007ac <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0007ac:	2300      	movs	r3, #0
1a0007ae:	2b03      	cmp	r3, #3
1a0007b0:	d816      	bhi.n	1a0007e0 <Board_TEC_Init+0x34>
{
1a0007b2:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0007b4:	490b      	ldr	r1, [pc, #44]	; (1a0007e4 <Board_TEC_Init+0x38>)
1a0007b6:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0007ba:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0007be:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0007c0:	4c09      	ldr	r4, [pc, #36]	; (1a0007e8 <Board_TEC_Init+0x3c>)
1a0007c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0007c6:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0007ca:	2001      	movs	r0, #1
1a0007cc:	40a8      	lsls	r0, r5
1a0007ce:	ea21 0100 	bic.w	r1, r1, r0
1a0007d2:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0007d6:	3301      	adds	r3, #1
1a0007d8:	2b03      	cmp	r3, #3
1a0007da:	d9eb      	bls.n	1a0007b4 <Board_TEC_Init+0x8>
   }
}
1a0007dc:	bc30      	pop	{r4, r5}
1a0007de:	4770      	bx	lr
1a0007e0:	4770      	bx	lr
1a0007e2:	bf00      	nop
1a0007e4:	1a0038c8 	.word	0x1a0038c8
1a0007e8:	400f4000 	.word	0x400f4000

1a0007ec <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0007ec:	2300      	movs	r3, #0
1a0007ee:	2b08      	cmp	r3, #8
1a0007f0:	d816      	bhi.n	1a000820 <Board_GPIO_Init+0x34>
{
1a0007f2:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0007f4:	490b      	ldr	r1, [pc, #44]	; (1a000824 <Board_GPIO_Init+0x38>)
1a0007f6:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0007fa:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0007fe:	784d      	ldrb	r5, [r1, #1]
1a000800:	4c09      	ldr	r4, [pc, #36]	; (1a000828 <Board_GPIO_Init+0x3c>)
1a000802:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000806:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00080a:	2001      	movs	r0, #1
1a00080c:	40a8      	lsls	r0, r5
1a00080e:	ea21 0100 	bic.w	r1, r1, r0
1a000812:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000816:	3301      	adds	r3, #1
1a000818:	2b08      	cmp	r3, #8
1a00081a:	d9eb      	bls.n	1a0007f4 <Board_GPIO_Init+0x8>
   }
}
1a00081c:	bc30      	pop	{r4, r5}
1a00081e:	4770      	bx	lr
1a000820:	4770      	bx	lr
1a000822:	bf00      	nop
1a000824:	1a0038dc 	.word	0x1a0038dc
1a000828:	400f4000 	.word	0x400f4000

1a00082c <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a00082c:	b510      	push	{r4, lr}
1a00082e:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a000830:	4c08      	ldr	r4, [pc, #32]	; (1a000854 <Board_ADC_Init+0x28>)
1a000832:	4669      	mov	r1, sp
1a000834:	4620      	mov	r0, r4
1a000836:	f000 fa1d 	bl	1a000c74 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a00083a:	4a07      	ldr	r2, [pc, #28]	; (1a000858 <Board_ADC_Init+0x2c>)
1a00083c:	4669      	mov	r1, sp
1a00083e:	4620      	mov	r0, r4
1a000840:	f000 fa38 	bl	1a000cb4 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000844:	2200      	movs	r2, #0
1a000846:	4669      	mov	r1, sp
1a000848:	4620      	mov	r0, r4
1a00084a:	f000 fa4c 	bl	1a000ce6 <Chip_ADC_SetResolution>
}
1a00084e:	b002      	add	sp, #8
1a000850:	bd10      	pop	{r4, pc}
1a000852:	bf00      	nop
1a000854:	400e3000 	.word	0x400e3000
1a000858:	00061a80 	.word	0x00061a80

1a00085c <Board_SPI_Init>:
{
1a00085c:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a00085e:	4c0b      	ldr	r4, [pc, #44]	; (1a00088c <Board_SPI_Init+0x30>)
1a000860:	4620      	mov	r0, r4
1a000862:	f000 fe03 	bl	1a00146c <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000866:	6863      	ldr	r3, [r4, #4]
1a000868:	f023 0304 	bic.w	r3, r3, #4
1a00086c:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00086e:	6823      	ldr	r3, [r4, #0]
1a000870:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000874:	f043 0307 	orr.w	r3, r3, #7
1a000878:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a00087a:	4905      	ldr	r1, [pc, #20]	; (1a000890 <Board_SPI_Init+0x34>)
1a00087c:	4620      	mov	r0, r4
1a00087e:	f000 fdd6 	bl	1a00142e <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000882:	6863      	ldr	r3, [r4, #4]
1a000884:	f043 0302 	orr.w	r3, r3, #2
1a000888:	6063      	str	r3, [r4, #4]
}
1a00088a:	bd10      	pop	{r4, pc}
1a00088c:	400c5000 	.word	0x400c5000
1a000890:	000186a0 	.word	0x000186a0

1a000894 <Board_I2C_Init>:
{
1a000894:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a000896:	2000      	movs	r0, #0
1a000898:	f000 f8c6 	bl	1a000a28 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a00089c:	4b04      	ldr	r3, [pc, #16]	; (1a0008b0 <Board_I2C_Init+0x1c>)
1a00089e:	f640 0208 	movw	r2, #2056	; 0x808
1a0008a2:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0008a6:	4903      	ldr	r1, [pc, #12]	; (1a0008b4 <Board_I2C_Init+0x20>)
1a0008a8:	2000      	movs	r0, #0
1a0008aa:	f000 f8cf 	bl	1a000a4c <Chip_I2C_SetClockRate>
}
1a0008ae:	bd08      	pop	{r3, pc}
1a0008b0:	40086000 	.word	0x40086000
1a0008b4:	000f4240 	.word	0x000f4240

1a0008b8 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0008b8:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a0008ba:	4c07      	ldr	r4, [pc, #28]	; (1a0008d8 <Board_Debug_Init+0x20>)
1a0008bc:	4620      	mov	r0, r4
1a0008be:	f000 f8f7 	bl	1a000ab0 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0008c2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0008c6:	4620      	mov	r0, r4
1a0008c8:	f000 f93c 	bl	1a000b44 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0008cc:	2303      	movs	r3, #3
1a0008ce:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0008d0:	2301      	movs	r3, #1
1a0008d2:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a0008d4:	bd10      	pop	{r4, pc}
1a0008d6:	bf00      	nop
1a0008d8:	400c1000 	.word	0x400c1000

1a0008dc <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0008dc:	4b03      	ldr	r3, [pc, #12]	; (1a0008ec <Board_UARTPutChar+0x10>)
1a0008de:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a0008e0:	f013 0f20 	tst.w	r3, #32
1a0008e4:	d0fa      	beq.n	1a0008dc <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a0008e6:	4b01      	ldr	r3, [pc, #4]	; (1a0008ec <Board_UARTPutChar+0x10>)
1a0008e8:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a0008ea:	4770      	bx	lr
1a0008ec:	400c1000 	.word	0x400c1000

1a0008f0 <Board_UARTGetChar>:
	return pUART->LSR;
1a0008f0:	4b05      	ldr	r3, [pc, #20]	; (1a000908 <Board_UARTGetChar+0x18>)
1a0008f2:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a0008f4:	f013 0f01 	tst.w	r3, #1
1a0008f8:	d003      	beq.n	1a000902 <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);         //uint8_t
1a0008fa:	4b03      	ldr	r3, [pc, #12]	; (1a000908 <Board_UARTGetChar+0x18>)
1a0008fc:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a0008fe:	b2c0      	uxtb	r0, r0
1a000900:	4770      	bx	lr
   }
   return EOF;
1a000902:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000906:	4770      	bx	lr
1a000908:	400c1000 	.word	0x400c1000

1a00090c <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a00090c:	b508      	push	{r3, lr}
   DEBUGINIT();
1a00090e:	f7ff ffd3 	bl	1a0008b8 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000912:	4809      	ldr	r0, [pc, #36]	; (1a000938 <Board_Init+0x2c>)
1a000914:	f000 fd6a 	bl	1a0013ec <Chip_GPIO_Init>

   Board_GPIO_Init();
1a000918:	f7ff ff68 	bl	1a0007ec <Board_GPIO_Init>
   Board_ADC_Init();
1a00091c:	f7ff ff86 	bl	1a00082c <Board_ADC_Init>
   Board_SPI_Init();
1a000920:	f7ff ff9c 	bl	1a00085c <Board_SPI_Init>
   Board_I2C_Init();
1a000924:	f7ff ffb6 	bl	1a000894 <Board_I2C_Init>

   Board_LED_Init();
1a000928:	f7ff ff1e 	bl	1a000768 <Board_LED_Init>
   Board_TEC_Init();
1a00092c:	f7ff ff3e 	bl	1a0007ac <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a000930:	f000 fca8 	bl	1a001284 <SystemCoreClockUpdate>
}
1a000934:	bd08      	pop	{r3, pc}
1a000936:	bf00      	nop
1a000938:	400f4000 	.word	0x400f4000

1a00093c <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a00093c:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a00093e:	b2c0      	uxtb	r0, r0
1a000940:	f7ff ffcc 	bl	1a0008dc <Board_UARTPutChar>
}
1a000944:	bd08      	pop	{r3, pc}

1a000946 <__stdio_getchar>:

int __stdio_getchar()
{
1a000946:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a000948:	f7ff ffd2 	bl	1a0008f0 <Board_UARTGetChar>
}
1a00094c:	bd08      	pop	{r3, pc}

1a00094e <__stdio_init>:

void __stdio_init()
{
1a00094e:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a000950:	f7ff ffb2 	bl	1a0008b8 <Board_Debug_Init>
1a000954:	bd08      	pop	{r3, pc}
1a000956:	Address 0x000000001a000956 is out of bounds.


1a000958 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000958:	2300      	movs	r3, #0
1a00095a:	2b1c      	cmp	r3, #28
1a00095c:	d812      	bhi.n	1a000984 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a00095e:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000960:	4a09      	ldr	r2, [pc, #36]	; (1a000988 <Board_SetupMuxing+0x30>)
1a000962:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000966:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a00096a:	784a      	ldrb	r2, [r1, #1]
1a00096c:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00096e:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a000972:	4906      	ldr	r1, [pc, #24]	; (1a00098c <Board_SetupMuxing+0x34>)
1a000974:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000978:	3301      	adds	r3, #1
1a00097a:	2b1c      	cmp	r3, #28
1a00097c:	d9f0      	bls.n	1a000960 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00097e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000982:	4770      	bx	lr
1a000984:	4770      	bx	lr
1a000986:	bf00      	nop
1a000988:	1a0038f8 	.word	0x1a0038f8
1a00098c:	40086000 	.word	0x40086000

1a000990 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000990:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000992:	4a17      	ldr	r2, [pc, #92]	; (1a0009f0 <Board_SetupClocking+0x60>)
1a000994:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000998:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a00099c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0009a0:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0009a4:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0009a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0009ac:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0009b0:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0009b4:	2201      	movs	r2, #1
1a0009b6:	490f      	ldr	r1, [pc, #60]	; (1a0009f4 <Board_SetupClocking+0x64>)
1a0009b8:	2006      	movs	r0, #6
1a0009ba:	f000 fc6d 	bl	1a001298 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0009be:	2400      	movs	r4, #0
1a0009c0:	b14c      	cbz	r4, 1a0009d6 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0009c2:	4b0b      	ldr	r3, [pc, #44]	; (1a0009f0 <Board_SetupClocking+0x60>)
1a0009c4:	685a      	ldr	r2, [r3, #4]
1a0009c6:	f022 020c 	bic.w	r2, r2, #12
1a0009ca:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0009cc:	685a      	ldr	r2, [r3, #4]
1a0009ce:	f042 0203 	orr.w	r2, r2, #3
1a0009d2:	605a      	str	r2, [r3, #4]
}
1a0009d4:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0009d6:	4808      	ldr	r0, [pc, #32]	; (1a0009f8 <Board_SetupClocking+0x68>)
1a0009d8:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0009dc:	2301      	movs	r3, #1
1a0009de:	788a      	ldrb	r2, [r1, #2]
1a0009e0:	7849      	ldrb	r1, [r1, #1]
1a0009e2:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0009e6:	f000 fba9 	bl	1a00113c <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0009ea:	3401      	adds	r4, #1
1a0009ec:	e7e8      	b.n	1a0009c0 <Board_SetupClocking+0x30>
1a0009ee:	bf00      	nop
1a0009f0:	40043000 	.word	0x40043000
1a0009f4:	0c28cb00 	.word	0x0c28cb00
1a0009f8:	1a0038f4 	.word	0x1a0038f4

1a0009fc <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0009fc:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0009fe:	f7ff ffab 	bl	1a000958 <Board_SetupMuxing>
    Board_SetupClocking();
1a000a02:	f7ff ffc5 	bl	1a000990 <Board_SetupClocking>
}
1a000a06:	bd08      	pop	{r3, pc}

1a000a08 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a000a08:	2901      	cmp	r1, #1
1a000a0a:	d000      	beq.n	1a000a0e <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a000a0c:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a000a0e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000a12:	0082      	lsls	r2, r0, #2
1a000a14:	4b03      	ldr	r3, [pc, #12]	; (1a000a24 <Chip_I2C_EventHandler+0x1c>)
1a000a16:	4413      	add	r3, r2
1a000a18:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a000a1a:	7d13      	ldrb	r3, [r2, #20]
1a000a1c:	b2db      	uxtb	r3, r3
1a000a1e:	2b04      	cmp	r3, #4
1a000a20:	d0fb      	beq.n	1a000a1a <Chip_I2C_EventHandler+0x12>
1a000a22:	e7f3      	b.n	1a000a0c <Chip_I2C_EventHandler+0x4>
1a000a24:	10000000 	.word	0x10000000

1a000a28 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a000a28:	b570      	push	{r4, r5, r6, lr}
1a000a2a:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a000a2c:	4e06      	ldr	r6, [pc, #24]	; (1a000a48 <Chip_I2C_Init+0x20>)
1a000a2e:	00c4      	lsls	r4, r0, #3
1a000a30:	1a22      	subs	r2, r4, r0
1a000a32:	0093      	lsls	r3, r2, #2
1a000a34:	4433      	add	r3, r6
1a000a36:	8898      	ldrh	r0, [r3, #4]
1a000a38:	f000 fbe4 	bl	1a001204 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a000a3c:	1b64      	subs	r4, r4, r5
1a000a3e:	00a3      	lsls	r3, r4, #2
1a000a40:	58f3      	ldr	r3, [r6, r3]
1a000a42:	226c      	movs	r2, #108	; 0x6c
1a000a44:	619a      	str	r2, [r3, #24]
}
1a000a46:	bd70      	pop	{r4, r5, r6, pc}
1a000a48:	10000000 	.word	0x10000000

1a000a4c <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a000a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000a50:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a000a52:	4e0b      	ldr	r6, [pc, #44]	; (1a000a80 <Chip_I2C_SetClockRate+0x34>)
1a000a54:	00c5      	lsls	r5, r0, #3
1a000a56:	1a2b      	subs	r3, r5, r0
1a000a58:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a000a5c:	eb06 0308 	add.w	r3, r6, r8
1a000a60:	8898      	ldrh	r0, [r3, #4]
1a000a62:	f000 fbe9 	bl	1a001238 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a000a66:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a000a6a:	f856 3008 	ldr.w	r3, [r6, r8]
1a000a6e:	0842      	lsrs	r2, r0, #1
1a000a70:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a000a72:	f856 3008 	ldr.w	r3, [r6, r8]
1a000a76:	691a      	ldr	r2, [r3, #16]
1a000a78:	1a80      	subs	r0, r0, r2
1a000a7a:	6158      	str	r0, [r3, #20]
}
1a000a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000a80:	10000000 	.word	0x10000000

1a000a84 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a000a84:	4b09      	ldr	r3, [pc, #36]	; (1a000aac <Chip_UART_GetIndex+0x28>)
1a000a86:	4298      	cmp	r0, r3
1a000a88:	d009      	beq.n	1a000a9e <Chip_UART_GetIndex+0x1a>
1a000a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a000a8e:	4298      	cmp	r0, r3
1a000a90:	d007      	beq.n	1a000aa2 <Chip_UART_GetIndex+0x1e>
1a000a92:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a000a96:	4298      	cmp	r0, r3
1a000a98:	d005      	beq.n	1a000aa6 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a000a9a:	2000      	movs	r0, #0
1a000a9c:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a000a9e:	2002      	movs	r0, #2
1a000aa0:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a000aa2:	2003      	movs	r0, #3
1a000aa4:	4770      	bx	lr
			return 1;
1a000aa6:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a000aa8:	4770      	bx	lr
1a000aaa:	bf00      	nop
1a000aac:	400c1000 	.word	0x400c1000

1a000ab0 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000ab0:	b530      	push	{r4, r5, lr}
1a000ab2:	b083      	sub	sp, #12
1a000ab4:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000ab6:	f7ff ffe5 	bl	1a000a84 <Chip_UART_GetIndex>
1a000aba:	2301      	movs	r3, #1
1a000abc:	461a      	mov	r2, r3
1a000abe:	4619      	mov	r1, r3
1a000ac0:	4d0e      	ldr	r5, [pc, #56]	; (1a000afc <Chip_UART_Init+0x4c>)
1a000ac2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a000ac6:	f000 fb7f 	bl	1a0011c8 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a000aca:	2307      	movs	r3, #7
1a000acc:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a000ace:	2300      	movs	r3, #0
1a000ad0:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a000ad2:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a000ad4:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a000ad6:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a000ad8:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a000ada:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a000adc:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a000ade:	4b08      	ldr	r3, [pc, #32]	; (1a000b00 <Chip_UART_Init+0x50>)
1a000ae0:	429c      	cmp	r4, r3
1a000ae2:	d006      	beq.n	1a000af2 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a000ae4:	2303      	movs	r3, #3
1a000ae6:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a000ae8:	2310      	movs	r3, #16
1a000aea:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a000aec:	9b01      	ldr	r3, [sp, #4]
}
1a000aee:	b003      	add	sp, #12
1a000af0:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a000af2:	2300      	movs	r3, #0
1a000af4:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a000af6:	69a3      	ldr	r3, [r4, #24]
1a000af8:	9301      	str	r3, [sp, #4]
1a000afa:	e7f3      	b.n	1a000ae4 <Chip_UART_Init+0x34>
1a000afc:	1a003974 	.word	0x1a003974
1a000b00:	40082000 	.word	0x40082000

1a000b04 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a000b04:	b538      	push	{r3, r4, r5, lr}
1a000b06:	4605      	mov	r5, r0
1a000b08:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000b0a:	f7ff ffbb 	bl	1a000a84 <Chip_UART_GetIndex>
1a000b0e:	4b0c      	ldr	r3, [pc, #48]	; (1a000b40 <Chip_UART_SetBaud+0x3c>)
1a000b10:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000b14:	f000 fb90 	bl	1a001238 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a000b18:	0123      	lsls	r3, r4, #4
1a000b1a:	fbb0 f3f3 	udiv	r3, r0, r3
1a000b1e:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000b20:	68ea      	ldr	r2, [r5, #12]
1a000b22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a000b26:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a000b28:	6029      	str	r1, [r5, #0]
1a000b2a:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a000b2e:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000b30:	68ea      	ldr	r2, [r5, #12]
1a000b32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a000b36:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a000b38:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a000b3c:	0900      	lsrs	r0, r0, #4
1a000b3e:	bd38      	pop	{r3, r4, r5, pc}
1a000b40:	1a00396c 	.word	0x1a00396c

1a000b44 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000b48:	b083      	sub	sp, #12
1a000b4a:	4683      	mov	fp, r0
1a000b4c:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000b4e:	f7ff ff99 	bl	1a000a84 <Chip_UART_GetIndex>
1a000b52:	4b35      	ldr	r3, [pc, #212]	; (1a000c28 <Chip_UART_SetBaudFDR+0xe4>)
1a000b54:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000b58:	f000 fb6e 	bl	1a001238 <Chip_Clock_GetRate>
1a000b5c:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a000b5e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000b62:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a000b64:	2300      	movs	r3, #0
1a000b66:	9301      	str	r3, [sp, #4]
1a000b68:	46a2      	mov	sl, r4
1a000b6a:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a000b6c:	e02a      	b.n	1a000bc4 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a000b6e:	4242      	negs	r2, r0
				div ++;
1a000b70:	1c4b      	adds	r3, r1, #1
1a000b72:	e017      	b.n	1a000ba4 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a000b74:	b30a      	cbz	r2, 1a000bba <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a000b76:	4617      	mov	r7, r2
			sd = d;
1a000b78:	9501      	str	r5, [sp, #4]
			sm = m;
1a000b7a:	46a2      	mov	sl, r4
			sdiv = div;
1a000b7c:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a000b7e:	3501      	adds	r5, #1
1a000b80:	42ac      	cmp	r4, r5
1a000b82:	d91e      	bls.n	1a000bc2 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000b84:	0933      	lsrs	r3, r6, #4
1a000b86:	0730      	lsls	r0, r6, #28
1a000b88:	fba4 0100 	umull	r0, r1, r4, r0
1a000b8c:	fb04 1103 	mla	r1, r4, r3, r1
1a000b90:	1962      	adds	r2, r4, r5
1a000b92:	fb08 f202 	mul.w	r2, r8, r2
1a000b96:	2300      	movs	r3, #0
1a000b98:	f000 ff2a 	bl	1a0019f0 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a000b9c:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a000b9e:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a000ba0:	2800      	cmp	r0, #0
1a000ba2:	dbe4      	blt.n	1a000b6e <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000ba4:	4297      	cmp	r7, r2
1a000ba6:	d3ea      	bcc.n	1a000b7e <Chip_UART_SetBaudFDR+0x3a>
1a000ba8:	2b00      	cmp	r3, #0
1a000baa:	d0e8      	beq.n	1a000b7e <Chip_UART_SetBaudFDR+0x3a>
1a000bac:	0c19      	lsrs	r1, r3, #16
1a000bae:	d1e6      	bne.n	1a000b7e <Chip_UART_SetBaudFDR+0x3a>
1a000bb0:	2b02      	cmp	r3, #2
1a000bb2:	d8df      	bhi.n	1a000b74 <Chip_UART_SetBaudFDR+0x30>
1a000bb4:	2d00      	cmp	r5, #0
1a000bb6:	d0dd      	beq.n	1a000b74 <Chip_UART_SetBaudFDR+0x30>
1a000bb8:	e7e1      	b.n	1a000b7e <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a000bba:	4617      	mov	r7, r2
			sd = d;
1a000bbc:	9501      	str	r5, [sp, #4]
			sm = m;
1a000bbe:	46a2      	mov	sl, r4
			sdiv = div;
1a000bc0:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a000bc2:	3401      	adds	r4, #1
1a000bc4:	b11f      	cbz	r7, 1a000bce <Chip_UART_SetBaudFDR+0x8a>
1a000bc6:	2c0f      	cmp	r4, #15
1a000bc8:	d801      	bhi.n	1a000bce <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a000bca:	2500      	movs	r5, #0
1a000bcc:	e7d8      	b.n	1a000b80 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a000bce:	f1b9 0f00 	cmp.w	r9, #0
1a000bd2:	d024      	beq.n	1a000c1e <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000bd4:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000bdc:	f8cb 300c 	str.w	r3, [fp, #12]
1a000be0:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a000be4:	f8cb 3000 	str.w	r3, [fp]
1a000be8:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a000bec:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000bf0:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000bf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000bf8:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000bfc:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000c00:	b2db      	uxtb	r3, r3
1a000c02:	9901      	ldr	r1, [sp, #4]
1a000c04:	f001 020f 	and.w	r2, r1, #15
1a000c08:	4313      	orrs	r3, r2
1a000c0a:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000c0e:	0933      	lsrs	r3, r6, #4
1a000c10:	fb0a f303 	mul.w	r3, sl, r3
1a000c14:	448a      	add	sl, r1
1a000c16:	fb09 f90a 	mul.w	r9, r9, sl
1a000c1a:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a000c1e:	4648      	mov	r0, r9
1a000c20:	b003      	add	sp, #12
1a000c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000c26:	bf00      	nop
1a000c28:	1a00396c 	.word	0x1a00396c

1a000c2c <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000c2c:	4b03      	ldr	r3, [pc, #12]	; (1a000c3c <Chip_ADC_GetClockIndex+0x10>)
1a000c2e:	4298      	cmp	r0, r3
1a000c30:	d001      	beq.n	1a000c36 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000c32:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000c34:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a000c36:	2004      	movs	r0, #4
1a000c38:	4770      	bx	lr
1a000c3a:	bf00      	nop
1a000c3c:	400e4000 	.word	0x400e4000

1a000c40 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000c40:	b570      	push	{r4, r5, r6, lr}
1a000c42:	460d      	mov	r5, r1
1a000c44:	4614      	mov	r4, r2
1a000c46:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000c48:	f7ff fff0 	bl	1a000c2c <Chip_ADC_GetClockIndex>
1a000c4c:	f000 faf4 	bl	1a001238 <Chip_Clock_GetRate>
	if (burstMode) {
1a000c50:	b965      	cbnz	r5, 1a000c6c <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a000c52:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000c56:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000c5a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000c5e:	0064      	lsls	r4, r4, #1
1a000c60:	fbb0 f0f4 	udiv	r0, r0, r4
1a000c64:	b2c0      	uxtb	r0, r0
1a000c66:	3801      	subs	r0, #1
	return div;
}
1a000c68:	b2c0      	uxtb	r0, r0
1a000c6a:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a000c6c:	fb04 f406 	mul.w	r4, r4, r6
1a000c70:	e7f3      	b.n	1a000c5a <getClkDiv+0x1a>
1a000c72:	Address 0x000000001a000c72 is out of bounds.


1a000c74 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000c74:	b538      	push	{r3, r4, r5, lr}
1a000c76:	4605      	mov	r5, r0
1a000c78:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a000c7a:	f7ff ffd7 	bl	1a000c2c <Chip_ADC_GetClockIndex>
1a000c7e:	2301      	movs	r3, #1
1a000c80:	461a      	mov	r2, r3
1a000c82:	4619      	mov	r1, r3
1a000c84:	f000 faa0 	bl	1a0011c8 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a000c88:	2100      	movs	r1, #0
1a000c8a:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000c8c:	4a08      	ldr	r2, [pc, #32]	; (1a000cb0 <Chip_ADC_Init+0x3c>)
1a000c8e:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000c90:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000c92:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000c94:	230b      	movs	r3, #11
1a000c96:	4628      	mov	r0, r5
1a000c98:	f7ff ffd2 	bl	1a000c40 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000c9c:	0200      	lsls	r0, r0, #8
1a000c9e:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000ca2:	7920      	ldrb	r0, [r4, #4]
1a000ca4:	0440      	lsls	r0, r0, #17
1a000ca6:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a000caa:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a000cac:	6028      	str	r0, [r5, #0]
}
1a000cae:	bd38      	pop	{r3, r4, r5, pc}
1a000cb0:	00061a80 	.word	0x00061a80

1a000cb4 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000cb4:	b570      	push	{r4, r5, r6, lr}
1a000cb6:	4605      	mov	r5, r0
1a000cb8:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a000cba:	6804      	ldr	r4, [r0, #0]
1a000cbc:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000cc0:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000cc4:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a000cc6:	790b      	ldrb	r3, [r1, #4]
1a000cc8:	f1c3 030b 	rsb	r3, r3, #11
1a000ccc:	b2db      	uxtb	r3, r3
1a000cce:	7949      	ldrb	r1, [r1, #5]
1a000cd0:	f7ff ffb6 	bl	1a000c40 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000cd4:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000cd8:	7930      	ldrb	r0, [r6, #4]
1a000cda:	0440      	lsls	r0, r0, #17
1a000cdc:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a000ce0:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a000ce2:	6028      	str	r0, [r5, #0]
}
1a000ce4:	bd70      	pop	{r4, r5, r6, pc}

1a000ce6 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a000ce6:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a000ce8:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a000cea:	680a      	ldr	r2, [r1, #0]
1a000cec:	f7ff ffe2 	bl	1a000cb4 <Chip_ADC_SetSampleRate>
}
1a000cf0:	bd08      	pop	{r3, pc}
1a000cf2:	Address 0x000000001a000cf2 is out of bounds.


1a000cf4 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000cf4:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000cf6:	680b      	ldr	r3, [r1, #0]
1a000cf8:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000cfc:	d002      	beq.n	1a000d04 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a000cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000d02:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a000d04:	4607      	mov	r7, r0
1a000d06:	2501      	movs	r5, #1
1a000d08:	e03b      	b.n	1a000d82 <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a000d0a:	694b      	ldr	r3, [r1, #20]
1a000d0c:	fb03 f302 	mul.w	r3, r3, r2
1a000d10:	fbb3 f3f5 	udiv	r3, r3, r5
1a000d14:	e014      	b.n	1a000d40 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a000d16:	461c      	mov	r4, r3
1a000d18:	e020      	b.n	1a000d5c <pll_calc_divs+0x68>
		return -val;
1a000d1a:	f1cc 0c00 	rsb	ip, ip, #0
1a000d1e:	e020      	b.n	1a000d62 <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a000d20:	3201      	adds	r2, #1
1a000d22:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000d26:	dc26      	bgt.n	1a000d76 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a000d28:	680c      	ldr	r4, [r1, #0]
1a000d2a:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000d2e:	d0ec      	beq.n	1a000d0a <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000d30:	1c73      	adds	r3, r6, #1
1a000d32:	fa02 fc03 	lsl.w	ip, r2, r3
1a000d36:	694b      	ldr	r3, [r1, #20]
1a000d38:	fb03 f30c 	mul.w	r3, r3, ip
1a000d3c:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000d40:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a000d90 <pll_calc_divs+0x9c>
1a000d44:	4563      	cmp	r3, ip
1a000d46:	d9eb      	bls.n	1a000d20 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a000d48:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a000d94 <pll_calc_divs+0xa0>
1a000d4c:	4563      	cmp	r3, ip
1a000d4e:	d812      	bhi.n	1a000d76 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a000d50:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000d54:	d1df      	bne.n	1a000d16 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a000d56:	1c74      	adds	r4, r6, #1
1a000d58:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a000d5c:	ebb0 0c04 	subs.w	ip, r0, r4
1a000d60:	d4db      	bmi.n	1a000d1a <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a000d62:	4567      	cmp	r7, ip
1a000d64:	d9dc      	bls.n	1a000d20 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a000d66:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a000d68:	1c77      	adds	r7, r6, #1
1a000d6a:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a000d6c:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a000d6e:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a000d70:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000d72:	4667      	mov	r7, ip
1a000d74:	e7d4      	b.n	1a000d20 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a000d76:	3601      	adds	r6, #1
1a000d78:	2e03      	cmp	r6, #3
1a000d7a:	dc01      	bgt.n	1a000d80 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a000d7c:	2201      	movs	r2, #1
1a000d7e:	e7d0      	b.n	1a000d22 <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a000d80:	3501      	adds	r5, #1
1a000d82:	2d04      	cmp	r5, #4
1a000d84:	dc01      	bgt.n	1a000d8a <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a000d86:	2600      	movs	r6, #0
1a000d88:	e7f6      	b.n	1a000d78 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a000d8a:	bcf0      	pop	{r4, r5, r6, r7}
1a000d8c:	4770      	bx	lr
1a000d8e:	bf00      	nop
1a000d90:	094c5eff 	.word	0x094c5eff
1a000d94:	1312d000 	.word	0x1312d000

1a000d98 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000d98:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000d9a:	b099      	sub	sp, #100	; 0x64
1a000d9c:	4605      	mov	r5, r0
1a000d9e:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000da0:	225c      	movs	r2, #92	; 0x5c
1a000da2:	2100      	movs	r1, #0
1a000da4:	a801      	add	r0, sp, #4
1a000da6:	f000 ffd2 	bl	1a001d4e <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a000daa:	2380      	movs	r3, #128	; 0x80
1a000dac:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a000dae:	6963      	ldr	r3, [r4, #20]
1a000db0:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a000db2:	7923      	ldrb	r3, [r4, #4]
1a000db4:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a000db8:	4669      	mov	r1, sp
1a000dba:	4628      	mov	r0, r5
1a000dbc:	f7ff ff9a 	bl	1a000cf4 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000dc0:	9b06      	ldr	r3, [sp, #24]
1a000dc2:	42ab      	cmp	r3, r5
1a000dc4:	d027      	beq.n	1a000e16 <pll_get_frac+0x7e>
	if (val < 0)
1a000dc6:	1aeb      	subs	r3, r5, r3
1a000dc8:	d42e      	bmi.n	1a000e28 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000dca:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000dcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a000dce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000dd2:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a000dd4:	6963      	ldr	r3, [r4, #20]
1a000dd6:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a000dd8:	7923      	ldrb	r3, [r4, #4]
1a000dda:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a000dde:	a910      	add	r1, sp, #64	; 0x40
1a000de0:	4628      	mov	r0, r5
1a000de2:	f7ff ff87 	bl	1a000cf4 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000de6:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000de8:	42ab      	cmp	r3, r5
1a000dea:	d01f      	beq.n	1a000e2c <pll_get_frac+0x94>
	if (val < 0)
1a000dec:	1aeb      	subs	r3, r5, r3
1a000dee:	d425      	bmi.n	1a000e3c <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000df0:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a000df2:	4b2b      	ldr	r3, [pc, #172]	; (1a000ea0 <pll_get_frac+0x108>)
1a000df4:	429d      	cmp	r5, r3
1a000df6:	d923      	bls.n	1a000e40 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000df8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a000dfa:	1aed      	subs	r5, r5, r3
1a000dfc:	d433      	bmi.n	1a000e66 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000dfe:	42ae      	cmp	r6, r5
1a000e00:	dc3b      	bgt.n	1a000e7a <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a000e02:	42be      	cmp	r6, r7
1a000e04:	dc31      	bgt.n	1a000e6a <pll_get_frac+0xd2>
			*ppll = pll[0];
1a000e06:	466d      	mov	r5, sp
1a000e08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000e0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000e0c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000e10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000e14:	e006      	b.n	1a000e24 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a000e16:	466d      	mov	r5, sp
1a000e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000e1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000e20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000e24:	b019      	add	sp, #100	; 0x64
1a000e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000e28:	425b      	negs	r3, r3
1a000e2a:	e7ce      	b.n	1a000dca <pll_get_frac+0x32>
		*ppll = pll[2];
1a000e2c:	ad10      	add	r5, sp, #64	; 0x40
1a000e2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000e30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000e32:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000e36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000e3a:	e7f3      	b.n	1a000e24 <pll_get_frac+0x8c>
		return -val;
1a000e3c:	425b      	negs	r3, r3
1a000e3e:	e7d7      	b.n	1a000df0 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a000e40:	2340      	movs	r3, #64	; 0x40
1a000e42:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a000e44:	6963      	ldr	r3, [r4, #20]
1a000e46:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a000e48:	a908      	add	r1, sp, #32
1a000e4a:	4628      	mov	r0, r5
1a000e4c:	f7ff ff52 	bl	1a000cf4 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000e50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000e52:	42ab      	cmp	r3, r5
1a000e54:	d1d0      	bne.n	1a000df8 <pll_get_frac+0x60>
			*ppll = pll[1];
1a000e56:	ad08      	add	r5, sp, #32
1a000e58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000e5c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000e60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000e64:	e7de      	b.n	1a000e24 <pll_get_frac+0x8c>
		return -val;
1a000e66:	426d      	negs	r5, r5
1a000e68:	e7c9      	b.n	1a000dfe <pll_get_frac+0x66>
			*ppll = pll[2];
1a000e6a:	ad10      	add	r5, sp, #64	; 0x40
1a000e6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000e70:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000e74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000e78:	e7d4      	b.n	1a000e24 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a000e7a:	42af      	cmp	r7, r5
1a000e7c:	db07      	blt.n	1a000e8e <pll_get_frac+0xf6>
			*ppll = pll[1];
1a000e7e:	ad08      	add	r5, sp, #32
1a000e80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000e82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000e84:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000e88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000e8c:	e7ca      	b.n	1a000e24 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a000e8e:	ad10      	add	r5, sp, #64	; 0x40
1a000e90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000e92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000e94:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000e98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000e9c:	e7c2      	b.n	1a000e24 <pll_get_frac+0x8c>
1a000e9e:	bf00      	nop
1a000ea0:	068e7780 	.word	0x068e7780

1a000ea4 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000ea4:	b430      	push	{r4, r5}
1a000ea6:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a000ea8:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000eaa:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000eac:	e000      	b.n	1a000eb0 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000eae:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000eb0:	281c      	cmp	r0, #28
1a000eb2:	d118      	bne.n	1a000ee6 <Chip_Clock_FindBaseClock+0x42>
1a000eb4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000eb8:	0051      	lsls	r1, r2, #1
1a000eba:	4a0c      	ldr	r2, [pc, #48]	; (1a000eec <Chip_Clock_FindBaseClock+0x48>)
1a000ebc:	440a      	add	r2, r1
1a000ebe:	7914      	ldrb	r4, [r2, #4]
1a000ec0:	4284      	cmp	r4, r0
1a000ec2:	d010      	beq.n	1a000ee6 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000ec4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000ec8:	004a      	lsls	r2, r1, #1
1a000eca:	4908      	ldr	r1, [pc, #32]	; (1a000eec <Chip_Clock_FindBaseClock+0x48>)
1a000ecc:	5a8a      	ldrh	r2, [r1, r2]
1a000ece:	42aa      	cmp	r2, r5
1a000ed0:	d8ed      	bhi.n	1a000eae <Chip_Clock_FindBaseClock+0xa>
1a000ed2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000ed6:	0051      	lsls	r1, r2, #1
1a000ed8:	4a04      	ldr	r2, [pc, #16]	; (1a000eec <Chip_Clock_FindBaseClock+0x48>)
1a000eda:	440a      	add	r2, r1
1a000edc:	8852      	ldrh	r2, [r2, #2]
1a000ede:	42aa      	cmp	r2, r5
1a000ee0:	d3e5      	bcc.n	1a000eae <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a000ee2:	4620      	mov	r0, r4
1a000ee4:	e7e4      	b.n	1a000eb0 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a000ee6:	bc30      	pop	{r4, r5}
1a000ee8:	4770      	bx	lr
1a000eea:	bf00      	nop
1a000eec:	1a003988 	.word	0x1a003988

1a000ef0 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000ef0:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000ef6:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000ef8:	4a0d      	ldr	r2, [pc, #52]	; (1a000f30 <Chip_Clock_EnableCrystal+0x40>)
1a000efa:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a000efc:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000f00:	6992      	ldr	r2, [r2, #24]
1a000f02:	428a      	cmp	r2, r1
1a000f04:	d001      	beq.n	1a000f0a <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000f06:	4a0a      	ldr	r2, [pc, #40]	; (1a000f30 <Chip_Clock_EnableCrystal+0x40>)
1a000f08:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a000f0a:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a000f0e:	4a09      	ldr	r2, [pc, #36]	; (1a000f34 <Chip_Clock_EnableCrystal+0x44>)
1a000f10:	6811      	ldr	r1, [r2, #0]
1a000f12:	4a09      	ldr	r2, [pc, #36]	; (1a000f38 <Chip_Clock_EnableCrystal+0x48>)
1a000f14:	4291      	cmp	r1, r2
1a000f16:	d901      	bls.n	1a000f1c <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a000f18:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000f1c:	4a04      	ldr	r2, [pc, #16]	; (1a000f30 <Chip_Clock_EnableCrystal+0x40>)
1a000f1e:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a000f20:	9b01      	ldr	r3, [sp, #4]
1a000f22:	1e5a      	subs	r2, r3, #1
1a000f24:	9201      	str	r2, [sp, #4]
1a000f26:	2b00      	cmp	r3, #0
1a000f28:	d1fa      	bne.n	1a000f20 <Chip_Clock_EnableCrystal+0x30>
}
1a000f2a:	b002      	add	sp, #8
1a000f2c:	4770      	bx	lr
1a000f2e:	bf00      	nop
1a000f30:	40050000 	.word	0x40050000
1a000f34:	1a0038f0 	.word	0x1a0038f0
1a000f38:	01312cff 	.word	0x01312cff

1a000f3c <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000f3c:	3012      	adds	r0, #18
1a000f3e:	4b05      	ldr	r3, [pc, #20]	; (1a000f54 <Chip_Clock_GetDividerSource+0x18>)
1a000f40:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a000f44:	f010 0f01 	tst.w	r0, #1
1a000f48:	d102      	bne.n	1a000f50 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000f4a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000f4e:	4770      	bx	lr
		return CLKINPUT_PD;
1a000f50:	2011      	movs	r0, #17
}
1a000f52:	4770      	bx	lr
1a000f54:	40050000 	.word	0x40050000

1a000f58 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000f58:	f100 0212 	add.w	r2, r0, #18
1a000f5c:	4b03      	ldr	r3, [pc, #12]	; (1a000f6c <Chip_Clock_GetDividerDivisor+0x14>)
1a000f5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000f62:	4b03      	ldr	r3, [pc, #12]	; (1a000f70 <Chip_Clock_GetDividerDivisor+0x18>)
1a000f64:	5c18      	ldrb	r0, [r3, r0]
}
1a000f66:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000f6a:	4770      	bx	lr
1a000f6c:	40050000 	.word	0x40050000
1a000f70:	1a003980 	.word	0x1a003980

1a000f74 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000f74:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a000f76:	2810      	cmp	r0, #16
1a000f78:	d80a      	bhi.n	1a000f90 <Chip_Clock_GetClockInputHz+0x1c>
1a000f7a:	e8df f000 	tbb	[pc, r0]
1a000f7e:	0b42      	.short	0x0b42
1a000f80:	091f160d 	.word	0x091f160d
1a000f84:	2b282522 	.word	0x2b282522
1a000f88:	322e0909 	.word	0x322e0909
1a000f8c:	3a36      	.short	0x3a36
1a000f8e:	3e          	.byte	0x3e
1a000f8f:	00          	.byte	0x00
	uint32_t rate = 0;
1a000f90:	2000      	movs	r0, #0
1a000f92:	e038      	b.n	1a001006 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a000f94:	481e      	ldr	r0, [pc, #120]	; (1a001010 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a000f96:	e036      	b.n	1a001006 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000f98:	4b1e      	ldr	r3, [pc, #120]	; (1a001014 <Chip_Clock_GetClockInputHz+0xa0>)
1a000f9a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000f9e:	f003 0307 	and.w	r3, r3, #7
1a000fa2:	2b04      	cmp	r3, #4
1a000fa4:	d130      	bne.n	1a001008 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a000fa6:	2000      	movs	r0, #0
1a000fa8:	e02d      	b.n	1a001006 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000faa:	4b1a      	ldr	r3, [pc, #104]	; (1a001014 <Chip_Clock_GetClockInputHz+0xa0>)
1a000fac:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000fb0:	f003 0307 	and.w	r3, r3, #7
1a000fb4:	2b04      	cmp	r3, #4
1a000fb6:	d029      	beq.n	1a00100c <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a000fb8:	4817      	ldr	r0, [pc, #92]	; (1a001018 <Chip_Clock_GetClockInputHz+0xa4>)
1a000fba:	e024      	b.n	1a001006 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a000fbc:	4b17      	ldr	r3, [pc, #92]	; (1a00101c <Chip_Clock_GetClockInputHz+0xa8>)
1a000fbe:	6818      	ldr	r0, [r3, #0]
		break;
1a000fc0:	e021      	b.n	1a001006 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a000fc2:	4b17      	ldr	r3, [pc, #92]	; (1a001020 <Chip_Clock_GetClockInputHz+0xac>)
1a000fc4:	6818      	ldr	r0, [r3, #0]
		break;
1a000fc6:	e01e      	b.n	1a001006 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000fc8:	4b16      	ldr	r3, [pc, #88]	; (1a001024 <Chip_Clock_GetClockInputHz+0xb0>)
1a000fca:	6818      	ldr	r0, [r3, #0]
		break;
1a000fcc:	e01b      	b.n	1a001006 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a000fce:	4b15      	ldr	r3, [pc, #84]	; (1a001024 <Chip_Clock_GetClockInputHz+0xb0>)
1a000fd0:	6858      	ldr	r0, [r3, #4]
		break;
1a000fd2:	e018      	b.n	1a001006 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a000fd4:	f000 f86a 	bl	1a0010ac <Chip_Clock_GetMainPLLHz>
		break;
1a000fd8:	e015      	b.n	1a001006 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000fda:	2100      	movs	r1, #0
1a000fdc:	f000 f89c 	bl	1a001118 <Chip_Clock_GetDivRate>
		break;
1a000fe0:	e011      	b.n	1a001006 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000fe2:	2101      	movs	r1, #1
1a000fe4:	f000 f898 	bl	1a001118 <Chip_Clock_GetDivRate>
		break;
1a000fe8:	e00d      	b.n	1a001006 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000fea:	2102      	movs	r1, #2
1a000fec:	f000 f894 	bl	1a001118 <Chip_Clock_GetDivRate>
		break;
1a000ff0:	e009      	b.n	1a001006 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000ff2:	2103      	movs	r1, #3
1a000ff4:	f000 f890 	bl	1a001118 <Chip_Clock_GetDivRate>
		break;
1a000ff8:	e005      	b.n	1a001006 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000ffa:	2104      	movs	r1, #4
1a000ffc:	f000 f88c 	bl	1a001118 <Chip_Clock_GetDivRate>
		break;
1a001000:	e001      	b.n	1a001006 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a001002:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a001006:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a001008:	4803      	ldr	r0, [pc, #12]	; (1a001018 <Chip_Clock_GetClockInputHz+0xa4>)
1a00100a:	e7fc      	b.n	1a001006 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a00100c:	4806      	ldr	r0, [pc, #24]	; (1a001028 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a00100e:	e7fa      	b.n	1a001006 <Chip_Clock_GetClockInputHz+0x92>
1a001010:	00b71b00 	.word	0x00b71b00
1a001014:	40043000 	.word	0x40043000
1a001018:	017d7840 	.word	0x017d7840
1a00101c:	1a0038c4 	.word	0x1a0038c4
1a001020:	1a0038f0 	.word	0x1a0038f0
1a001024:	1000021c 	.word	0x1000021c
1a001028:	02faf080 	.word	0x02faf080

1a00102c <Chip_Clock_CalcMainPLLValue>:
{
1a00102c:	b538      	push	{r3, r4, r5, lr}
1a00102e:	4605      	mov	r5, r0
1a001030:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a001032:	7908      	ldrb	r0, [r1, #4]
1a001034:	f7ff ff9e 	bl	1a000f74 <Chip_Clock_GetClockInputHz>
1a001038:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a00103a:	4b19      	ldr	r3, [pc, #100]	; (1a0010a0 <Chip_Clock_CalcMainPLLValue+0x74>)
1a00103c:	442b      	add	r3, r5
1a00103e:	4a19      	ldr	r2, [pc, #100]	; (1a0010a4 <Chip_Clock_CalcMainPLLValue+0x78>)
1a001040:	4293      	cmp	r3, r2
1a001042:	d821      	bhi.n	1a001088 <Chip_Clock_CalcMainPLLValue+0x5c>
1a001044:	b318      	cbz	r0, 1a00108e <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a001046:	2380      	movs	r3, #128	; 0x80
1a001048:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a00104a:	2300      	movs	r3, #0
1a00104c:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a00104e:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a001050:	fbb5 f3f0 	udiv	r3, r5, r0
1a001054:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a001056:	4a14      	ldr	r2, [pc, #80]	; (1a0010a8 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a001058:	4295      	cmp	r5, r2
1a00105a:	d903      	bls.n	1a001064 <Chip_Clock_CalcMainPLLValue+0x38>
1a00105c:	fb03 f000 	mul.w	r0, r3, r0
1a001060:	42a8      	cmp	r0, r5
1a001062:	d007      	beq.n	1a001074 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a001064:	4621      	mov	r1, r4
1a001066:	4628      	mov	r0, r5
1a001068:	f7ff fe96 	bl	1a000d98 <pll_get_frac>
		if (!ppll->nsel) {
1a00106c:	68a3      	ldr	r3, [r4, #8]
1a00106e:	b18b      	cbz	r3, 1a001094 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a001070:	3b01      	subs	r3, #1
1a001072:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a001074:	6923      	ldr	r3, [r4, #16]
1a001076:	b183      	cbz	r3, 1a00109a <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a001078:	68e2      	ldr	r2, [r4, #12]
1a00107a:	b10a      	cbz	r2, 1a001080 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a00107c:	3a01      	subs	r2, #1
1a00107e:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a001080:	3b01      	subs	r3, #1
1a001082:	6123      	str	r3, [r4, #16]
	return 0;
1a001084:	2000      	movs	r0, #0
}
1a001086:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a001088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00108c:	e7fb      	b.n	1a001086 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00108e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001092:	e7f8      	b.n	1a001086 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a001094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001098:	e7f5      	b.n	1a001086 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a00109a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00109e:	e7f2      	b.n	1a001086 <Chip_Clock_CalcMainPLLValue+0x5a>
1a0010a0:	ff6b3a10 	.word	0xff6b3a10
1a0010a4:	0b940510 	.word	0x0b940510
1a0010a8:	094c5eff 	.word	0x094c5eff

1a0010ac <Chip_Clock_GetMainPLLHz>:
{
1a0010ac:	b530      	push	{r4, r5, lr}
1a0010ae:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a0010b0:	4d17      	ldr	r5, [pc, #92]	; (1a001110 <Chip_Clock_GetMainPLLHz+0x64>)
1a0010b2:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a0010b4:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a0010b8:	f7ff ff5c 	bl	1a000f74 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a0010bc:	4b15      	ldr	r3, [pc, #84]	; (1a001114 <Chip_Clock_GetMainPLLHz+0x68>)
1a0010be:	681b      	ldr	r3, [r3, #0]
1a0010c0:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a0010c2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a0010c4:	f013 0f01 	tst.w	r3, #1
1a0010c8:	d01f      	beq.n	1a00110a <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a0010ca:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a0010ce:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a0010d2:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a0010d6:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a0010da:	3301      	adds	r3, #1
	n = nsel + 1;
1a0010dc:	3201      	adds	r2, #1
	p = ptab[psel];
1a0010de:	f10d 0c08 	add.w	ip, sp, #8
1a0010e2:	4461      	add	r1, ip
1a0010e4:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a0010e8:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0010ec:	d108      	bne.n	1a001100 <Chip_Clock_GetMainPLLHz+0x54>
1a0010ee:	b93d      	cbnz	r5, 1a001100 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a0010f0:	0049      	lsls	r1, r1, #1
1a0010f2:	fbb3 f3f1 	udiv	r3, r3, r1
1a0010f6:	fbb0 f0f2 	udiv	r0, r0, r2
1a0010fa:	fb00 f003 	mul.w	r0, r0, r3
1a0010fe:	e005      	b.n	1a00110c <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a001100:	fbb0 f0f2 	udiv	r0, r0, r2
1a001104:	fb03 f000 	mul.w	r0, r3, r0
1a001108:	e000      	b.n	1a00110c <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a00110a:	2000      	movs	r0, #0
}
1a00110c:	b003      	add	sp, #12
1a00110e:	bd30      	pop	{r4, r5, pc}
1a001110:	40050000 	.word	0x40050000
1a001114:	1a00397c 	.word	0x1a00397c

1a001118 <Chip_Clock_GetDivRate>:
{
1a001118:	b538      	push	{r3, r4, r5, lr}
1a00111a:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a00111c:	4608      	mov	r0, r1
1a00111e:	f7ff ff0d 	bl	1a000f3c <Chip_Clock_GetDividerSource>
1a001122:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a001124:	4620      	mov	r0, r4
1a001126:	f7ff ff17 	bl	1a000f58 <Chip_Clock_GetDividerDivisor>
1a00112a:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a00112c:	4628      	mov	r0, r5
1a00112e:	f7ff ff21 	bl	1a000f74 <Chip_Clock_GetClockInputHz>
1a001132:	3401      	adds	r4, #1
}
1a001134:	fbb0 f0f4 	udiv	r0, r0, r4
1a001138:	bd38      	pop	{r3, r4, r5, pc}
1a00113a:	Address 0x000000001a00113a is out of bounds.


1a00113c <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a00113c:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a00113e:	f100 0416 	add.w	r4, r0, #22
1a001142:	00a4      	lsls	r4, r4, #2
1a001144:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a001148:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a00114c:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a00114e:	281b      	cmp	r0, #27
1a001150:	d813      	bhi.n	1a00117a <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a001152:	2911      	cmp	r1, #17
1a001154:	d01a      	beq.n	1a00118c <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a001156:	4d0e      	ldr	r5, [pc, #56]	; (1a001190 <Chip_Clock_SetBaseClock+0x54>)
1a001158:	4025      	ands	r5, r4

			if (autoblocken) {
1a00115a:	b10a      	cbz	r2, 1a001160 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a00115c:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a001160:	b10b      	cbz	r3, 1a001166 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a001162:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a001166:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a00116a:	3016      	adds	r0, #22
1a00116c:	0080      	lsls	r0, r0, #2
1a00116e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001172:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001176:	6045      	str	r5, [r0, #4]
1a001178:	e008      	b.n	1a00118c <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a00117a:	f044 0401 	orr.w	r4, r4, #1
1a00117e:	3016      	adds	r0, #22
1a001180:	0080      	lsls	r0, r0, #2
1a001182:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001186:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00118a:	6044      	str	r4, [r0, #4]
	}
}
1a00118c:	bc30      	pop	{r4, r5}
1a00118e:	4770      	bx	lr
1a001190:	e0fff7fe 	.word	0xe0fff7fe

1a001194 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a001194:	281b      	cmp	r0, #27
1a001196:	d80c      	bhi.n	1a0011b2 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a001198:	3016      	adds	r0, #22
1a00119a:	0080      	lsls	r0, r0, #2
1a00119c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0011a0:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0011a4:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a0011a6:	f010 0f01 	tst.w	r0, #1
1a0011aa:	d104      	bne.n	1a0011b6 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0011ac:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0011b0:	4770      	bx	lr
		return CLKINPUT_PD;
1a0011b2:	2011      	movs	r0, #17
1a0011b4:	4770      	bx	lr
		return CLKINPUT_PD;
1a0011b6:	2011      	movs	r0, #17
}
1a0011b8:	4770      	bx	lr

1a0011ba <Chip_Clock_GetBaseClocktHz>:
{
1a0011ba:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a0011bc:	f7ff ffea 	bl	1a001194 <Chip_Clock_GetBaseClock>
1a0011c0:	f7ff fed8 	bl	1a000f74 <Chip_Clock_GetClockInputHz>
}
1a0011c4:	bd08      	pop	{r3, pc}
1a0011c6:	Address 0x000000001a0011c6 is out of bounds.


1a0011c8 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0011c8:	b969      	cbnz	r1, 1a0011e6 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a0011ca:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a0011cc:	b10a      	cbz	r2, 1a0011d2 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a0011ce:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0011d2:	2b02      	cmp	r3, #2
1a0011d4:	d009      	beq.n	1a0011ea <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0011d6:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0011da:	d209      	bcs.n	1a0011f0 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0011dc:	3020      	adds	r0, #32
1a0011de:	4b07      	ldr	r3, [pc, #28]	; (1a0011fc <Chip_Clock_EnableOpts+0x34>)
1a0011e0:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a0011e4:	4770      	bx	lr
		reg |= (1 << 1);
1a0011e6:	2103      	movs	r1, #3
1a0011e8:	e7f0      	b.n	1a0011cc <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a0011ea:	f041 0120 	orr.w	r1, r1, #32
1a0011ee:	e7f2      	b.n	1a0011d6 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0011f0:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0011f4:	4b02      	ldr	r3, [pc, #8]	; (1a001200 <Chip_Clock_EnableOpts+0x38>)
1a0011f6:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0011fa:	4770      	bx	lr
1a0011fc:	40051000 	.word	0x40051000
1a001200:	40052000 	.word	0x40052000

1a001204 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a001204:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001208:	d208      	bcs.n	1a00121c <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a00120a:	4a09      	ldr	r2, [pc, #36]	; (1a001230 <Chip_Clock_Enable+0x2c>)
1a00120c:	3020      	adds	r0, #32
1a00120e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001212:	f043 0301 	orr.w	r3, r3, #1
1a001216:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a00121a:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a00121c:	4a05      	ldr	r2, [pc, #20]	; (1a001234 <Chip_Clock_Enable+0x30>)
1a00121e:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001222:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001226:	f043 0301 	orr.w	r3, r3, #1
1a00122a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00122e:	4770      	bx	lr
1a001230:	40051000 	.word	0x40051000
1a001234:	40052000 	.word	0x40052000

1a001238 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001238:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a00123a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00123e:	d309      	bcc.n	1a001254 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001240:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a001244:	4a0d      	ldr	r2, [pc, #52]	; (1a00127c <Chip_Clock_GetRate+0x44>)
1a001246:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a00124a:	f014 0f01 	tst.w	r4, #1
1a00124e:	d107      	bne.n	1a001260 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a001250:	2000      	movs	r0, #0
	}

	return rate;
}
1a001252:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001254:	f100 0320 	add.w	r3, r0, #32
1a001258:	4a09      	ldr	r2, [pc, #36]	; (1a001280 <Chip_Clock_GetRate+0x48>)
1a00125a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00125e:	e7f4      	b.n	1a00124a <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a001260:	f7ff fe20 	bl	1a000ea4 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a001264:	f7ff ffa9 	bl	1a0011ba <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a001268:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a00126c:	d103      	bne.n	1a001276 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a00126e:	2301      	movs	r3, #1
		rate = rate / div;
1a001270:	fbb0 f0f3 	udiv	r0, r0, r3
1a001274:	e7ed      	b.n	1a001252 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a001276:	2302      	movs	r3, #2
1a001278:	e7fa      	b.n	1a001270 <Chip_Clock_GetRate+0x38>
1a00127a:	bf00      	nop
1a00127c:	40052000 	.word	0x40052000
1a001280:	40051000 	.word	0x40051000

1a001284 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a001284:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a001286:	2069      	movs	r0, #105	; 0x69
1a001288:	f7ff ffd6 	bl	1a001238 <Chip_Clock_GetRate>
1a00128c:	4b01      	ldr	r3, [pc, #4]	; (1a001294 <SystemCoreClockUpdate+0x10>)
1a00128e:	6018      	str	r0, [r3, #0]
}
1a001290:	bd08      	pop	{r3, pc}
1a001292:	bf00      	nop
1a001294:	10000244 	.word	0x10000244

1a001298 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a001298:	b570      	push	{r4, r5, r6, lr}
1a00129a:	b08a      	sub	sp, #40	; 0x28
1a00129c:	4605      	mov	r5, r0
1a00129e:	460e      	mov	r6, r1
1a0012a0:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0012a2:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0012a6:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0012a8:	2806      	cmp	r0, #6
1a0012aa:	d018      	beq.n	1a0012de <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0012ac:	2300      	movs	r3, #0
1a0012ae:	2201      	movs	r2, #1
1a0012b0:	4629      	mov	r1, r5
1a0012b2:	2004      	movs	r0, #4
1a0012b4:	f7ff ff42 	bl	1a00113c <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0012b8:	4a49      	ldr	r2, [pc, #292]	; (1a0013e0 <Chip_SetupCoreClock+0x148>)
1a0012ba:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0012bc:	f043 0301 	orr.w	r3, r3, #1
1a0012c0:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0012c2:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0012c6:	a901      	add	r1, sp, #4
1a0012c8:	4630      	mov	r0, r6
1a0012ca:	f7ff feaf 	bl	1a00102c <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0012ce:	4b45      	ldr	r3, [pc, #276]	; (1a0013e4 <Chip_SetupCoreClock+0x14c>)
1a0012d0:	429e      	cmp	r6, r3
1a0012d2:	d916      	bls.n	1a001302 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0012d4:	9b01      	ldr	r3, [sp, #4]
1a0012d6:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0012da:	d003      	beq.n	1a0012e4 <Chip_SetupCoreClock+0x4c>
1a0012dc:	e7fe      	b.n	1a0012dc <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a0012de:	f7ff fe07 	bl	1a000ef0 <Chip_Clock_EnableCrystal>
1a0012e2:	e7e3      	b.n	1a0012ac <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a0012e4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0012e8:	d005      	beq.n	1a0012f6 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0012ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0012ee:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a0012f0:	2500      	movs	r5, #0
			direct = 1;
1a0012f2:	2601      	movs	r6, #1
1a0012f4:	e007      	b.n	1a001306 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0012f6:	9b04      	ldr	r3, [sp, #16]
1a0012f8:	3301      	adds	r3, #1
1a0012fa:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0012fc:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a0012fe:	2600      	movs	r6, #0
1a001300:	e001      	b.n	1a001306 <Chip_SetupCoreClock+0x6e>
1a001302:	2500      	movs	r5, #0
1a001304:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001306:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00130a:	9b01      	ldr	r3, [sp, #4]
1a00130c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001310:	9a05      	ldr	r2, [sp, #20]
1a001312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001316:	9a03      	ldr	r2, [sp, #12]
1a001318:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00131c:	9a04      	ldr	r2, [sp, #16]
1a00131e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001322:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001326:	4a2e      	ldr	r2, [pc, #184]	; (1a0013e0 <Chip_SetupCoreClock+0x148>)
1a001328:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a00132a:	4b2d      	ldr	r3, [pc, #180]	; (1a0013e0 <Chip_SetupCoreClock+0x148>)
1a00132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a00132e:	f013 0f01 	tst.w	r3, #1
1a001332:	d0fa      	beq.n	1a00132a <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a001334:	2300      	movs	r3, #0
1a001336:	2201      	movs	r2, #1
1a001338:	2109      	movs	r1, #9
1a00133a:	2004      	movs	r0, #4
1a00133c:	f7ff fefe 	bl	1a00113c <Chip_Clock_SetBaseClock>

	if (direct) {
1a001340:	b1fe      	cbz	r6, 1a001382 <Chip_SetupCoreClock+0xea>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001342:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001346:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a001348:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00134a:	1e5a      	subs	r2, r3, #1
1a00134c:	9209      	str	r2, [sp, #36]	; 0x24
1a00134e:	2b00      	cmp	r3, #0
1a001350:	d1fa      	bne.n	1a001348 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a001352:	9b01      	ldr	r3, [sp, #4]
1a001354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001358:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00135a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00135e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001362:	9a05      	ldr	r2, [sp, #20]
1a001364:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001368:	9a03      	ldr	r2, [sp, #12]
1a00136a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00136e:	9a04      	ldr	r2, [sp, #16]
1a001370:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001374:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001378:	4a19      	ldr	r2, [pc, #100]	; (1a0013e0 <Chip_SetupCoreClock+0x148>)
1a00137a:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a00137c:	b36c      	cbz	r4, 1a0013da <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00137e:	2400      	movs	r4, #0
1a001380:	e029      	b.n	1a0013d6 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a001382:	2d00      	cmp	r5, #0
1a001384:	d0fa      	beq.n	1a00137c <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001386:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00138a:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a00138c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00138e:	1e5a      	subs	r2, r3, #1
1a001390:	9209      	str	r2, [sp, #36]	; 0x24
1a001392:	2b00      	cmp	r3, #0
1a001394:	d1fa      	bne.n	1a00138c <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a001396:	9b04      	ldr	r3, [sp, #16]
1a001398:	1e5a      	subs	r2, r3, #1
1a00139a:	9204      	str	r2, [sp, #16]
1a00139c:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a0013a0:	9b01      	ldr	r3, [sp, #4]
1a0013a2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0013a6:	9905      	ldr	r1, [sp, #20]
1a0013a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0013ac:	9903      	ldr	r1, [sp, #12]
1a0013ae:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0013b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0013b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0013ba:	4a09      	ldr	r2, [pc, #36]	; (1a0013e0 <Chip_SetupCoreClock+0x148>)
1a0013bc:	6453      	str	r3, [r2, #68]	; 0x44
1a0013be:	e7dd      	b.n	1a00137c <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0013c0:	4809      	ldr	r0, [pc, #36]	; (1a0013e8 <Chip_SetupCoreClock+0x150>)
1a0013c2:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0013c6:	78cb      	ldrb	r3, [r1, #3]
1a0013c8:	788a      	ldrb	r2, [r1, #2]
1a0013ca:	7849      	ldrb	r1, [r1, #1]
1a0013cc:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0013d0:	f7ff feb4 	bl	1a00113c <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0013d4:	3401      	adds	r4, #1
1a0013d6:	2c11      	cmp	r4, #17
1a0013d8:	d9f2      	bls.n	1a0013c0 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a0013da:	b00a      	add	sp, #40	; 0x28
1a0013dc:	bd70      	pop	{r4, r5, r6, pc}
1a0013de:	bf00      	nop
1a0013e0:	40050000 	.word	0x40050000
1a0013e4:	068e7780 	.word	0x068e7780
1a0013e8:	1a0039f4 	.word	0x1a0039f4

1a0013ec <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a0013ec:	4770      	bx	lr
1a0013ee:	Address 0x000000001a0013ee is out of bounds.


1a0013f0 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0013f0:	4b03      	ldr	r3, [pc, #12]	; (1a001400 <Chip_SSP_GetClockIndex+0x10>)
1a0013f2:	4298      	cmp	r0, r3
1a0013f4:	d001      	beq.n	1a0013fa <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0013f6:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0013f8:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a0013fa:	20a5      	movs	r0, #165	; 0xa5
1a0013fc:	4770      	bx	lr
1a0013fe:	bf00      	nop
1a001400:	400c5000 	.word	0x400c5000

1a001404 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001404:	4b04      	ldr	r3, [pc, #16]	; (1a001418 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a001406:	4298      	cmp	r0, r3
1a001408:	d002      	beq.n	1a001410 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a00140a:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00140e:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a001410:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a001414:	4770      	bx	lr
1a001416:	bf00      	nop
1a001418:	400c5000 	.word	0x400c5000

1a00141c <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a00141c:	6803      	ldr	r3, [r0, #0]
1a00141e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a001422:	0209      	lsls	r1, r1, #8
1a001424:	b289      	uxth	r1, r1
1a001426:	4319      	orrs	r1, r3
1a001428:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a00142a:	6102      	str	r2, [r0, #16]
}
1a00142c:	4770      	bx	lr

1a00142e <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00142e:	b570      	push	{r4, r5, r6, lr}
1a001430:	4606      	mov	r6, r0
1a001432:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001434:	f7ff ffe6 	bl	1a001404 <Chip_SSP_GetPeriphClockIndex>
1a001438:	f7ff fefe 	bl	1a001238 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a00143c:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a00143e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a001442:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a001444:	e000      	b.n	1a001448 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a001446:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a001448:	42ab      	cmp	r3, r5
1a00144a:	d90b      	bls.n	1a001464 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a00144c:	1c4c      	adds	r4, r1, #1
1a00144e:	fb02 f304 	mul.w	r3, r2, r4
1a001452:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a001456:	429d      	cmp	r5, r3
1a001458:	d2f6      	bcs.n	1a001448 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a00145a:	2cff      	cmp	r4, #255	; 0xff
1a00145c:	d9f3      	bls.n	1a001446 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a00145e:	3202      	adds	r2, #2
				cr0_div = 0;
1a001460:	2100      	movs	r1, #0
1a001462:	e7f1      	b.n	1a001448 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a001464:	4630      	mov	r0, r6
1a001466:	f7ff ffd9 	bl	1a00141c <Chip_SSP_SetClockRate>
}
1a00146a:	bd70      	pop	{r4, r5, r6, pc}

1a00146c <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a00146c:	b510      	push	{r4, lr}
1a00146e:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a001470:	f7ff ffbe 	bl	1a0013f0 <Chip_SSP_GetClockIndex>
1a001474:	f7ff fec6 	bl	1a001204 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001478:	4620      	mov	r0, r4
1a00147a:	f7ff ffc3 	bl	1a001404 <Chip_SSP_GetPeriphClockIndex>
1a00147e:	f7ff fec1 	bl	1a001204 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a001482:	6863      	ldr	r3, [r4, #4]
1a001484:	f023 0304 	bic.w	r3, r3, #4
1a001488:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00148a:	6823      	ldr	r3, [r4, #0]
1a00148c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001490:	f043 0307 	orr.w	r3, r3, #7
1a001494:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a001496:	4902      	ldr	r1, [pc, #8]	; (1a0014a0 <Chip_SSP_Init+0x34>)
1a001498:	4620      	mov	r0, r4
1a00149a:	f7ff ffc8 	bl	1a00142e <Chip_SSP_SetBitRate>
}
1a00149e:	bd10      	pop	{r4, pc}
1a0014a0:	000186a0 	.word	0x000186a0

1a0014a4 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a0014a4:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0014a6:	4a0b      	ldr	r2, [pc, #44]	; (1a0014d4 <SystemInit+0x30>)
1a0014a8:	4b0b      	ldr	r3, [pc, #44]	; (1a0014d8 <SystemInit+0x34>)
1a0014aa:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a0014ac:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a0014b0:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a0014b2:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a0014b6:	2b20      	cmp	r3, #32
1a0014b8:	d004      	beq.n	1a0014c4 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a0014ba:	f7ff fa9f 	bl	1a0009fc <Board_SystemInit>
   Board_Init();
1a0014be:	f7ff fa25 	bl	1a00090c <Board_Init>
}
1a0014c2:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0014c4:	4a04      	ldr	r2, [pc, #16]	; (1a0014d8 <SystemInit+0x34>)
1a0014c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0014ca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0014ce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a0014d2:	e7f2      	b.n	1a0014ba <SystemInit+0x16>
1a0014d4:	1a000000 	.word	0x1a000000
1a0014d8:	e000ed00 	.word	0xe000ed00

1a0014dc <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0014dc:	4b04      	ldr	r3, [pc, #16]	; (1a0014f0 <cyclesCounterInit+0x14>)
1a0014de:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a0014e0:	4a04      	ldr	r2, [pc, #16]	; (1a0014f4 <cyclesCounterInit+0x18>)
1a0014e2:	6813      	ldr	r3, [r2, #0]
1a0014e4:	f043 0301 	orr.w	r3, r3, #1
1a0014e8:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0014ea:	2001      	movs	r0, #1
1a0014ec:	4770      	bx	lr
1a0014ee:	bf00      	nop
1a0014f0:	10000038 	.word	0x10000038
1a0014f4:	e0001000 	.word	0xe0001000

1a0014f8 <uartRxReady>:
//-------------------------------------------------------------

// Return TRUE if have unread data in RX FIFO
bool_t uartRxReady( uartMap_t uart )
{
    return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
1a0014f8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0014fc:	0083      	lsls	r3, r0, #2
1a0014fe:	4a03      	ldr	r2, [pc, #12]	; (1a00150c <uartRxReady+0x14>)
1a001500:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a001502:	6958      	ldr	r0, [r3, #20]
}
1a001504:	f000 0001 	and.w	r0, r0, #1
1a001508:	4770      	bx	lr
1a00150a:	bf00      	nop
1a00150c:	1a003a3c 	.word	0x1a003a3c

1a001510 <uartTxReady>:
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
    return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a001510:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001514:	0083      	lsls	r3, r0, #2
1a001516:	4a03      	ldr	r2, [pc, #12]	; (1a001524 <uartTxReady+0x14>)
1a001518:	58d3      	ldr	r3, [r2, r3]
1a00151a:	6958      	ldr	r0, [r3, #20]
}
1a00151c:	f000 0020 	and.w	r0, r0, #32
1a001520:	4770      	bx	lr
1a001522:	bf00      	nop
1a001524:	1a003a3c 	.word	0x1a003a3c

1a001528 <uartRxRead>:
// Read from RX FIFO
uint8_t uartRxRead( uartMap_t uart )
{
    return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a001528:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a00152c:	0083      	lsls	r3, r0, #2
1a00152e:	4a02      	ldr	r2, [pc, #8]	; (1a001538 <uartRxRead+0x10>)
1a001530:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);         //uint8_t
1a001532:	6818      	ldr	r0, [r3, #0]
}
1a001534:	b2c0      	uxtb	r0, r0
1a001536:	4770      	bx	lr
1a001538:	1a003a3c 	.word	0x1a003a3c

1a00153c <uartTxWrite>:
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
    Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a00153c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001540:	0083      	lsls	r3, r0, #2
1a001542:	4a02      	ldr	r2, [pc, #8]	; (1a00154c <uartTxWrite+0x10>)
1a001544:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a001546:	6019      	str	r1, [r3, #0]
}
1a001548:	4770      	bx	lr
1a00154a:	bf00      	nop
1a00154c:	1a003a3c 	.word	0x1a003a3c

1a001550 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a001550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001554:	4680      	mov	r8, r0
1a001556:	4689      	mov	r9, r1
    // Initialize UART
    Chip_UART_Init( lpcUarts[uart].uartAddr );
1a001558:	4c19      	ldr	r4, [pc, #100]	; (1a0015c0 <uartInit+0x70>)
1a00155a:	0045      	lsls	r5, r0, #1
1a00155c:	182a      	adds	r2, r5, r0
1a00155e:	0093      	lsls	r3, r2, #2
1a001560:	18e6      	adds	r6, r4, r3
1a001562:	58e7      	ldr	r7, [r4, r3]
1a001564:	4638      	mov	r0, r7
1a001566:	f7ff faa3 	bl	1a000ab0 <Chip_UART_Init>
    // Set Baud rate
    Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a00156a:	4649      	mov	r1, r9
1a00156c:	4638      	mov	r0, r7
1a00156e:	f7ff fac9 	bl	1a000b04 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a001572:	2307      	movs	r3, #7
1a001574:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);         //uint8_t
1a001576:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a001578:	2301      	movs	r3, #1
1a00157a:	65fb      	str	r3, [r7, #92]	; 0x5c

    // Enable UART Transmission
    Chip_UART_TXEnable( lpcUarts[uart].uartAddr );

    // Configure SCU UARTn_TXD pin
    Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a00157c:	7930      	ldrb	r0, [r6, #4]
1a00157e:	7973      	ldrb	r3, [r6, #5]
1a001580:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001582:	f042 0218 	orr.w	r2, r2, #24
1a001586:	490f      	ldr	r1, [pc, #60]	; (1a0015c4 <uartInit+0x74>)
1a001588:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a00158c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                     lpcUarts[uart].txPin.lpcScuPin,
                     MD_PDN,
                     lpcUarts[uart].txPin.lpcScuFunc );

    // Configure SCU UARTn_RXD pin
    Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a001590:	79f0      	ldrb	r0, [r6, #7]
1a001592:	7a33      	ldrb	r3, [r6, #8]
1a001594:	7a72      	ldrb	r2, [r6, #9]
1a001596:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00159a:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a00159e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                     lpcUarts[uart].rxPin.lpcScuPin,
                     MD_PLN | MD_EZI | MD_ZI,
                     lpcUarts[uart].rxPin.lpcScuFunc );

    // Specific configurations for RS485
    if( uart == UART_485 )
1a0015a2:	f1b8 0f01 	cmp.w	r8, #1
1a0015a6:	d001      	beq.n	1a0015ac <uartInit+0x5c>
        Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                         lpcUart485DirPin.lpcScuPin,
                         MD_PDN,
                         lpcUart485DirPin.lpcScuFunc );
    }
}
1a0015a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a0015ac:	4a06      	ldr	r2, [pc, #24]	; (1a0015c8 <uartInit+0x78>)
1a0015ae:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a0015b0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a0015b4:	64d3      	str	r3, [r2, #76]	; 0x4c
1a0015b6:	221a      	movs	r2, #26
1a0015b8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a0015bc:	e7f4      	b.n	1a0015a8 <uartInit+0x58>
1a0015be:	bf00      	nop
1a0015c0:	1a003a3c 	.word	0x1a003a3c
1a0015c4:	40086000 	.word	0x40086000
1a0015c8:	40081000 	.word	0x40081000

1a0015cc <tickRead>:
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
   #else
      return tickCounter;
   #endif
}
1a0015cc:	4b01      	ldr	r3, [pc, #4]	; (1a0015d4 <tickRead+0x8>)
1a0015ce:	e9d3 0100 	ldrd	r0, r1, [r3]
1a0015d2:	4770      	bx	lr
1a0015d4:	10000228 	.word	0x10000228

1a0015d8 <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a0015d8:	b918      	cbnz	r0, 1a0015e2 <tickPowerSet+0xa>
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a0015da:	4b04      	ldr	r3, [pc, #16]	; (1a0015ec <tickPowerSet+0x14>)
1a0015dc:	2200      	movs	r2, #0
1a0015de:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a0015e0:	4770      	bx	lr
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a0015e2:	4b02      	ldr	r3, [pc, #8]	; (1a0015ec <tickPowerSet+0x14>)
1a0015e4:	2207      	movs	r2, #7
1a0015e6:	601a      	str	r2, [r3, #0]
1a0015e8:	4770      	bx	lr
1a0015ea:	bf00      	nop
1a0015ec:	e000e010 	.word	0xe000e010

1a0015f0 <tickInit>:
{
1a0015f0:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a0015f2:	ea50 0301 	orrs.w	r3, r0, r1
1a0015f6:	d02a      	beq.n	1a00164e <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a0015f8:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a0015fc:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a001600:	2b00      	cmp	r3, #0
1a001602:	bf08      	it	eq
1a001604:	2a32      	cmpeq	r2, #50	; 0x32
1a001606:	d227      	bcs.n	1a001658 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a001608:	4b14      	ldr	r3, [pc, #80]	; (1a00165c <tickInit+0x6c>)
1a00160a:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a00160e:	4b14      	ldr	r3, [pc, #80]	; (1a001660 <tickInit+0x70>)
1a001610:	681b      	ldr	r3, [r3, #0]
1a001612:	fba3 4500 	umull	r4, r5, r3, r0
1a001616:	fb03 5501 	mla	r5, r3, r1, r5
1a00161a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00161e:	2300      	movs	r3, #0
1a001620:	4620      	mov	r0, r4
1a001622:	4629      	mov	r1, r5
1a001624:	f000 f9e4 	bl	1a0019f0 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a001628:	3801      	subs	r0, #1
1a00162a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a00162e:	d209      	bcs.n	1a001644 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a001630:	4b0c      	ldr	r3, [pc, #48]	; (1a001664 <tickInit+0x74>)
1a001632:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001634:	4a0c      	ldr	r2, [pc, #48]	; (1a001668 <tickInit+0x78>)
1a001636:	21e0      	movs	r1, #224	; 0xe0
1a001638:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a00163c:	2200      	movs	r2, #0
1a00163e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a001640:	2207      	movs	r2, #7
1a001642:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a001644:	2001      	movs	r0, #1
1a001646:	f7ff ffc7 	bl	1a0015d8 <tickPowerSet>
      bool_t ret_val = 1;
1a00164a:	2001      	movs	r0, #1
}
1a00164c:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a00164e:	2000      	movs	r0, #0
1a001650:	f7ff ffc2 	bl	1a0015d8 <tickPowerSet>
         ret_val = 0;
1a001654:	2000      	movs	r0, #0
1a001656:	e7f9      	b.n	1a00164c <tickInit+0x5c>
            ret_val = 0;
1a001658:	2000      	movs	r0, #0
1a00165a:	e7f7      	b.n	1a00164c <tickInit+0x5c>
1a00165c:	10000040 	.word	0x10000040
1a001660:	10000244 	.word	0x10000244
1a001664:	e000e010 	.word	0xe000e010
1a001668:	e000ed00 	.word	0xe000ed00

1a00166c <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a00166c:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a001670:	4908      	ldr	r1, [pc, #32]	; (1a001694 <SysTick_Handler+0x28>)
1a001672:	e9d1 2300 	ldrd	r2, r3, [r1]
1a001676:	f112 0b01 	adds.w	fp, r2, #1
1a00167a:	f143 0c00 	adc.w	ip, r3, #0
1a00167e:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a001682:	4b05      	ldr	r3, [pc, #20]	; (1a001698 <SysTick_Handler+0x2c>)
1a001684:	681b      	ldr	r3, [r3, #0]
1a001686:	b113      	cbz	r3, 1a00168e <SysTick_Handler+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a001688:	4a04      	ldr	r2, [pc, #16]	; (1a00169c <SysTick_Handler+0x30>)
1a00168a:	6810      	ldr	r0, [r2, #0]
1a00168c:	4798      	blx	r3
   }
}
1a00168e:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a001692:	bf00      	nop
1a001694:	10000228 	.word	0x10000228
1a001698:	10000230 	.word	0x10000230
1a00169c:	10000224 	.word	0x10000224

1a0016a0 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a0016a0:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a0016a2:	4d0b      	ldr	r5, [pc, #44]	; (1a0016d0 <gpioObtainPinInit+0x30>)
1a0016a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0016a8:	182c      	adds	r4, r5, r0
1a0016aa:	5628      	ldrsb	r0, [r5, r0]
1a0016ac:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a0016ae:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a0016b2:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a0016b4:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a0016b8:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a0016ba:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a0016be:	9b02      	ldr	r3, [sp, #8]
1a0016c0:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a0016c2:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a0016c6:	9b03      	ldr	r3, [sp, #12]
1a0016c8:	701a      	strb	r2, [r3, #0]
}
1a0016ca:	bc30      	pop	{r4, r5}
1a0016cc:	4770      	bx	lr
1a0016ce:	bf00      	nop
1a0016d0:	1a003a84 	.word	0x1a003a84

1a0016d4 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a0016d4:	b570      	push	{r4, r5, r6, lr}
1a0016d6:	b084      	sub	sp, #16
1a0016d8:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0016da:	2300      	movs	r3, #0
1a0016dc:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0016e0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0016e4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0016e8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0016ec:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0016f0:	f10d 030b 	add.w	r3, sp, #11
1a0016f4:	9301      	str	r3, [sp, #4]
1a0016f6:	ab03      	add	r3, sp, #12
1a0016f8:	9300      	str	r3, [sp, #0]
1a0016fa:	f10d 030d 	add.w	r3, sp, #13
1a0016fe:	f10d 020e 	add.w	r2, sp, #14
1a001702:	f10d 010f 	add.w	r1, sp, #15
1a001706:	f7ff ffcb 	bl	1a0016a0 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00170a:	2c05      	cmp	r4, #5
1a00170c:	f200 80a5 	bhi.w	1a00185a <gpioInit+0x186>
1a001710:	e8df f004 	tbb	[pc, r4]
1a001714:	45278109 	.word	0x45278109
1a001718:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a00171a:	4851      	ldr	r0, [pc, #324]	; (1a001860 <gpioInit+0x18c>)
1a00171c:	f7ff fe66 	bl	1a0013ec <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a001720:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a001722:	b004      	add	sp, #16
1a001724:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a001726:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00172a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00172e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001732:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001736:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00173a:	494a      	ldr	r1, [pc, #296]	; (1a001864 <gpioInit+0x190>)
1a00173c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001740:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001744:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001748:	2001      	movs	r0, #1
1a00174a:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a00174e:	4c44      	ldr	r4, [pc, #272]	; (1a001860 <gpioInit+0x18c>)
1a001750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001754:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001758:	ea22 0201 	bic.w	r2, r2, r1
1a00175c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001760:	e7df      	b.n	1a001722 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a001762:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001766:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00176a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00176e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a001772:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001776:	493b      	ldr	r1, [pc, #236]	; (1a001864 <gpioInit+0x190>)
1a001778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00177c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001780:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001784:	2001      	movs	r0, #1
1a001786:	fa00 f102 	lsl.w	r1, r0, r2
1a00178a:	4c35      	ldr	r4, [pc, #212]	; (1a001860 <gpioInit+0x18c>)
1a00178c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001790:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001794:	ea22 0201 	bic.w	r2, r2, r1
1a001798:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00179c:	e7c1      	b.n	1a001722 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a00179e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0017a2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0017a6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0017aa:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a0017ae:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0017b2:	492c      	ldr	r1, [pc, #176]	; (1a001864 <gpioInit+0x190>)
1a0017b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0017b8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0017bc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0017c0:	2001      	movs	r0, #1
1a0017c2:	fa00 f102 	lsl.w	r1, r0, r2
1a0017c6:	4c26      	ldr	r4, [pc, #152]	; (1a001860 <gpioInit+0x18c>)
1a0017c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0017cc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0017d0:	ea22 0201 	bic.w	r2, r2, r1
1a0017d4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0017d8:	e7a3      	b.n	1a001722 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0017da:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0017de:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0017e2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0017e6:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a0017ea:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0017ee:	491d      	ldr	r1, [pc, #116]	; (1a001864 <gpioInit+0x190>)
1a0017f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0017f4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0017f8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0017fc:	2001      	movs	r0, #1
1a0017fe:	fa00 f102 	lsl.w	r1, r0, r2
1a001802:	4c17      	ldr	r4, [pc, #92]	; (1a001860 <gpioInit+0x18c>)
1a001804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001808:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00180c:	ea22 0201 	bic.w	r2, r2, r1
1a001810:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001814:	e785      	b.n	1a001722 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a001816:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00181a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00181e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001822:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001826:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00182a:	490e      	ldr	r1, [pc, #56]	; (1a001864 <gpioInit+0x190>)
1a00182c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a001830:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a001834:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001838:	2001      	movs	r0, #1
1a00183a:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a00183e:	4b08      	ldr	r3, [pc, #32]	; (1a001860 <gpioInit+0x18c>)
1a001840:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a001844:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a001848:	4331      	orrs	r1, r6
1a00184a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a00184e:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a001850:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a001854:	2100      	movs	r1, #0
1a001856:	5499      	strb	r1, [r3, r2]
1a001858:	e763      	b.n	1a001722 <gpioInit+0x4e>
      ret_val = 0;
1a00185a:	2000      	movs	r0, #0
1a00185c:	e761      	b.n	1a001722 <gpioInit+0x4e>
1a00185e:	bf00      	nop
1a001860:	400f4000 	.word	0x400f4000
1a001864:	40086000 	.word	0x40086000

1a001868 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a001868:	b510      	push	{r4, lr}
1a00186a:	b084      	sub	sp, #16
1a00186c:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00186e:	2300      	movs	r3, #0
1a001870:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001874:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001878:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00187c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001880:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001884:	f10d 030b 	add.w	r3, sp, #11
1a001888:	9301      	str	r3, [sp, #4]
1a00188a:	ab03      	add	r3, sp, #12
1a00188c:	9300      	str	r3, [sp, #0]
1a00188e:	f10d 030d 	add.w	r3, sp, #13
1a001892:	f10d 020e 	add.w	r2, sp, #14
1a001896:	f10d 010f 	add.w	r1, sp, #15
1a00189a:	f7ff ff01 	bl	1a0016a0 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a00189e:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0018a2:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a0018a6:	3400      	adds	r4, #0
1a0018a8:	bf18      	it	ne
1a0018aa:	2401      	movne	r4, #1
1a0018ac:	015b      	lsls	r3, r3, #5
1a0018ae:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0018b2:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0018b6:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a0018b8:	2001      	movs	r0, #1
1a0018ba:	b004      	add	sp, #16
1a0018bc:	bd10      	pop	{r4, pc}

1a0018be <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a0018be:	b500      	push	{lr}
1a0018c0:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a0018c2:	2300      	movs	r3, #0
1a0018c4:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0018c8:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0018cc:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0018d0:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0018d4:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0018d8:	f10d 030b 	add.w	r3, sp, #11
1a0018dc:	9301      	str	r3, [sp, #4]
1a0018de:	ab03      	add	r3, sp, #12
1a0018e0:	9300      	str	r3, [sp, #0]
1a0018e2:	f10d 030d 	add.w	r3, sp, #13
1a0018e6:	f10d 020e 	add.w	r2, sp, #14
1a0018ea:	f10d 010f 	add.w	r1, sp, #15
1a0018ee:	f7ff fed7 	bl	1a0016a0 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a0018f2:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a0018f6:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a0018fa:	015b      	lsls	r3, r3, #5
1a0018fc:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001900:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001904:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a001906:	3000      	adds	r0, #0
1a001908:	bf18      	it	ne
1a00190a:	2001      	movne	r0, #1
1a00190c:	b005      	add	sp, #20
1a00190e:	f85d fb04 	ldr.w	pc, [sp], #4

1a001912 <gpioToggle>:
{
1a001912:	b510      	push	{r4, lr}
1a001914:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a001916:	f7ff ffd2 	bl	1a0018be <gpioRead>
1a00191a:	fab0 f180 	clz	r1, r0
1a00191e:	0949      	lsrs	r1, r1, #5
1a001920:	4620      	mov	r0, r4
1a001922:	f7ff ffa1 	bl	1a001868 <gpioWrite>
}
1a001926:	bd10      	pop	{r4, pc}

1a001928 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a001928:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a00192a:	4b04      	ldr	r3, [pc, #16]	; (1a00193c <USB0_IRQHandler+0x14>)
1a00192c:	681b      	ldr	r3, [r3, #0]
1a00192e:	681b      	ldr	r3, [r3, #0]
1a001930:	68db      	ldr	r3, [r3, #12]
1a001932:	4a03      	ldr	r2, [pc, #12]	; (1a001940 <USB0_IRQHandler+0x18>)
1a001934:	6810      	ldr	r0, [r2, #0]
1a001936:	4798      	blx	r3
}
1a001938:	bd08      	pop	{r3, pc}
1a00193a:	bf00      	nop
1a00193c:	10000248 	.word	0x10000248
1a001940:	10000234 	.word	0x10000234

1a001944 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001944:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a001946:	f7ff fc9d 	bl	1a001284 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a00194a:	4b1a      	ldr	r3, [pc, #104]	; (1a0019b4 <boardInit+0x70>)
1a00194c:	6818      	ldr	r0, [r3, #0]
1a00194e:	f7ff fdc5 	bl	1a0014dc <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a001952:	2001      	movs	r0, #1
1a001954:	2100      	movs	r1, #0
1a001956:	f7ff fe4b 	bl	1a0015f0 <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a00195a:	2105      	movs	r1, #5
1a00195c:	2000      	movs	r0, #0
1a00195e:	f7ff feb9 	bl	1a0016d4 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a001962:	2100      	movs	r1, #0
1a001964:	2024      	movs	r0, #36	; 0x24
1a001966:	f7ff feb5 	bl	1a0016d4 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a00196a:	2100      	movs	r1, #0
1a00196c:	2025      	movs	r0, #37	; 0x25
1a00196e:	f7ff feb1 	bl	1a0016d4 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a001972:	2100      	movs	r1, #0
1a001974:	2026      	movs	r0, #38	; 0x26
1a001976:	f7ff fead 	bl	1a0016d4 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a00197a:	2100      	movs	r1, #0
1a00197c:	2027      	movs	r0, #39	; 0x27
1a00197e:	f7ff fea9 	bl	1a0016d4 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a001982:	2101      	movs	r1, #1
1a001984:	2028      	movs	r0, #40	; 0x28
1a001986:	f7ff fea5 	bl	1a0016d4 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a00198a:	2101      	movs	r1, #1
1a00198c:	2029      	movs	r0, #41	; 0x29
1a00198e:	f7ff fea1 	bl	1a0016d4 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a001992:	2101      	movs	r1, #1
1a001994:	202a      	movs	r0, #42	; 0x2a
1a001996:	f7ff fe9d 	bl	1a0016d4 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a00199a:	2101      	movs	r1, #1
1a00199c:	202b      	movs	r0, #43	; 0x2b
1a00199e:	f7ff fe99 	bl	1a0016d4 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a0019a2:	2101      	movs	r1, #1
1a0019a4:	202c      	movs	r0, #44	; 0x2c
1a0019a6:	f7ff fe95 	bl	1a0016d4 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a0019aa:	2101      	movs	r1, #1
1a0019ac:	202d      	movs	r0, #45	; 0x2d
1a0019ae:	f7ff fe91 	bl	1a0016d4 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a0019b2:	bd08      	pop	{r3, pc}
1a0019b4:	10000244 	.word	0x10000244

1a0019b8 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay( tick_t duration_ms )
{
1a0019b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0019bc:	4680      	mov	r8, r0
1a0019be:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a0019c0:	f7ff fe04 	bl	1a0015cc <tickRead>
1a0019c4:	4606      	mov	r6, r0
1a0019c6:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration_ms/tickRateMS );
1a0019c8:	f7ff fe00 	bl	1a0015cc <tickRead>
1a0019cc:	1b84      	subs	r4, r0, r6
1a0019ce:	eb61 0507 	sbc.w	r5, r1, r7
1a0019d2:	4b06      	ldr	r3, [pc, #24]	; (1a0019ec <delay+0x34>)
1a0019d4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0019d8:	4640      	mov	r0, r8
1a0019da:	4649      	mov	r1, r9
1a0019dc:	f000 f808 	bl	1a0019f0 <__aeabi_uldivmod>
1a0019e0:	428d      	cmp	r5, r1
1a0019e2:	bf08      	it	eq
1a0019e4:	4284      	cmpeq	r4, r0
1a0019e6:	d3ef      	bcc.n	1a0019c8 <delay+0x10>
}
1a0019e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0019ec:	10000040 	.word	0x10000040

1a0019f0 <__aeabi_uldivmod>:
1a0019f0:	b953      	cbnz	r3, 1a001a08 <__aeabi_uldivmod+0x18>
1a0019f2:	b94a      	cbnz	r2, 1a001a08 <__aeabi_uldivmod+0x18>
1a0019f4:	2900      	cmp	r1, #0
1a0019f6:	bf08      	it	eq
1a0019f8:	2800      	cmpeq	r0, #0
1a0019fa:	bf1c      	itt	ne
1a0019fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a001a00:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a001a04:	f000 b972 	b.w	1a001cec <__aeabi_idiv0>
1a001a08:	f1ad 0c08 	sub.w	ip, sp, #8
1a001a0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a001a10:	f000 f806 	bl	1a001a20 <__udivmoddi4>
1a001a14:	f8dd e004 	ldr.w	lr, [sp, #4]
1a001a18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001a1c:	b004      	add	sp, #16
1a001a1e:	4770      	bx	lr

1a001a20 <__udivmoddi4>:
1a001a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001a24:	9e08      	ldr	r6, [sp, #32]
1a001a26:	4604      	mov	r4, r0
1a001a28:	4688      	mov	r8, r1
1a001a2a:	2b00      	cmp	r3, #0
1a001a2c:	d14b      	bne.n	1a001ac6 <__udivmoddi4+0xa6>
1a001a2e:	428a      	cmp	r2, r1
1a001a30:	4615      	mov	r5, r2
1a001a32:	d967      	bls.n	1a001b04 <__udivmoddi4+0xe4>
1a001a34:	fab2 f282 	clz	r2, r2
1a001a38:	b14a      	cbz	r2, 1a001a4e <__udivmoddi4+0x2e>
1a001a3a:	f1c2 0720 	rsb	r7, r2, #32
1a001a3e:	fa01 f302 	lsl.w	r3, r1, r2
1a001a42:	fa20 f707 	lsr.w	r7, r0, r7
1a001a46:	4095      	lsls	r5, r2
1a001a48:	ea47 0803 	orr.w	r8, r7, r3
1a001a4c:	4094      	lsls	r4, r2
1a001a4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001a52:	0c23      	lsrs	r3, r4, #16
1a001a54:	fbb8 f7fe 	udiv	r7, r8, lr
1a001a58:	fa1f fc85 	uxth.w	ip, r5
1a001a5c:	fb0e 8817 	mls	r8, lr, r7, r8
1a001a60:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a001a64:	fb07 f10c 	mul.w	r1, r7, ip
1a001a68:	4299      	cmp	r1, r3
1a001a6a:	d909      	bls.n	1a001a80 <__udivmoddi4+0x60>
1a001a6c:	18eb      	adds	r3, r5, r3
1a001a6e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a001a72:	f080 811b 	bcs.w	1a001cac <__udivmoddi4+0x28c>
1a001a76:	4299      	cmp	r1, r3
1a001a78:	f240 8118 	bls.w	1a001cac <__udivmoddi4+0x28c>
1a001a7c:	3f02      	subs	r7, #2
1a001a7e:	442b      	add	r3, r5
1a001a80:	1a5b      	subs	r3, r3, r1
1a001a82:	b2a4      	uxth	r4, r4
1a001a84:	fbb3 f0fe 	udiv	r0, r3, lr
1a001a88:	fb0e 3310 	mls	r3, lr, r0, r3
1a001a8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001a90:	fb00 fc0c 	mul.w	ip, r0, ip
1a001a94:	45a4      	cmp	ip, r4
1a001a96:	d909      	bls.n	1a001aac <__udivmoddi4+0x8c>
1a001a98:	192c      	adds	r4, r5, r4
1a001a9a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001a9e:	f080 8107 	bcs.w	1a001cb0 <__udivmoddi4+0x290>
1a001aa2:	45a4      	cmp	ip, r4
1a001aa4:	f240 8104 	bls.w	1a001cb0 <__udivmoddi4+0x290>
1a001aa8:	3802      	subs	r0, #2
1a001aaa:	442c      	add	r4, r5
1a001aac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a001ab0:	eba4 040c 	sub.w	r4, r4, ip
1a001ab4:	2700      	movs	r7, #0
1a001ab6:	b11e      	cbz	r6, 1a001ac0 <__udivmoddi4+0xa0>
1a001ab8:	40d4      	lsrs	r4, r2
1a001aba:	2300      	movs	r3, #0
1a001abc:	e9c6 4300 	strd	r4, r3, [r6]
1a001ac0:	4639      	mov	r1, r7
1a001ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001ac6:	428b      	cmp	r3, r1
1a001ac8:	d909      	bls.n	1a001ade <__udivmoddi4+0xbe>
1a001aca:	2e00      	cmp	r6, #0
1a001acc:	f000 80eb 	beq.w	1a001ca6 <__udivmoddi4+0x286>
1a001ad0:	2700      	movs	r7, #0
1a001ad2:	e9c6 0100 	strd	r0, r1, [r6]
1a001ad6:	4638      	mov	r0, r7
1a001ad8:	4639      	mov	r1, r7
1a001ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001ade:	fab3 f783 	clz	r7, r3
1a001ae2:	2f00      	cmp	r7, #0
1a001ae4:	d147      	bne.n	1a001b76 <__udivmoddi4+0x156>
1a001ae6:	428b      	cmp	r3, r1
1a001ae8:	d302      	bcc.n	1a001af0 <__udivmoddi4+0xd0>
1a001aea:	4282      	cmp	r2, r0
1a001aec:	f200 80fa 	bhi.w	1a001ce4 <__udivmoddi4+0x2c4>
1a001af0:	1a84      	subs	r4, r0, r2
1a001af2:	eb61 0303 	sbc.w	r3, r1, r3
1a001af6:	2001      	movs	r0, #1
1a001af8:	4698      	mov	r8, r3
1a001afa:	2e00      	cmp	r6, #0
1a001afc:	d0e0      	beq.n	1a001ac0 <__udivmoddi4+0xa0>
1a001afe:	e9c6 4800 	strd	r4, r8, [r6]
1a001b02:	e7dd      	b.n	1a001ac0 <__udivmoddi4+0xa0>
1a001b04:	b902      	cbnz	r2, 1a001b08 <__udivmoddi4+0xe8>
1a001b06:	deff      	udf	#255	; 0xff
1a001b08:	fab2 f282 	clz	r2, r2
1a001b0c:	2a00      	cmp	r2, #0
1a001b0e:	f040 808f 	bne.w	1a001c30 <__udivmoddi4+0x210>
1a001b12:	1b49      	subs	r1, r1, r5
1a001b14:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001b18:	fa1f f885 	uxth.w	r8, r5
1a001b1c:	2701      	movs	r7, #1
1a001b1e:	fbb1 fcfe 	udiv	ip, r1, lr
1a001b22:	0c23      	lsrs	r3, r4, #16
1a001b24:	fb0e 111c 	mls	r1, lr, ip, r1
1a001b28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001b2c:	fb08 f10c 	mul.w	r1, r8, ip
1a001b30:	4299      	cmp	r1, r3
1a001b32:	d907      	bls.n	1a001b44 <__udivmoddi4+0x124>
1a001b34:	18eb      	adds	r3, r5, r3
1a001b36:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a001b3a:	d202      	bcs.n	1a001b42 <__udivmoddi4+0x122>
1a001b3c:	4299      	cmp	r1, r3
1a001b3e:	f200 80cd 	bhi.w	1a001cdc <__udivmoddi4+0x2bc>
1a001b42:	4684      	mov	ip, r0
1a001b44:	1a59      	subs	r1, r3, r1
1a001b46:	b2a3      	uxth	r3, r4
1a001b48:	fbb1 f0fe 	udiv	r0, r1, lr
1a001b4c:	fb0e 1410 	mls	r4, lr, r0, r1
1a001b50:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a001b54:	fb08 f800 	mul.w	r8, r8, r0
1a001b58:	45a0      	cmp	r8, r4
1a001b5a:	d907      	bls.n	1a001b6c <__udivmoddi4+0x14c>
1a001b5c:	192c      	adds	r4, r5, r4
1a001b5e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001b62:	d202      	bcs.n	1a001b6a <__udivmoddi4+0x14a>
1a001b64:	45a0      	cmp	r8, r4
1a001b66:	f200 80b6 	bhi.w	1a001cd6 <__udivmoddi4+0x2b6>
1a001b6a:	4618      	mov	r0, r3
1a001b6c:	eba4 0408 	sub.w	r4, r4, r8
1a001b70:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a001b74:	e79f      	b.n	1a001ab6 <__udivmoddi4+0x96>
1a001b76:	f1c7 0c20 	rsb	ip, r7, #32
1a001b7a:	40bb      	lsls	r3, r7
1a001b7c:	fa22 fe0c 	lsr.w	lr, r2, ip
1a001b80:	ea4e 0e03 	orr.w	lr, lr, r3
1a001b84:	fa01 f407 	lsl.w	r4, r1, r7
1a001b88:	fa20 f50c 	lsr.w	r5, r0, ip
1a001b8c:	fa21 f30c 	lsr.w	r3, r1, ip
1a001b90:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a001b94:	4325      	orrs	r5, r4
1a001b96:	fbb3 f9f8 	udiv	r9, r3, r8
1a001b9a:	0c2c      	lsrs	r4, r5, #16
1a001b9c:	fb08 3319 	mls	r3, r8, r9, r3
1a001ba0:	fa1f fa8e 	uxth.w	sl, lr
1a001ba4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a001ba8:	fb09 f40a 	mul.w	r4, r9, sl
1a001bac:	429c      	cmp	r4, r3
1a001bae:	fa02 f207 	lsl.w	r2, r2, r7
1a001bb2:	fa00 f107 	lsl.w	r1, r0, r7
1a001bb6:	d90b      	bls.n	1a001bd0 <__udivmoddi4+0x1b0>
1a001bb8:	eb1e 0303 	adds.w	r3, lr, r3
1a001bbc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a001bc0:	f080 8087 	bcs.w	1a001cd2 <__udivmoddi4+0x2b2>
1a001bc4:	429c      	cmp	r4, r3
1a001bc6:	f240 8084 	bls.w	1a001cd2 <__udivmoddi4+0x2b2>
1a001bca:	f1a9 0902 	sub.w	r9, r9, #2
1a001bce:	4473      	add	r3, lr
1a001bd0:	1b1b      	subs	r3, r3, r4
1a001bd2:	b2ad      	uxth	r5, r5
1a001bd4:	fbb3 f0f8 	udiv	r0, r3, r8
1a001bd8:	fb08 3310 	mls	r3, r8, r0, r3
1a001bdc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a001be0:	fb00 fa0a 	mul.w	sl, r0, sl
1a001be4:	45a2      	cmp	sl, r4
1a001be6:	d908      	bls.n	1a001bfa <__udivmoddi4+0x1da>
1a001be8:	eb1e 0404 	adds.w	r4, lr, r4
1a001bec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001bf0:	d26b      	bcs.n	1a001cca <__udivmoddi4+0x2aa>
1a001bf2:	45a2      	cmp	sl, r4
1a001bf4:	d969      	bls.n	1a001cca <__udivmoddi4+0x2aa>
1a001bf6:	3802      	subs	r0, #2
1a001bf8:	4474      	add	r4, lr
1a001bfa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a001bfe:	fba0 8902 	umull	r8, r9, r0, r2
1a001c02:	eba4 040a 	sub.w	r4, r4, sl
1a001c06:	454c      	cmp	r4, r9
1a001c08:	46c2      	mov	sl, r8
1a001c0a:	464b      	mov	r3, r9
1a001c0c:	d354      	bcc.n	1a001cb8 <__udivmoddi4+0x298>
1a001c0e:	d051      	beq.n	1a001cb4 <__udivmoddi4+0x294>
1a001c10:	2e00      	cmp	r6, #0
1a001c12:	d069      	beq.n	1a001ce8 <__udivmoddi4+0x2c8>
1a001c14:	ebb1 050a 	subs.w	r5, r1, sl
1a001c18:	eb64 0403 	sbc.w	r4, r4, r3
1a001c1c:	fa04 fc0c 	lsl.w	ip, r4, ip
1a001c20:	40fd      	lsrs	r5, r7
1a001c22:	40fc      	lsrs	r4, r7
1a001c24:	ea4c 0505 	orr.w	r5, ip, r5
1a001c28:	e9c6 5400 	strd	r5, r4, [r6]
1a001c2c:	2700      	movs	r7, #0
1a001c2e:	e747      	b.n	1a001ac0 <__udivmoddi4+0xa0>
1a001c30:	f1c2 0320 	rsb	r3, r2, #32
1a001c34:	fa20 f703 	lsr.w	r7, r0, r3
1a001c38:	4095      	lsls	r5, r2
1a001c3a:	fa01 f002 	lsl.w	r0, r1, r2
1a001c3e:	fa21 f303 	lsr.w	r3, r1, r3
1a001c42:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001c46:	4338      	orrs	r0, r7
1a001c48:	0c01      	lsrs	r1, r0, #16
1a001c4a:	fbb3 f7fe 	udiv	r7, r3, lr
1a001c4e:	fa1f f885 	uxth.w	r8, r5
1a001c52:	fb0e 3317 	mls	r3, lr, r7, r3
1a001c56:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001c5a:	fb07 f308 	mul.w	r3, r7, r8
1a001c5e:	428b      	cmp	r3, r1
1a001c60:	fa04 f402 	lsl.w	r4, r4, r2
1a001c64:	d907      	bls.n	1a001c76 <__udivmoddi4+0x256>
1a001c66:	1869      	adds	r1, r5, r1
1a001c68:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a001c6c:	d22f      	bcs.n	1a001cce <__udivmoddi4+0x2ae>
1a001c6e:	428b      	cmp	r3, r1
1a001c70:	d92d      	bls.n	1a001cce <__udivmoddi4+0x2ae>
1a001c72:	3f02      	subs	r7, #2
1a001c74:	4429      	add	r1, r5
1a001c76:	1acb      	subs	r3, r1, r3
1a001c78:	b281      	uxth	r1, r0
1a001c7a:	fbb3 f0fe 	udiv	r0, r3, lr
1a001c7e:	fb0e 3310 	mls	r3, lr, r0, r3
1a001c82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001c86:	fb00 f308 	mul.w	r3, r0, r8
1a001c8a:	428b      	cmp	r3, r1
1a001c8c:	d907      	bls.n	1a001c9e <__udivmoddi4+0x27e>
1a001c8e:	1869      	adds	r1, r5, r1
1a001c90:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a001c94:	d217      	bcs.n	1a001cc6 <__udivmoddi4+0x2a6>
1a001c96:	428b      	cmp	r3, r1
1a001c98:	d915      	bls.n	1a001cc6 <__udivmoddi4+0x2a6>
1a001c9a:	3802      	subs	r0, #2
1a001c9c:	4429      	add	r1, r5
1a001c9e:	1ac9      	subs	r1, r1, r3
1a001ca0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a001ca4:	e73b      	b.n	1a001b1e <__udivmoddi4+0xfe>
1a001ca6:	4637      	mov	r7, r6
1a001ca8:	4630      	mov	r0, r6
1a001caa:	e709      	b.n	1a001ac0 <__udivmoddi4+0xa0>
1a001cac:	4607      	mov	r7, r0
1a001cae:	e6e7      	b.n	1a001a80 <__udivmoddi4+0x60>
1a001cb0:	4618      	mov	r0, r3
1a001cb2:	e6fb      	b.n	1a001aac <__udivmoddi4+0x8c>
1a001cb4:	4541      	cmp	r1, r8
1a001cb6:	d2ab      	bcs.n	1a001c10 <__udivmoddi4+0x1f0>
1a001cb8:	ebb8 0a02 	subs.w	sl, r8, r2
1a001cbc:	eb69 020e 	sbc.w	r2, r9, lr
1a001cc0:	3801      	subs	r0, #1
1a001cc2:	4613      	mov	r3, r2
1a001cc4:	e7a4      	b.n	1a001c10 <__udivmoddi4+0x1f0>
1a001cc6:	4660      	mov	r0, ip
1a001cc8:	e7e9      	b.n	1a001c9e <__udivmoddi4+0x27e>
1a001cca:	4618      	mov	r0, r3
1a001ccc:	e795      	b.n	1a001bfa <__udivmoddi4+0x1da>
1a001cce:	4667      	mov	r7, ip
1a001cd0:	e7d1      	b.n	1a001c76 <__udivmoddi4+0x256>
1a001cd2:	4681      	mov	r9, r0
1a001cd4:	e77c      	b.n	1a001bd0 <__udivmoddi4+0x1b0>
1a001cd6:	3802      	subs	r0, #2
1a001cd8:	442c      	add	r4, r5
1a001cda:	e747      	b.n	1a001b6c <__udivmoddi4+0x14c>
1a001cdc:	f1ac 0c02 	sub.w	ip, ip, #2
1a001ce0:	442b      	add	r3, r5
1a001ce2:	e72f      	b.n	1a001b44 <__udivmoddi4+0x124>
1a001ce4:	4638      	mov	r0, r7
1a001ce6:	e708      	b.n	1a001afa <__udivmoddi4+0xda>
1a001ce8:	4637      	mov	r7, r6
1a001cea:	e6e9      	b.n	1a001ac0 <__udivmoddi4+0xa0>

1a001cec <__aeabi_idiv0>:
1a001cec:	4770      	bx	lr
1a001cee:	bf00      	nop

1a001cf0 <__libc_init_array>:
1a001cf0:	b570      	push	{r4, r5, r6, lr}
1a001cf2:	4e0d      	ldr	r6, [pc, #52]	; (1a001d28 <__libc_init_array+0x38>)
1a001cf4:	4c0d      	ldr	r4, [pc, #52]	; (1a001d2c <__libc_init_array+0x3c>)
1a001cf6:	1ba4      	subs	r4, r4, r6
1a001cf8:	10a4      	asrs	r4, r4, #2
1a001cfa:	2500      	movs	r5, #0
1a001cfc:	42a5      	cmp	r5, r4
1a001cfe:	d109      	bne.n	1a001d14 <__libc_init_array+0x24>
1a001d00:	4e0b      	ldr	r6, [pc, #44]	; (1a001d30 <__libc_init_array+0x40>)
1a001d02:	4c0c      	ldr	r4, [pc, #48]	; (1a001d34 <__libc_init_array+0x44>)
1a001d04:	f7fe fccb 	bl	1a00069e <_init>
1a001d08:	1ba4      	subs	r4, r4, r6
1a001d0a:	10a4      	asrs	r4, r4, #2
1a001d0c:	2500      	movs	r5, #0
1a001d0e:	42a5      	cmp	r5, r4
1a001d10:	d105      	bne.n	1a001d1e <__libc_init_array+0x2e>
1a001d12:	bd70      	pop	{r4, r5, r6, pc}
1a001d14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a001d18:	4798      	blx	r3
1a001d1a:	3501      	adds	r5, #1
1a001d1c:	e7ee      	b.n	1a001cfc <__libc_init_array+0xc>
1a001d1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a001d22:	4798      	blx	r3
1a001d24:	3501      	adds	r5, #1
1a001d26:	e7f2      	b.n	1a001d0e <__libc_init_array+0x1e>
1a001d28:	1a003d38 	.word	0x1a003d38
1a001d2c:	1a003d38 	.word	0x1a003d38
1a001d30:	1a003d38 	.word	0x1a003d38
1a001d34:	1a003d3c 	.word	0x1a003d3c

1a001d38 <memcpy>:
1a001d38:	b510      	push	{r4, lr}
1a001d3a:	1e43      	subs	r3, r0, #1
1a001d3c:	440a      	add	r2, r1
1a001d3e:	4291      	cmp	r1, r2
1a001d40:	d100      	bne.n	1a001d44 <memcpy+0xc>
1a001d42:	bd10      	pop	{r4, pc}
1a001d44:	f811 4b01 	ldrb.w	r4, [r1], #1
1a001d48:	f803 4f01 	strb.w	r4, [r3, #1]!
1a001d4c:	e7f7      	b.n	1a001d3e <memcpy+0x6>

1a001d4e <memset>:
1a001d4e:	4402      	add	r2, r0
1a001d50:	4603      	mov	r3, r0
1a001d52:	4293      	cmp	r3, r2
1a001d54:	d100      	bne.n	1a001d58 <memset+0xa>
1a001d56:	4770      	bx	lr
1a001d58:	f803 1b01 	strb.w	r1, [r3], #1
1a001d5c:	e7f9      	b.n	1a001d52 <memset+0x4>
1a001d5e:	Address 0x000000001a001d5e is out of bounds.


1a001d60 <iprintf>:
1a001d60:	b40f      	push	{r0, r1, r2, r3}
1a001d62:	4b0a      	ldr	r3, [pc, #40]	; (1a001d8c <iprintf+0x2c>)
1a001d64:	b513      	push	{r0, r1, r4, lr}
1a001d66:	681c      	ldr	r4, [r3, #0]
1a001d68:	b124      	cbz	r4, 1a001d74 <iprintf+0x14>
1a001d6a:	69a3      	ldr	r3, [r4, #24]
1a001d6c:	b913      	cbnz	r3, 1a001d74 <iprintf+0x14>
1a001d6e:	4620      	mov	r0, r4
1a001d70:	f000 faf0 	bl	1a002354 <__sinit>
1a001d74:	ab05      	add	r3, sp, #20
1a001d76:	9a04      	ldr	r2, [sp, #16]
1a001d78:	68a1      	ldr	r1, [r4, #8]
1a001d7a:	9301      	str	r3, [sp, #4]
1a001d7c:	4620      	mov	r0, r4
1a001d7e:	f000 fce9 	bl	1a002754 <_vfiprintf_r>
1a001d82:	b002      	add	sp, #8
1a001d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a001d88:	b004      	add	sp, #16
1a001d8a:	4770      	bx	lr
1a001d8c:	10000048 	.word	0x10000048

1a001d90 <_puts_r>:
1a001d90:	b570      	push	{r4, r5, r6, lr}
1a001d92:	460e      	mov	r6, r1
1a001d94:	4605      	mov	r5, r0
1a001d96:	b118      	cbz	r0, 1a001da0 <_puts_r+0x10>
1a001d98:	6983      	ldr	r3, [r0, #24]
1a001d9a:	b90b      	cbnz	r3, 1a001da0 <_puts_r+0x10>
1a001d9c:	f000 fada 	bl	1a002354 <__sinit>
1a001da0:	69ab      	ldr	r3, [r5, #24]
1a001da2:	68ac      	ldr	r4, [r5, #8]
1a001da4:	b913      	cbnz	r3, 1a001dac <_puts_r+0x1c>
1a001da6:	4628      	mov	r0, r5
1a001da8:	f000 fad4 	bl	1a002354 <__sinit>
1a001dac:	4b23      	ldr	r3, [pc, #140]	; (1a001e3c <_puts_r+0xac>)
1a001dae:	429c      	cmp	r4, r3
1a001db0:	d117      	bne.n	1a001de2 <_puts_r+0x52>
1a001db2:	686c      	ldr	r4, [r5, #4]
1a001db4:	89a3      	ldrh	r3, [r4, #12]
1a001db6:	071b      	lsls	r3, r3, #28
1a001db8:	d51d      	bpl.n	1a001df6 <_puts_r+0x66>
1a001dba:	6923      	ldr	r3, [r4, #16]
1a001dbc:	b1db      	cbz	r3, 1a001df6 <_puts_r+0x66>
1a001dbe:	3e01      	subs	r6, #1
1a001dc0:	68a3      	ldr	r3, [r4, #8]
1a001dc2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a001dc6:	3b01      	subs	r3, #1
1a001dc8:	60a3      	str	r3, [r4, #8]
1a001dca:	b9e9      	cbnz	r1, 1a001e08 <_puts_r+0x78>
1a001dcc:	2b00      	cmp	r3, #0
1a001dce:	da2e      	bge.n	1a001e2e <_puts_r+0x9e>
1a001dd0:	4622      	mov	r2, r4
1a001dd2:	210a      	movs	r1, #10
1a001dd4:	4628      	mov	r0, r5
1a001dd6:	f000 f8fb 	bl	1a001fd0 <__swbuf_r>
1a001dda:	3001      	adds	r0, #1
1a001ddc:	d011      	beq.n	1a001e02 <_puts_r+0x72>
1a001dde:	200a      	movs	r0, #10
1a001de0:	e011      	b.n	1a001e06 <_puts_r+0x76>
1a001de2:	4b17      	ldr	r3, [pc, #92]	; (1a001e40 <_puts_r+0xb0>)
1a001de4:	429c      	cmp	r4, r3
1a001de6:	d101      	bne.n	1a001dec <_puts_r+0x5c>
1a001de8:	68ac      	ldr	r4, [r5, #8]
1a001dea:	e7e3      	b.n	1a001db4 <_puts_r+0x24>
1a001dec:	4b15      	ldr	r3, [pc, #84]	; (1a001e44 <_puts_r+0xb4>)
1a001dee:	429c      	cmp	r4, r3
1a001df0:	bf08      	it	eq
1a001df2:	68ec      	ldreq	r4, [r5, #12]
1a001df4:	e7de      	b.n	1a001db4 <_puts_r+0x24>
1a001df6:	4621      	mov	r1, r4
1a001df8:	4628      	mov	r0, r5
1a001dfa:	f000 f93b 	bl	1a002074 <__swsetup_r>
1a001dfe:	2800      	cmp	r0, #0
1a001e00:	d0dd      	beq.n	1a001dbe <_puts_r+0x2e>
1a001e02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001e06:	bd70      	pop	{r4, r5, r6, pc}
1a001e08:	2b00      	cmp	r3, #0
1a001e0a:	da04      	bge.n	1a001e16 <_puts_r+0x86>
1a001e0c:	69a2      	ldr	r2, [r4, #24]
1a001e0e:	429a      	cmp	r2, r3
1a001e10:	dc06      	bgt.n	1a001e20 <_puts_r+0x90>
1a001e12:	290a      	cmp	r1, #10
1a001e14:	d004      	beq.n	1a001e20 <_puts_r+0x90>
1a001e16:	6823      	ldr	r3, [r4, #0]
1a001e18:	1c5a      	adds	r2, r3, #1
1a001e1a:	6022      	str	r2, [r4, #0]
1a001e1c:	7019      	strb	r1, [r3, #0]
1a001e1e:	e7cf      	b.n	1a001dc0 <_puts_r+0x30>
1a001e20:	4622      	mov	r2, r4
1a001e22:	4628      	mov	r0, r5
1a001e24:	f000 f8d4 	bl	1a001fd0 <__swbuf_r>
1a001e28:	3001      	adds	r0, #1
1a001e2a:	d1c9      	bne.n	1a001dc0 <_puts_r+0x30>
1a001e2c:	e7e9      	b.n	1a001e02 <_puts_r+0x72>
1a001e2e:	6823      	ldr	r3, [r4, #0]
1a001e30:	200a      	movs	r0, #10
1a001e32:	1c5a      	adds	r2, r3, #1
1a001e34:	6022      	str	r2, [r4, #0]
1a001e36:	7018      	strb	r0, [r3, #0]
1a001e38:	e7e5      	b.n	1a001e06 <_puts_r+0x76>
1a001e3a:	bf00      	nop
1a001e3c:	1a003b8c 	.word	0x1a003b8c
1a001e40:	1a003bac 	.word	0x1a003bac
1a001e44:	1a003b6c 	.word	0x1a003b6c

1a001e48 <puts>:
1a001e48:	4b02      	ldr	r3, [pc, #8]	; (1a001e54 <puts+0xc>)
1a001e4a:	4601      	mov	r1, r0
1a001e4c:	6818      	ldr	r0, [r3, #0]
1a001e4e:	f7ff bf9f 	b.w	1a001d90 <_puts_r>
1a001e52:	bf00      	nop
1a001e54:	10000048 	.word	0x10000048

1a001e58 <iscanf>:
1a001e58:	b40f      	push	{r0, r1, r2, r3}
1a001e5a:	4b0a      	ldr	r3, [pc, #40]	; (1a001e84 <iscanf+0x2c>)
1a001e5c:	b513      	push	{r0, r1, r4, lr}
1a001e5e:	681c      	ldr	r4, [r3, #0]
1a001e60:	b124      	cbz	r4, 1a001e6c <iscanf+0x14>
1a001e62:	69a3      	ldr	r3, [r4, #24]
1a001e64:	b913      	cbnz	r3, 1a001e6c <iscanf+0x14>
1a001e66:	4620      	mov	r0, r4
1a001e68:	f000 fa74 	bl	1a002354 <__sinit>
1a001e6c:	ab05      	add	r3, sp, #20
1a001e6e:	9a04      	ldr	r2, [sp, #16]
1a001e70:	6861      	ldr	r1, [r4, #4]
1a001e72:	9301      	str	r3, [sp, #4]
1a001e74:	4620      	mov	r0, r4
1a001e76:	f001 f85b 	bl	1a002f30 <_vfiscanf_r>
1a001e7a:	b002      	add	sp, #8
1a001e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a001e80:	b004      	add	sp, #16
1a001e82:	4770      	bx	lr
1a001e84:	10000048 	.word	0x10000048

1a001e88 <_strtol_l.isra.0>:
1a001e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001e8c:	4680      	mov	r8, r0
1a001e8e:	4689      	mov	r9, r1
1a001e90:	4692      	mov	sl, r2
1a001e92:	461e      	mov	r6, r3
1a001e94:	460f      	mov	r7, r1
1a001e96:	463d      	mov	r5, r7
1a001e98:	9808      	ldr	r0, [sp, #32]
1a001e9a:	f815 4b01 	ldrb.w	r4, [r5], #1
1a001e9e:	f000 faff 	bl	1a0024a0 <__locale_ctype_ptr_l>
1a001ea2:	4420      	add	r0, r4
1a001ea4:	7843      	ldrb	r3, [r0, #1]
1a001ea6:	f013 0308 	ands.w	r3, r3, #8
1a001eaa:	d132      	bne.n	1a001f12 <_strtol_l.isra.0+0x8a>
1a001eac:	2c2d      	cmp	r4, #45	; 0x2d
1a001eae:	d132      	bne.n	1a001f16 <_strtol_l.isra.0+0x8e>
1a001eb0:	787c      	ldrb	r4, [r7, #1]
1a001eb2:	1cbd      	adds	r5, r7, #2
1a001eb4:	2201      	movs	r2, #1
1a001eb6:	2e00      	cmp	r6, #0
1a001eb8:	d05d      	beq.n	1a001f76 <_strtol_l.isra.0+0xee>
1a001eba:	2e10      	cmp	r6, #16
1a001ebc:	d109      	bne.n	1a001ed2 <_strtol_l.isra.0+0x4a>
1a001ebe:	2c30      	cmp	r4, #48	; 0x30
1a001ec0:	d107      	bne.n	1a001ed2 <_strtol_l.isra.0+0x4a>
1a001ec2:	782b      	ldrb	r3, [r5, #0]
1a001ec4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
1a001ec8:	2b58      	cmp	r3, #88	; 0x58
1a001eca:	d14f      	bne.n	1a001f6c <_strtol_l.isra.0+0xe4>
1a001ecc:	786c      	ldrb	r4, [r5, #1]
1a001ece:	2610      	movs	r6, #16
1a001ed0:	3502      	adds	r5, #2
1a001ed2:	2a00      	cmp	r2, #0
1a001ed4:	bf14      	ite	ne
1a001ed6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
1a001eda:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
1a001ede:	2700      	movs	r7, #0
1a001ee0:	fbb1 fcf6 	udiv	ip, r1, r6
1a001ee4:	4638      	mov	r0, r7
1a001ee6:	fb06 1e1c 	mls	lr, r6, ip, r1
1a001eea:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
1a001eee:	2b09      	cmp	r3, #9
1a001ef0:	d817      	bhi.n	1a001f22 <_strtol_l.isra.0+0x9a>
1a001ef2:	461c      	mov	r4, r3
1a001ef4:	42a6      	cmp	r6, r4
1a001ef6:	dd23      	ble.n	1a001f40 <_strtol_l.isra.0+0xb8>
1a001ef8:	1c7b      	adds	r3, r7, #1
1a001efa:	d007      	beq.n	1a001f0c <_strtol_l.isra.0+0x84>
1a001efc:	4584      	cmp	ip, r0
1a001efe:	d31c      	bcc.n	1a001f3a <_strtol_l.isra.0+0xb2>
1a001f00:	d101      	bne.n	1a001f06 <_strtol_l.isra.0+0x7e>
1a001f02:	45a6      	cmp	lr, r4
1a001f04:	db19      	blt.n	1a001f3a <_strtol_l.isra.0+0xb2>
1a001f06:	fb00 4006 	mla	r0, r0, r6, r4
1a001f0a:	2701      	movs	r7, #1
1a001f0c:	f815 4b01 	ldrb.w	r4, [r5], #1
1a001f10:	e7eb      	b.n	1a001eea <_strtol_l.isra.0+0x62>
1a001f12:	462f      	mov	r7, r5
1a001f14:	e7bf      	b.n	1a001e96 <_strtol_l.isra.0+0xe>
1a001f16:	2c2b      	cmp	r4, #43	; 0x2b
1a001f18:	bf04      	itt	eq
1a001f1a:	1cbd      	addeq	r5, r7, #2
1a001f1c:	787c      	ldrbeq	r4, [r7, #1]
1a001f1e:	461a      	mov	r2, r3
1a001f20:	e7c9      	b.n	1a001eb6 <_strtol_l.isra.0+0x2e>
1a001f22:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
1a001f26:	2b19      	cmp	r3, #25
1a001f28:	d801      	bhi.n	1a001f2e <_strtol_l.isra.0+0xa6>
1a001f2a:	3c37      	subs	r4, #55	; 0x37
1a001f2c:	e7e2      	b.n	1a001ef4 <_strtol_l.isra.0+0x6c>
1a001f2e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
1a001f32:	2b19      	cmp	r3, #25
1a001f34:	d804      	bhi.n	1a001f40 <_strtol_l.isra.0+0xb8>
1a001f36:	3c57      	subs	r4, #87	; 0x57
1a001f38:	e7dc      	b.n	1a001ef4 <_strtol_l.isra.0+0x6c>
1a001f3a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a001f3e:	e7e5      	b.n	1a001f0c <_strtol_l.isra.0+0x84>
1a001f40:	1c7b      	adds	r3, r7, #1
1a001f42:	d108      	bne.n	1a001f56 <_strtol_l.isra.0+0xce>
1a001f44:	2322      	movs	r3, #34	; 0x22
1a001f46:	f8c8 3000 	str.w	r3, [r8]
1a001f4a:	4608      	mov	r0, r1
1a001f4c:	f1ba 0f00 	cmp.w	sl, #0
1a001f50:	d107      	bne.n	1a001f62 <_strtol_l.isra.0+0xda>
1a001f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001f56:	b102      	cbz	r2, 1a001f5a <_strtol_l.isra.0+0xd2>
1a001f58:	4240      	negs	r0, r0
1a001f5a:	f1ba 0f00 	cmp.w	sl, #0
1a001f5e:	d0f8      	beq.n	1a001f52 <_strtol_l.isra.0+0xca>
1a001f60:	b10f      	cbz	r7, 1a001f66 <_strtol_l.isra.0+0xde>
1a001f62:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
1a001f66:	f8ca 9000 	str.w	r9, [sl]
1a001f6a:	e7f2      	b.n	1a001f52 <_strtol_l.isra.0+0xca>
1a001f6c:	2430      	movs	r4, #48	; 0x30
1a001f6e:	2e00      	cmp	r6, #0
1a001f70:	d1af      	bne.n	1a001ed2 <_strtol_l.isra.0+0x4a>
1a001f72:	2608      	movs	r6, #8
1a001f74:	e7ad      	b.n	1a001ed2 <_strtol_l.isra.0+0x4a>
1a001f76:	2c30      	cmp	r4, #48	; 0x30
1a001f78:	d0a3      	beq.n	1a001ec2 <_strtol_l.isra.0+0x3a>
1a001f7a:	260a      	movs	r6, #10
1a001f7c:	e7a9      	b.n	1a001ed2 <_strtol_l.isra.0+0x4a>
1a001f7e:	Address 0x000000001a001f7e is out of bounds.


1a001f80 <_strtol_r>:
1a001f80:	b537      	push	{r0, r1, r2, r4, r5, lr}
1a001f82:	4c06      	ldr	r4, [pc, #24]	; (1a001f9c <_strtol_r+0x1c>)
1a001f84:	4d06      	ldr	r5, [pc, #24]	; (1a001fa0 <_strtol_r+0x20>)
1a001f86:	6824      	ldr	r4, [r4, #0]
1a001f88:	6a24      	ldr	r4, [r4, #32]
1a001f8a:	2c00      	cmp	r4, #0
1a001f8c:	bf08      	it	eq
1a001f8e:	462c      	moveq	r4, r5
1a001f90:	9400      	str	r4, [sp, #0]
1a001f92:	f7ff ff79 	bl	1a001e88 <_strtol_l.isra.0>
1a001f96:	b003      	add	sp, #12
1a001f98:	bd30      	pop	{r4, r5, pc}
1a001f9a:	bf00      	nop
1a001f9c:	10000048 	.word	0x10000048
1a001fa0:	100000ac 	.word	0x100000ac

1a001fa4 <strtol>:
1a001fa4:	4b08      	ldr	r3, [pc, #32]	; (1a001fc8 <strtol+0x24>)
1a001fa6:	b537      	push	{r0, r1, r2, r4, r5, lr}
1a001fa8:	681c      	ldr	r4, [r3, #0]
1a001faa:	4d08      	ldr	r5, [pc, #32]	; (1a001fcc <strtol+0x28>)
1a001fac:	6a23      	ldr	r3, [r4, #32]
1a001fae:	2b00      	cmp	r3, #0
1a001fb0:	bf08      	it	eq
1a001fb2:	462b      	moveq	r3, r5
1a001fb4:	9300      	str	r3, [sp, #0]
1a001fb6:	4613      	mov	r3, r2
1a001fb8:	460a      	mov	r2, r1
1a001fba:	4601      	mov	r1, r0
1a001fbc:	4620      	mov	r0, r4
1a001fbe:	f7ff ff63 	bl	1a001e88 <_strtol_l.isra.0>
1a001fc2:	b003      	add	sp, #12
1a001fc4:	bd30      	pop	{r4, r5, pc}
1a001fc6:	bf00      	nop
1a001fc8:	10000048 	.word	0x10000048
1a001fcc:	100000ac 	.word	0x100000ac

1a001fd0 <__swbuf_r>:
1a001fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001fd2:	460e      	mov	r6, r1
1a001fd4:	4614      	mov	r4, r2
1a001fd6:	4605      	mov	r5, r0
1a001fd8:	b118      	cbz	r0, 1a001fe2 <__swbuf_r+0x12>
1a001fda:	6983      	ldr	r3, [r0, #24]
1a001fdc:	b90b      	cbnz	r3, 1a001fe2 <__swbuf_r+0x12>
1a001fde:	f000 f9b9 	bl	1a002354 <__sinit>
1a001fe2:	4b21      	ldr	r3, [pc, #132]	; (1a002068 <__swbuf_r+0x98>)
1a001fe4:	429c      	cmp	r4, r3
1a001fe6:	d12a      	bne.n	1a00203e <__swbuf_r+0x6e>
1a001fe8:	686c      	ldr	r4, [r5, #4]
1a001fea:	69a3      	ldr	r3, [r4, #24]
1a001fec:	60a3      	str	r3, [r4, #8]
1a001fee:	89a3      	ldrh	r3, [r4, #12]
1a001ff0:	071a      	lsls	r2, r3, #28
1a001ff2:	d52e      	bpl.n	1a002052 <__swbuf_r+0x82>
1a001ff4:	6923      	ldr	r3, [r4, #16]
1a001ff6:	b363      	cbz	r3, 1a002052 <__swbuf_r+0x82>
1a001ff8:	6923      	ldr	r3, [r4, #16]
1a001ffa:	6820      	ldr	r0, [r4, #0]
1a001ffc:	1ac0      	subs	r0, r0, r3
1a001ffe:	6963      	ldr	r3, [r4, #20]
1a002000:	b2f6      	uxtb	r6, r6
1a002002:	4283      	cmp	r3, r0
1a002004:	4637      	mov	r7, r6
1a002006:	dc04      	bgt.n	1a002012 <__swbuf_r+0x42>
1a002008:	4621      	mov	r1, r4
1a00200a:	4628      	mov	r0, r5
1a00200c:	f000 f926 	bl	1a00225c <_fflush_r>
1a002010:	bb28      	cbnz	r0, 1a00205e <__swbuf_r+0x8e>
1a002012:	68a3      	ldr	r3, [r4, #8]
1a002014:	3b01      	subs	r3, #1
1a002016:	60a3      	str	r3, [r4, #8]
1a002018:	6823      	ldr	r3, [r4, #0]
1a00201a:	1c5a      	adds	r2, r3, #1
1a00201c:	6022      	str	r2, [r4, #0]
1a00201e:	701e      	strb	r6, [r3, #0]
1a002020:	6963      	ldr	r3, [r4, #20]
1a002022:	3001      	adds	r0, #1
1a002024:	4283      	cmp	r3, r0
1a002026:	d004      	beq.n	1a002032 <__swbuf_r+0x62>
1a002028:	89a3      	ldrh	r3, [r4, #12]
1a00202a:	07db      	lsls	r3, r3, #31
1a00202c:	d519      	bpl.n	1a002062 <__swbuf_r+0x92>
1a00202e:	2e0a      	cmp	r6, #10
1a002030:	d117      	bne.n	1a002062 <__swbuf_r+0x92>
1a002032:	4621      	mov	r1, r4
1a002034:	4628      	mov	r0, r5
1a002036:	f000 f911 	bl	1a00225c <_fflush_r>
1a00203a:	b190      	cbz	r0, 1a002062 <__swbuf_r+0x92>
1a00203c:	e00f      	b.n	1a00205e <__swbuf_r+0x8e>
1a00203e:	4b0b      	ldr	r3, [pc, #44]	; (1a00206c <__swbuf_r+0x9c>)
1a002040:	429c      	cmp	r4, r3
1a002042:	d101      	bne.n	1a002048 <__swbuf_r+0x78>
1a002044:	68ac      	ldr	r4, [r5, #8]
1a002046:	e7d0      	b.n	1a001fea <__swbuf_r+0x1a>
1a002048:	4b09      	ldr	r3, [pc, #36]	; (1a002070 <__swbuf_r+0xa0>)
1a00204a:	429c      	cmp	r4, r3
1a00204c:	bf08      	it	eq
1a00204e:	68ec      	ldreq	r4, [r5, #12]
1a002050:	e7cb      	b.n	1a001fea <__swbuf_r+0x1a>
1a002052:	4621      	mov	r1, r4
1a002054:	4628      	mov	r0, r5
1a002056:	f000 f80d 	bl	1a002074 <__swsetup_r>
1a00205a:	2800      	cmp	r0, #0
1a00205c:	d0cc      	beq.n	1a001ff8 <__swbuf_r+0x28>
1a00205e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a002062:	4638      	mov	r0, r7
1a002064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002066:	bf00      	nop
1a002068:	1a003b8c 	.word	0x1a003b8c
1a00206c:	1a003bac 	.word	0x1a003bac
1a002070:	1a003b6c 	.word	0x1a003b6c

1a002074 <__swsetup_r>:
1a002074:	4b32      	ldr	r3, [pc, #200]	; (1a002140 <__swsetup_r+0xcc>)
1a002076:	b570      	push	{r4, r5, r6, lr}
1a002078:	681d      	ldr	r5, [r3, #0]
1a00207a:	4606      	mov	r6, r0
1a00207c:	460c      	mov	r4, r1
1a00207e:	b125      	cbz	r5, 1a00208a <__swsetup_r+0x16>
1a002080:	69ab      	ldr	r3, [r5, #24]
1a002082:	b913      	cbnz	r3, 1a00208a <__swsetup_r+0x16>
1a002084:	4628      	mov	r0, r5
1a002086:	f000 f965 	bl	1a002354 <__sinit>
1a00208a:	4b2e      	ldr	r3, [pc, #184]	; (1a002144 <__swsetup_r+0xd0>)
1a00208c:	429c      	cmp	r4, r3
1a00208e:	d10f      	bne.n	1a0020b0 <__swsetup_r+0x3c>
1a002090:	686c      	ldr	r4, [r5, #4]
1a002092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002096:	b29a      	uxth	r2, r3
1a002098:	0715      	lsls	r5, r2, #28
1a00209a:	d42c      	bmi.n	1a0020f6 <__swsetup_r+0x82>
1a00209c:	06d0      	lsls	r0, r2, #27
1a00209e:	d411      	bmi.n	1a0020c4 <__swsetup_r+0x50>
1a0020a0:	2209      	movs	r2, #9
1a0020a2:	6032      	str	r2, [r6, #0]
1a0020a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0020a8:	81a3      	strh	r3, [r4, #12]
1a0020aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0020ae:	e03e      	b.n	1a00212e <__swsetup_r+0xba>
1a0020b0:	4b25      	ldr	r3, [pc, #148]	; (1a002148 <__swsetup_r+0xd4>)
1a0020b2:	429c      	cmp	r4, r3
1a0020b4:	d101      	bne.n	1a0020ba <__swsetup_r+0x46>
1a0020b6:	68ac      	ldr	r4, [r5, #8]
1a0020b8:	e7eb      	b.n	1a002092 <__swsetup_r+0x1e>
1a0020ba:	4b24      	ldr	r3, [pc, #144]	; (1a00214c <__swsetup_r+0xd8>)
1a0020bc:	429c      	cmp	r4, r3
1a0020be:	bf08      	it	eq
1a0020c0:	68ec      	ldreq	r4, [r5, #12]
1a0020c2:	e7e6      	b.n	1a002092 <__swsetup_r+0x1e>
1a0020c4:	0751      	lsls	r1, r2, #29
1a0020c6:	d512      	bpl.n	1a0020ee <__swsetup_r+0x7a>
1a0020c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a0020ca:	b141      	cbz	r1, 1a0020de <__swsetup_r+0x6a>
1a0020cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a0020d0:	4299      	cmp	r1, r3
1a0020d2:	d002      	beq.n	1a0020da <__swsetup_r+0x66>
1a0020d4:	4630      	mov	r0, r6
1a0020d6:	f000 fa6b 	bl	1a0025b0 <_free_r>
1a0020da:	2300      	movs	r3, #0
1a0020dc:	6363      	str	r3, [r4, #52]	; 0x34
1a0020de:	89a3      	ldrh	r3, [r4, #12]
1a0020e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a0020e4:	81a3      	strh	r3, [r4, #12]
1a0020e6:	2300      	movs	r3, #0
1a0020e8:	6063      	str	r3, [r4, #4]
1a0020ea:	6923      	ldr	r3, [r4, #16]
1a0020ec:	6023      	str	r3, [r4, #0]
1a0020ee:	89a3      	ldrh	r3, [r4, #12]
1a0020f0:	f043 0308 	orr.w	r3, r3, #8
1a0020f4:	81a3      	strh	r3, [r4, #12]
1a0020f6:	6923      	ldr	r3, [r4, #16]
1a0020f8:	b94b      	cbnz	r3, 1a00210e <__swsetup_r+0x9a>
1a0020fa:	89a3      	ldrh	r3, [r4, #12]
1a0020fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a002100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a002104:	d003      	beq.n	1a00210e <__swsetup_r+0x9a>
1a002106:	4621      	mov	r1, r4
1a002108:	4630      	mov	r0, r6
1a00210a:	f000 f9ff 	bl	1a00250c <__smakebuf_r>
1a00210e:	89a2      	ldrh	r2, [r4, #12]
1a002110:	f012 0301 	ands.w	r3, r2, #1
1a002114:	d00c      	beq.n	1a002130 <__swsetup_r+0xbc>
1a002116:	2300      	movs	r3, #0
1a002118:	60a3      	str	r3, [r4, #8]
1a00211a:	6963      	ldr	r3, [r4, #20]
1a00211c:	425b      	negs	r3, r3
1a00211e:	61a3      	str	r3, [r4, #24]
1a002120:	6923      	ldr	r3, [r4, #16]
1a002122:	b953      	cbnz	r3, 1a00213a <__swsetup_r+0xc6>
1a002124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002128:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a00212c:	d1ba      	bne.n	1a0020a4 <__swsetup_r+0x30>
1a00212e:	bd70      	pop	{r4, r5, r6, pc}
1a002130:	0792      	lsls	r2, r2, #30
1a002132:	bf58      	it	pl
1a002134:	6963      	ldrpl	r3, [r4, #20]
1a002136:	60a3      	str	r3, [r4, #8]
1a002138:	e7f2      	b.n	1a002120 <__swsetup_r+0xac>
1a00213a:	2000      	movs	r0, #0
1a00213c:	e7f7      	b.n	1a00212e <__swsetup_r+0xba>
1a00213e:	bf00      	nop
1a002140:	10000048 	.word	0x10000048
1a002144:	1a003b8c 	.word	0x1a003b8c
1a002148:	1a003bac 	.word	0x1a003bac
1a00214c:	1a003b6c 	.word	0x1a003b6c

1a002150 <__sflush_r>:
1a002150:	898a      	ldrh	r2, [r1, #12]
1a002152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002156:	4605      	mov	r5, r0
1a002158:	0710      	lsls	r0, r2, #28
1a00215a:	460c      	mov	r4, r1
1a00215c:	d458      	bmi.n	1a002210 <__sflush_r+0xc0>
1a00215e:	684b      	ldr	r3, [r1, #4]
1a002160:	2b00      	cmp	r3, #0
1a002162:	dc05      	bgt.n	1a002170 <__sflush_r+0x20>
1a002164:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a002166:	2b00      	cmp	r3, #0
1a002168:	dc02      	bgt.n	1a002170 <__sflush_r+0x20>
1a00216a:	2000      	movs	r0, #0
1a00216c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002170:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a002172:	2e00      	cmp	r6, #0
1a002174:	d0f9      	beq.n	1a00216a <__sflush_r+0x1a>
1a002176:	2300      	movs	r3, #0
1a002178:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a00217c:	682f      	ldr	r7, [r5, #0]
1a00217e:	6a21      	ldr	r1, [r4, #32]
1a002180:	602b      	str	r3, [r5, #0]
1a002182:	d032      	beq.n	1a0021ea <__sflush_r+0x9a>
1a002184:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a002186:	89a3      	ldrh	r3, [r4, #12]
1a002188:	075a      	lsls	r2, r3, #29
1a00218a:	d505      	bpl.n	1a002198 <__sflush_r+0x48>
1a00218c:	6863      	ldr	r3, [r4, #4]
1a00218e:	1ac0      	subs	r0, r0, r3
1a002190:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a002192:	b10b      	cbz	r3, 1a002198 <__sflush_r+0x48>
1a002194:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a002196:	1ac0      	subs	r0, r0, r3
1a002198:	2300      	movs	r3, #0
1a00219a:	4602      	mov	r2, r0
1a00219c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a00219e:	6a21      	ldr	r1, [r4, #32]
1a0021a0:	4628      	mov	r0, r5
1a0021a2:	47b0      	blx	r6
1a0021a4:	1c43      	adds	r3, r0, #1
1a0021a6:	89a3      	ldrh	r3, [r4, #12]
1a0021a8:	d106      	bne.n	1a0021b8 <__sflush_r+0x68>
1a0021aa:	6829      	ldr	r1, [r5, #0]
1a0021ac:	291d      	cmp	r1, #29
1a0021ae:	d848      	bhi.n	1a002242 <__sflush_r+0xf2>
1a0021b0:	4a29      	ldr	r2, [pc, #164]	; (1a002258 <__sflush_r+0x108>)
1a0021b2:	40ca      	lsrs	r2, r1
1a0021b4:	07d6      	lsls	r6, r2, #31
1a0021b6:	d544      	bpl.n	1a002242 <__sflush_r+0xf2>
1a0021b8:	2200      	movs	r2, #0
1a0021ba:	6062      	str	r2, [r4, #4]
1a0021bc:	04d9      	lsls	r1, r3, #19
1a0021be:	6922      	ldr	r2, [r4, #16]
1a0021c0:	6022      	str	r2, [r4, #0]
1a0021c2:	d504      	bpl.n	1a0021ce <__sflush_r+0x7e>
1a0021c4:	1c42      	adds	r2, r0, #1
1a0021c6:	d101      	bne.n	1a0021cc <__sflush_r+0x7c>
1a0021c8:	682b      	ldr	r3, [r5, #0]
1a0021ca:	b903      	cbnz	r3, 1a0021ce <__sflush_r+0x7e>
1a0021cc:	6560      	str	r0, [r4, #84]	; 0x54
1a0021ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a0021d0:	602f      	str	r7, [r5, #0]
1a0021d2:	2900      	cmp	r1, #0
1a0021d4:	d0c9      	beq.n	1a00216a <__sflush_r+0x1a>
1a0021d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a0021da:	4299      	cmp	r1, r3
1a0021dc:	d002      	beq.n	1a0021e4 <__sflush_r+0x94>
1a0021de:	4628      	mov	r0, r5
1a0021e0:	f000 f9e6 	bl	1a0025b0 <_free_r>
1a0021e4:	2000      	movs	r0, #0
1a0021e6:	6360      	str	r0, [r4, #52]	; 0x34
1a0021e8:	e7c0      	b.n	1a00216c <__sflush_r+0x1c>
1a0021ea:	2301      	movs	r3, #1
1a0021ec:	4628      	mov	r0, r5
1a0021ee:	47b0      	blx	r6
1a0021f0:	1c41      	adds	r1, r0, #1
1a0021f2:	d1c8      	bne.n	1a002186 <__sflush_r+0x36>
1a0021f4:	682b      	ldr	r3, [r5, #0]
1a0021f6:	2b00      	cmp	r3, #0
1a0021f8:	d0c5      	beq.n	1a002186 <__sflush_r+0x36>
1a0021fa:	2b1d      	cmp	r3, #29
1a0021fc:	d001      	beq.n	1a002202 <__sflush_r+0xb2>
1a0021fe:	2b16      	cmp	r3, #22
1a002200:	d101      	bne.n	1a002206 <__sflush_r+0xb6>
1a002202:	602f      	str	r7, [r5, #0]
1a002204:	e7b1      	b.n	1a00216a <__sflush_r+0x1a>
1a002206:	89a3      	ldrh	r3, [r4, #12]
1a002208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00220c:	81a3      	strh	r3, [r4, #12]
1a00220e:	e7ad      	b.n	1a00216c <__sflush_r+0x1c>
1a002210:	690f      	ldr	r7, [r1, #16]
1a002212:	2f00      	cmp	r7, #0
1a002214:	d0a9      	beq.n	1a00216a <__sflush_r+0x1a>
1a002216:	0793      	lsls	r3, r2, #30
1a002218:	680e      	ldr	r6, [r1, #0]
1a00221a:	bf08      	it	eq
1a00221c:	694b      	ldreq	r3, [r1, #20]
1a00221e:	600f      	str	r7, [r1, #0]
1a002220:	bf18      	it	ne
1a002222:	2300      	movne	r3, #0
1a002224:	eba6 0807 	sub.w	r8, r6, r7
1a002228:	608b      	str	r3, [r1, #8]
1a00222a:	f1b8 0f00 	cmp.w	r8, #0
1a00222e:	dd9c      	ble.n	1a00216a <__sflush_r+0x1a>
1a002230:	4643      	mov	r3, r8
1a002232:	463a      	mov	r2, r7
1a002234:	6a21      	ldr	r1, [r4, #32]
1a002236:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a002238:	4628      	mov	r0, r5
1a00223a:	47b0      	blx	r6
1a00223c:	2800      	cmp	r0, #0
1a00223e:	dc06      	bgt.n	1a00224e <__sflush_r+0xfe>
1a002240:	89a3      	ldrh	r3, [r4, #12]
1a002242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002246:	81a3      	strh	r3, [r4, #12]
1a002248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00224c:	e78e      	b.n	1a00216c <__sflush_r+0x1c>
1a00224e:	4407      	add	r7, r0
1a002250:	eba8 0800 	sub.w	r8, r8, r0
1a002254:	e7e9      	b.n	1a00222a <__sflush_r+0xda>
1a002256:	bf00      	nop
1a002258:	20400001 	.word	0x20400001

1a00225c <_fflush_r>:
1a00225c:	b538      	push	{r3, r4, r5, lr}
1a00225e:	690b      	ldr	r3, [r1, #16]
1a002260:	4605      	mov	r5, r0
1a002262:	460c      	mov	r4, r1
1a002264:	b1db      	cbz	r3, 1a00229e <_fflush_r+0x42>
1a002266:	b118      	cbz	r0, 1a002270 <_fflush_r+0x14>
1a002268:	6983      	ldr	r3, [r0, #24]
1a00226a:	b90b      	cbnz	r3, 1a002270 <_fflush_r+0x14>
1a00226c:	f000 f872 	bl	1a002354 <__sinit>
1a002270:	4b0c      	ldr	r3, [pc, #48]	; (1a0022a4 <_fflush_r+0x48>)
1a002272:	429c      	cmp	r4, r3
1a002274:	d109      	bne.n	1a00228a <_fflush_r+0x2e>
1a002276:	686c      	ldr	r4, [r5, #4]
1a002278:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00227c:	b17b      	cbz	r3, 1a00229e <_fflush_r+0x42>
1a00227e:	4621      	mov	r1, r4
1a002280:	4628      	mov	r0, r5
1a002282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a002286:	f7ff bf63 	b.w	1a002150 <__sflush_r>
1a00228a:	4b07      	ldr	r3, [pc, #28]	; (1a0022a8 <_fflush_r+0x4c>)
1a00228c:	429c      	cmp	r4, r3
1a00228e:	d101      	bne.n	1a002294 <_fflush_r+0x38>
1a002290:	68ac      	ldr	r4, [r5, #8]
1a002292:	e7f1      	b.n	1a002278 <_fflush_r+0x1c>
1a002294:	4b05      	ldr	r3, [pc, #20]	; (1a0022ac <_fflush_r+0x50>)
1a002296:	429c      	cmp	r4, r3
1a002298:	bf08      	it	eq
1a00229a:	68ec      	ldreq	r4, [r5, #12]
1a00229c:	e7ec      	b.n	1a002278 <_fflush_r+0x1c>
1a00229e:	2000      	movs	r0, #0
1a0022a0:	bd38      	pop	{r3, r4, r5, pc}
1a0022a2:	bf00      	nop
1a0022a4:	1a003b8c 	.word	0x1a003b8c
1a0022a8:	1a003bac 	.word	0x1a003bac
1a0022ac:	1a003b6c 	.word	0x1a003b6c

1a0022b0 <fflush>:
1a0022b0:	4601      	mov	r1, r0
1a0022b2:	b920      	cbnz	r0, 1a0022be <fflush+0xe>
1a0022b4:	4b04      	ldr	r3, [pc, #16]	; (1a0022c8 <fflush+0x18>)
1a0022b6:	4905      	ldr	r1, [pc, #20]	; (1a0022cc <fflush+0x1c>)
1a0022b8:	6818      	ldr	r0, [r3, #0]
1a0022ba:	f000 b8d3 	b.w	1a002464 <_fwalk_reent>
1a0022be:	4b04      	ldr	r3, [pc, #16]	; (1a0022d0 <fflush+0x20>)
1a0022c0:	6818      	ldr	r0, [r3, #0]
1a0022c2:	f7ff bfcb 	b.w	1a00225c <_fflush_r>
1a0022c6:	bf00      	nop
1a0022c8:	1a003bcc 	.word	0x1a003bcc
1a0022cc:	1a00225d 	.word	0x1a00225d
1a0022d0:	10000048 	.word	0x10000048

1a0022d4 <std>:
1a0022d4:	2300      	movs	r3, #0
1a0022d6:	b510      	push	{r4, lr}
1a0022d8:	4604      	mov	r4, r0
1a0022da:	e9c0 3300 	strd	r3, r3, [r0]
1a0022de:	6083      	str	r3, [r0, #8]
1a0022e0:	8181      	strh	r1, [r0, #12]
1a0022e2:	6643      	str	r3, [r0, #100]	; 0x64
1a0022e4:	81c2      	strh	r2, [r0, #14]
1a0022e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a0022ea:	6183      	str	r3, [r0, #24]
1a0022ec:	4619      	mov	r1, r3
1a0022ee:	2208      	movs	r2, #8
1a0022f0:	305c      	adds	r0, #92	; 0x5c
1a0022f2:	f7ff fd2c 	bl	1a001d4e <memset>
1a0022f6:	4b05      	ldr	r3, [pc, #20]	; (1a00230c <std+0x38>)
1a0022f8:	6263      	str	r3, [r4, #36]	; 0x24
1a0022fa:	4b05      	ldr	r3, [pc, #20]	; (1a002310 <std+0x3c>)
1a0022fc:	62a3      	str	r3, [r4, #40]	; 0x28
1a0022fe:	4b05      	ldr	r3, [pc, #20]	; (1a002314 <std+0x40>)
1a002300:	62e3      	str	r3, [r4, #44]	; 0x2c
1a002302:	4b05      	ldr	r3, [pc, #20]	; (1a002318 <std+0x44>)
1a002304:	6224      	str	r4, [r4, #32]
1a002306:	6323      	str	r3, [r4, #48]	; 0x30
1a002308:	bd10      	pop	{r4, pc}
1a00230a:	bf00      	nop
1a00230c:	1a0033c1 	.word	0x1a0033c1
1a002310:	1a0033e3 	.word	0x1a0033e3
1a002314:	1a00341b 	.word	0x1a00341b
1a002318:	1a00343f 	.word	0x1a00343f

1a00231c <_cleanup_r>:
1a00231c:	4901      	ldr	r1, [pc, #4]	; (1a002324 <_cleanup_r+0x8>)
1a00231e:	f000 b8a1 	b.w	1a002464 <_fwalk_reent>
1a002322:	bf00      	nop
1a002324:	1a00225d 	.word	0x1a00225d

1a002328 <__sfmoreglue>:
1a002328:	b570      	push	{r4, r5, r6, lr}
1a00232a:	1e4a      	subs	r2, r1, #1
1a00232c:	2568      	movs	r5, #104	; 0x68
1a00232e:	4355      	muls	r5, r2
1a002330:	460e      	mov	r6, r1
1a002332:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a002336:	f000 f989 	bl	1a00264c <_malloc_r>
1a00233a:	4604      	mov	r4, r0
1a00233c:	b140      	cbz	r0, 1a002350 <__sfmoreglue+0x28>
1a00233e:	2100      	movs	r1, #0
1a002340:	e9c0 1600 	strd	r1, r6, [r0]
1a002344:	300c      	adds	r0, #12
1a002346:	60a0      	str	r0, [r4, #8]
1a002348:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a00234c:	f7ff fcff 	bl	1a001d4e <memset>
1a002350:	4620      	mov	r0, r4
1a002352:	bd70      	pop	{r4, r5, r6, pc}

1a002354 <__sinit>:
1a002354:	6983      	ldr	r3, [r0, #24]
1a002356:	b510      	push	{r4, lr}
1a002358:	4604      	mov	r4, r0
1a00235a:	bb33      	cbnz	r3, 1a0023aa <__sinit+0x56>
1a00235c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
1a002360:	6503      	str	r3, [r0, #80]	; 0x50
1a002362:	4b12      	ldr	r3, [pc, #72]	; (1a0023ac <__sinit+0x58>)
1a002364:	4a12      	ldr	r2, [pc, #72]	; (1a0023b0 <__sinit+0x5c>)
1a002366:	681b      	ldr	r3, [r3, #0]
1a002368:	6282      	str	r2, [r0, #40]	; 0x28
1a00236a:	4298      	cmp	r0, r3
1a00236c:	bf04      	itt	eq
1a00236e:	2301      	moveq	r3, #1
1a002370:	6183      	streq	r3, [r0, #24]
1a002372:	f000 f81f 	bl	1a0023b4 <__sfp>
1a002376:	6060      	str	r0, [r4, #4]
1a002378:	4620      	mov	r0, r4
1a00237a:	f000 f81b 	bl	1a0023b4 <__sfp>
1a00237e:	60a0      	str	r0, [r4, #8]
1a002380:	4620      	mov	r0, r4
1a002382:	f000 f817 	bl	1a0023b4 <__sfp>
1a002386:	2200      	movs	r2, #0
1a002388:	60e0      	str	r0, [r4, #12]
1a00238a:	2104      	movs	r1, #4
1a00238c:	6860      	ldr	r0, [r4, #4]
1a00238e:	f7ff ffa1 	bl	1a0022d4 <std>
1a002392:	2201      	movs	r2, #1
1a002394:	2109      	movs	r1, #9
1a002396:	68a0      	ldr	r0, [r4, #8]
1a002398:	f7ff ff9c 	bl	1a0022d4 <std>
1a00239c:	2202      	movs	r2, #2
1a00239e:	2112      	movs	r1, #18
1a0023a0:	68e0      	ldr	r0, [r4, #12]
1a0023a2:	f7ff ff97 	bl	1a0022d4 <std>
1a0023a6:	2301      	movs	r3, #1
1a0023a8:	61a3      	str	r3, [r4, #24]
1a0023aa:	bd10      	pop	{r4, pc}
1a0023ac:	1a003bcc 	.word	0x1a003bcc
1a0023b0:	1a00231d 	.word	0x1a00231d

1a0023b4 <__sfp>:
1a0023b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0023b6:	4b1b      	ldr	r3, [pc, #108]	; (1a002424 <__sfp+0x70>)
1a0023b8:	681e      	ldr	r6, [r3, #0]
1a0023ba:	69b3      	ldr	r3, [r6, #24]
1a0023bc:	4607      	mov	r7, r0
1a0023be:	b913      	cbnz	r3, 1a0023c6 <__sfp+0x12>
1a0023c0:	4630      	mov	r0, r6
1a0023c2:	f7ff ffc7 	bl	1a002354 <__sinit>
1a0023c6:	3648      	adds	r6, #72	; 0x48
1a0023c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a0023cc:	3b01      	subs	r3, #1
1a0023ce:	d503      	bpl.n	1a0023d8 <__sfp+0x24>
1a0023d0:	6833      	ldr	r3, [r6, #0]
1a0023d2:	b133      	cbz	r3, 1a0023e2 <__sfp+0x2e>
1a0023d4:	6836      	ldr	r6, [r6, #0]
1a0023d6:	e7f7      	b.n	1a0023c8 <__sfp+0x14>
1a0023d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a0023dc:	b16d      	cbz	r5, 1a0023fa <__sfp+0x46>
1a0023de:	3468      	adds	r4, #104	; 0x68
1a0023e0:	e7f4      	b.n	1a0023cc <__sfp+0x18>
1a0023e2:	2104      	movs	r1, #4
1a0023e4:	4638      	mov	r0, r7
1a0023e6:	f7ff ff9f 	bl	1a002328 <__sfmoreglue>
1a0023ea:	6030      	str	r0, [r6, #0]
1a0023ec:	2800      	cmp	r0, #0
1a0023ee:	d1f1      	bne.n	1a0023d4 <__sfp+0x20>
1a0023f0:	230c      	movs	r3, #12
1a0023f2:	603b      	str	r3, [r7, #0]
1a0023f4:	4604      	mov	r4, r0
1a0023f6:	4620      	mov	r0, r4
1a0023f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0023fa:	4b0b      	ldr	r3, [pc, #44]	; (1a002428 <__sfp+0x74>)
1a0023fc:	6665      	str	r5, [r4, #100]	; 0x64
1a0023fe:	e9c4 5500 	strd	r5, r5, [r4]
1a002402:	60a5      	str	r5, [r4, #8]
1a002404:	e9c4 3503 	strd	r3, r5, [r4, #12]
1a002408:	e9c4 5505 	strd	r5, r5, [r4, #20]
1a00240c:	2208      	movs	r2, #8
1a00240e:	4629      	mov	r1, r5
1a002410:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a002414:	f7ff fc9b 	bl	1a001d4e <memset>
1a002418:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a00241c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a002420:	e7e9      	b.n	1a0023f6 <__sfp+0x42>
1a002422:	bf00      	nop
1a002424:	1a003bcc 	.word	0x1a003bcc
1a002428:	ffff0001 	.word	0xffff0001

1a00242c <_fwalk>:
1a00242c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002430:	4688      	mov	r8, r1
1a002432:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a002436:	2600      	movs	r6, #0
1a002438:	b914      	cbnz	r4, 1a002440 <_fwalk+0x14>
1a00243a:	4630      	mov	r0, r6
1a00243c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002440:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a002444:	3f01      	subs	r7, #1
1a002446:	d501      	bpl.n	1a00244c <_fwalk+0x20>
1a002448:	6824      	ldr	r4, [r4, #0]
1a00244a:	e7f5      	b.n	1a002438 <_fwalk+0xc>
1a00244c:	89ab      	ldrh	r3, [r5, #12]
1a00244e:	2b01      	cmp	r3, #1
1a002450:	d906      	bls.n	1a002460 <_fwalk+0x34>
1a002452:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a002456:	3301      	adds	r3, #1
1a002458:	d002      	beq.n	1a002460 <_fwalk+0x34>
1a00245a:	4628      	mov	r0, r5
1a00245c:	47c0      	blx	r8
1a00245e:	4306      	orrs	r6, r0
1a002460:	3568      	adds	r5, #104	; 0x68
1a002462:	e7ef      	b.n	1a002444 <_fwalk+0x18>

1a002464 <_fwalk_reent>:
1a002464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a002468:	4680      	mov	r8, r0
1a00246a:	4689      	mov	r9, r1
1a00246c:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a002470:	2600      	movs	r6, #0
1a002472:	b914      	cbnz	r4, 1a00247a <_fwalk_reent+0x16>
1a002474:	4630      	mov	r0, r6
1a002476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00247a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a00247e:	3f01      	subs	r7, #1
1a002480:	d501      	bpl.n	1a002486 <_fwalk_reent+0x22>
1a002482:	6824      	ldr	r4, [r4, #0]
1a002484:	e7f5      	b.n	1a002472 <_fwalk_reent+0xe>
1a002486:	89ab      	ldrh	r3, [r5, #12]
1a002488:	2b01      	cmp	r3, #1
1a00248a:	d907      	bls.n	1a00249c <_fwalk_reent+0x38>
1a00248c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a002490:	3301      	adds	r3, #1
1a002492:	d003      	beq.n	1a00249c <_fwalk_reent+0x38>
1a002494:	4629      	mov	r1, r5
1a002496:	4640      	mov	r0, r8
1a002498:	47c8      	blx	r9
1a00249a:	4306      	orrs	r6, r0
1a00249c:	3568      	adds	r5, #104	; 0x68
1a00249e:	e7ee      	b.n	1a00247e <_fwalk_reent+0x1a>

1a0024a0 <__locale_ctype_ptr_l>:
1a0024a0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
1a0024a4:	4770      	bx	lr
1a0024a6:	Address 0x000000001a0024a6 is out of bounds.


1a0024a8 <__locale_ctype_ptr>:
1a0024a8:	4b04      	ldr	r3, [pc, #16]	; (1a0024bc <__locale_ctype_ptr+0x14>)
1a0024aa:	4a05      	ldr	r2, [pc, #20]	; (1a0024c0 <__locale_ctype_ptr+0x18>)
1a0024ac:	681b      	ldr	r3, [r3, #0]
1a0024ae:	6a1b      	ldr	r3, [r3, #32]
1a0024b0:	2b00      	cmp	r3, #0
1a0024b2:	bf08      	it	eq
1a0024b4:	4613      	moveq	r3, r2
1a0024b6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
1a0024ba:	4770      	bx	lr
1a0024bc:	10000048 	.word	0x10000048
1a0024c0:	100000ac 	.word	0x100000ac

1a0024c4 <__swhatbuf_r>:
1a0024c4:	b570      	push	{r4, r5, r6, lr}
1a0024c6:	460e      	mov	r6, r1
1a0024c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0024cc:	2900      	cmp	r1, #0
1a0024ce:	b096      	sub	sp, #88	; 0x58
1a0024d0:	4614      	mov	r4, r2
1a0024d2:	461d      	mov	r5, r3
1a0024d4:	da07      	bge.n	1a0024e6 <__swhatbuf_r+0x22>
1a0024d6:	2300      	movs	r3, #0
1a0024d8:	602b      	str	r3, [r5, #0]
1a0024da:	89b3      	ldrh	r3, [r6, #12]
1a0024dc:	061a      	lsls	r2, r3, #24
1a0024de:	d410      	bmi.n	1a002502 <__swhatbuf_r+0x3e>
1a0024e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a0024e4:	e00e      	b.n	1a002504 <__swhatbuf_r+0x40>
1a0024e6:	466a      	mov	r2, sp
1a0024e8:	f7fe f8df 	bl	1a0006aa <_fstat_r>
1a0024ec:	2800      	cmp	r0, #0
1a0024ee:	dbf2      	blt.n	1a0024d6 <__swhatbuf_r+0x12>
1a0024f0:	9a01      	ldr	r2, [sp, #4]
1a0024f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a0024f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a0024fa:	425a      	negs	r2, r3
1a0024fc:	415a      	adcs	r2, r3
1a0024fe:	602a      	str	r2, [r5, #0]
1a002500:	e7ee      	b.n	1a0024e0 <__swhatbuf_r+0x1c>
1a002502:	2340      	movs	r3, #64	; 0x40
1a002504:	2000      	movs	r0, #0
1a002506:	6023      	str	r3, [r4, #0]
1a002508:	b016      	add	sp, #88	; 0x58
1a00250a:	bd70      	pop	{r4, r5, r6, pc}

1a00250c <__smakebuf_r>:
1a00250c:	898b      	ldrh	r3, [r1, #12]
1a00250e:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a002510:	079d      	lsls	r5, r3, #30
1a002512:	4606      	mov	r6, r0
1a002514:	460c      	mov	r4, r1
1a002516:	d507      	bpl.n	1a002528 <__smakebuf_r+0x1c>
1a002518:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a00251c:	6023      	str	r3, [r4, #0]
1a00251e:	6123      	str	r3, [r4, #16]
1a002520:	2301      	movs	r3, #1
1a002522:	6163      	str	r3, [r4, #20]
1a002524:	b002      	add	sp, #8
1a002526:	bd70      	pop	{r4, r5, r6, pc}
1a002528:	ab01      	add	r3, sp, #4
1a00252a:	466a      	mov	r2, sp
1a00252c:	f7ff ffca 	bl	1a0024c4 <__swhatbuf_r>
1a002530:	9900      	ldr	r1, [sp, #0]
1a002532:	4605      	mov	r5, r0
1a002534:	4630      	mov	r0, r6
1a002536:	f000 f889 	bl	1a00264c <_malloc_r>
1a00253a:	b948      	cbnz	r0, 1a002550 <__smakebuf_r+0x44>
1a00253c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002540:	059a      	lsls	r2, r3, #22
1a002542:	d4ef      	bmi.n	1a002524 <__smakebuf_r+0x18>
1a002544:	f023 0303 	bic.w	r3, r3, #3
1a002548:	f043 0302 	orr.w	r3, r3, #2
1a00254c:	81a3      	strh	r3, [r4, #12]
1a00254e:	e7e3      	b.n	1a002518 <__smakebuf_r+0xc>
1a002550:	4b0d      	ldr	r3, [pc, #52]	; (1a002588 <__smakebuf_r+0x7c>)
1a002552:	62b3      	str	r3, [r6, #40]	; 0x28
1a002554:	89a3      	ldrh	r3, [r4, #12]
1a002556:	6020      	str	r0, [r4, #0]
1a002558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00255c:	81a3      	strh	r3, [r4, #12]
1a00255e:	9b00      	ldr	r3, [sp, #0]
1a002560:	6163      	str	r3, [r4, #20]
1a002562:	9b01      	ldr	r3, [sp, #4]
1a002564:	6120      	str	r0, [r4, #16]
1a002566:	b15b      	cbz	r3, 1a002580 <__smakebuf_r+0x74>
1a002568:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a00256c:	4630      	mov	r0, r6
1a00256e:	f7fe f8a1 	bl	1a0006b4 <_isatty_r>
1a002572:	b128      	cbz	r0, 1a002580 <__smakebuf_r+0x74>
1a002574:	89a3      	ldrh	r3, [r4, #12]
1a002576:	f023 0303 	bic.w	r3, r3, #3
1a00257a:	f043 0301 	orr.w	r3, r3, #1
1a00257e:	81a3      	strh	r3, [r4, #12]
1a002580:	89a3      	ldrh	r3, [r4, #12]
1a002582:	431d      	orrs	r5, r3
1a002584:	81a5      	strh	r5, [r4, #12]
1a002586:	e7cd      	b.n	1a002524 <__smakebuf_r+0x18>
1a002588:	1a00231d 	.word	0x1a00231d

1a00258c <__ascii_mbtowc>:
1a00258c:	b082      	sub	sp, #8
1a00258e:	b901      	cbnz	r1, 1a002592 <__ascii_mbtowc+0x6>
1a002590:	a901      	add	r1, sp, #4
1a002592:	b142      	cbz	r2, 1a0025a6 <__ascii_mbtowc+0x1a>
1a002594:	b14b      	cbz	r3, 1a0025aa <__ascii_mbtowc+0x1e>
1a002596:	7813      	ldrb	r3, [r2, #0]
1a002598:	600b      	str	r3, [r1, #0]
1a00259a:	7812      	ldrb	r2, [r2, #0]
1a00259c:	1c10      	adds	r0, r2, #0
1a00259e:	bf18      	it	ne
1a0025a0:	2001      	movne	r0, #1
1a0025a2:	b002      	add	sp, #8
1a0025a4:	4770      	bx	lr
1a0025a6:	4610      	mov	r0, r2
1a0025a8:	e7fb      	b.n	1a0025a2 <__ascii_mbtowc+0x16>
1a0025aa:	f06f 0001 	mvn.w	r0, #1
1a0025ae:	e7f8      	b.n	1a0025a2 <__ascii_mbtowc+0x16>

1a0025b0 <_free_r>:
1a0025b0:	b538      	push	{r3, r4, r5, lr}
1a0025b2:	4605      	mov	r5, r0
1a0025b4:	2900      	cmp	r1, #0
1a0025b6:	d045      	beq.n	1a002644 <_free_r+0x94>
1a0025b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a0025bc:	1f0c      	subs	r4, r1, #4
1a0025be:	2b00      	cmp	r3, #0
1a0025c0:	bfb8      	it	lt
1a0025c2:	18e4      	addlt	r4, r4, r3
1a0025c4:	f001 f8dc 	bl	1a003780 <__malloc_lock>
1a0025c8:	4a1f      	ldr	r2, [pc, #124]	; (1a002648 <_free_r+0x98>)
1a0025ca:	6813      	ldr	r3, [r2, #0]
1a0025cc:	4610      	mov	r0, r2
1a0025ce:	b933      	cbnz	r3, 1a0025de <_free_r+0x2e>
1a0025d0:	6063      	str	r3, [r4, #4]
1a0025d2:	6014      	str	r4, [r2, #0]
1a0025d4:	4628      	mov	r0, r5
1a0025d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a0025da:	f001 b8d2 	b.w	1a003782 <__malloc_unlock>
1a0025de:	42a3      	cmp	r3, r4
1a0025e0:	d90c      	bls.n	1a0025fc <_free_r+0x4c>
1a0025e2:	6821      	ldr	r1, [r4, #0]
1a0025e4:	1862      	adds	r2, r4, r1
1a0025e6:	4293      	cmp	r3, r2
1a0025e8:	bf04      	itt	eq
1a0025ea:	681a      	ldreq	r2, [r3, #0]
1a0025ec:	685b      	ldreq	r3, [r3, #4]
1a0025ee:	6063      	str	r3, [r4, #4]
1a0025f0:	bf04      	itt	eq
1a0025f2:	1852      	addeq	r2, r2, r1
1a0025f4:	6022      	streq	r2, [r4, #0]
1a0025f6:	6004      	str	r4, [r0, #0]
1a0025f8:	e7ec      	b.n	1a0025d4 <_free_r+0x24>
1a0025fa:	4613      	mov	r3, r2
1a0025fc:	685a      	ldr	r2, [r3, #4]
1a0025fe:	b10a      	cbz	r2, 1a002604 <_free_r+0x54>
1a002600:	42a2      	cmp	r2, r4
1a002602:	d9fa      	bls.n	1a0025fa <_free_r+0x4a>
1a002604:	6819      	ldr	r1, [r3, #0]
1a002606:	1858      	adds	r0, r3, r1
1a002608:	42a0      	cmp	r0, r4
1a00260a:	d10b      	bne.n	1a002624 <_free_r+0x74>
1a00260c:	6820      	ldr	r0, [r4, #0]
1a00260e:	4401      	add	r1, r0
1a002610:	1858      	adds	r0, r3, r1
1a002612:	4282      	cmp	r2, r0
1a002614:	6019      	str	r1, [r3, #0]
1a002616:	d1dd      	bne.n	1a0025d4 <_free_r+0x24>
1a002618:	6810      	ldr	r0, [r2, #0]
1a00261a:	6852      	ldr	r2, [r2, #4]
1a00261c:	605a      	str	r2, [r3, #4]
1a00261e:	4401      	add	r1, r0
1a002620:	6019      	str	r1, [r3, #0]
1a002622:	e7d7      	b.n	1a0025d4 <_free_r+0x24>
1a002624:	d902      	bls.n	1a00262c <_free_r+0x7c>
1a002626:	230c      	movs	r3, #12
1a002628:	602b      	str	r3, [r5, #0]
1a00262a:	e7d3      	b.n	1a0025d4 <_free_r+0x24>
1a00262c:	6820      	ldr	r0, [r4, #0]
1a00262e:	1821      	adds	r1, r4, r0
1a002630:	428a      	cmp	r2, r1
1a002632:	bf04      	itt	eq
1a002634:	6811      	ldreq	r1, [r2, #0]
1a002636:	6852      	ldreq	r2, [r2, #4]
1a002638:	6062      	str	r2, [r4, #4]
1a00263a:	bf04      	itt	eq
1a00263c:	1809      	addeq	r1, r1, r0
1a00263e:	6021      	streq	r1, [r4, #0]
1a002640:	605c      	str	r4, [r3, #4]
1a002642:	e7c7      	b.n	1a0025d4 <_free_r+0x24>
1a002644:	bd38      	pop	{r3, r4, r5, pc}
1a002646:	bf00      	nop
1a002648:	10000238 	.word	0x10000238

1a00264c <_malloc_r>:
1a00264c:	b570      	push	{r4, r5, r6, lr}
1a00264e:	1ccd      	adds	r5, r1, #3
1a002650:	f025 0503 	bic.w	r5, r5, #3
1a002654:	3508      	adds	r5, #8
1a002656:	2d0c      	cmp	r5, #12
1a002658:	bf38      	it	cc
1a00265a:	250c      	movcc	r5, #12
1a00265c:	2d00      	cmp	r5, #0
1a00265e:	4606      	mov	r6, r0
1a002660:	db01      	blt.n	1a002666 <_malloc_r+0x1a>
1a002662:	42a9      	cmp	r1, r5
1a002664:	d903      	bls.n	1a00266e <_malloc_r+0x22>
1a002666:	230c      	movs	r3, #12
1a002668:	6033      	str	r3, [r6, #0]
1a00266a:	2000      	movs	r0, #0
1a00266c:	bd70      	pop	{r4, r5, r6, pc}
1a00266e:	f001 f887 	bl	1a003780 <__malloc_lock>
1a002672:	4a21      	ldr	r2, [pc, #132]	; (1a0026f8 <_malloc_r+0xac>)
1a002674:	6814      	ldr	r4, [r2, #0]
1a002676:	4621      	mov	r1, r4
1a002678:	b991      	cbnz	r1, 1a0026a0 <_malloc_r+0x54>
1a00267a:	4c20      	ldr	r4, [pc, #128]	; (1a0026fc <_malloc_r+0xb0>)
1a00267c:	6823      	ldr	r3, [r4, #0]
1a00267e:	b91b      	cbnz	r3, 1a002688 <_malloc_r+0x3c>
1a002680:	4630      	mov	r0, r6
1a002682:	f7fe f861 	bl	1a000748 <_sbrk_r>
1a002686:	6020      	str	r0, [r4, #0]
1a002688:	4629      	mov	r1, r5
1a00268a:	4630      	mov	r0, r6
1a00268c:	f7fe f85c 	bl	1a000748 <_sbrk_r>
1a002690:	1c43      	adds	r3, r0, #1
1a002692:	d124      	bne.n	1a0026de <_malloc_r+0x92>
1a002694:	230c      	movs	r3, #12
1a002696:	6033      	str	r3, [r6, #0]
1a002698:	4630      	mov	r0, r6
1a00269a:	f001 f872 	bl	1a003782 <__malloc_unlock>
1a00269e:	e7e4      	b.n	1a00266a <_malloc_r+0x1e>
1a0026a0:	680b      	ldr	r3, [r1, #0]
1a0026a2:	1b5b      	subs	r3, r3, r5
1a0026a4:	d418      	bmi.n	1a0026d8 <_malloc_r+0x8c>
1a0026a6:	2b0b      	cmp	r3, #11
1a0026a8:	d90f      	bls.n	1a0026ca <_malloc_r+0x7e>
1a0026aa:	600b      	str	r3, [r1, #0]
1a0026ac:	50cd      	str	r5, [r1, r3]
1a0026ae:	18cc      	adds	r4, r1, r3
1a0026b0:	4630      	mov	r0, r6
1a0026b2:	f001 f866 	bl	1a003782 <__malloc_unlock>
1a0026b6:	f104 000b 	add.w	r0, r4, #11
1a0026ba:	1d23      	adds	r3, r4, #4
1a0026bc:	f020 0007 	bic.w	r0, r0, #7
1a0026c0:	1ac3      	subs	r3, r0, r3
1a0026c2:	d0d3      	beq.n	1a00266c <_malloc_r+0x20>
1a0026c4:	425a      	negs	r2, r3
1a0026c6:	50e2      	str	r2, [r4, r3]
1a0026c8:	e7d0      	b.n	1a00266c <_malloc_r+0x20>
1a0026ca:	428c      	cmp	r4, r1
1a0026cc:	684b      	ldr	r3, [r1, #4]
1a0026ce:	bf16      	itet	ne
1a0026d0:	6063      	strne	r3, [r4, #4]
1a0026d2:	6013      	streq	r3, [r2, #0]
1a0026d4:	460c      	movne	r4, r1
1a0026d6:	e7eb      	b.n	1a0026b0 <_malloc_r+0x64>
1a0026d8:	460c      	mov	r4, r1
1a0026da:	6849      	ldr	r1, [r1, #4]
1a0026dc:	e7cc      	b.n	1a002678 <_malloc_r+0x2c>
1a0026de:	1cc4      	adds	r4, r0, #3
1a0026e0:	f024 0403 	bic.w	r4, r4, #3
1a0026e4:	42a0      	cmp	r0, r4
1a0026e6:	d005      	beq.n	1a0026f4 <_malloc_r+0xa8>
1a0026e8:	1a21      	subs	r1, r4, r0
1a0026ea:	4630      	mov	r0, r6
1a0026ec:	f7fe f82c 	bl	1a000748 <_sbrk_r>
1a0026f0:	3001      	adds	r0, #1
1a0026f2:	d0cf      	beq.n	1a002694 <_malloc_r+0x48>
1a0026f4:	6025      	str	r5, [r4, #0]
1a0026f6:	e7db      	b.n	1a0026b0 <_malloc_r+0x64>
1a0026f8:	10000238 	.word	0x10000238
1a0026fc:	1000023c 	.word	0x1000023c

1a002700 <__sfputc_r>:
1a002700:	6893      	ldr	r3, [r2, #8]
1a002702:	3b01      	subs	r3, #1
1a002704:	2b00      	cmp	r3, #0
1a002706:	b410      	push	{r4}
1a002708:	6093      	str	r3, [r2, #8]
1a00270a:	da08      	bge.n	1a00271e <__sfputc_r+0x1e>
1a00270c:	6994      	ldr	r4, [r2, #24]
1a00270e:	42a3      	cmp	r3, r4
1a002710:	db01      	blt.n	1a002716 <__sfputc_r+0x16>
1a002712:	290a      	cmp	r1, #10
1a002714:	d103      	bne.n	1a00271e <__sfputc_r+0x1e>
1a002716:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00271a:	f7ff bc59 	b.w	1a001fd0 <__swbuf_r>
1a00271e:	6813      	ldr	r3, [r2, #0]
1a002720:	1c58      	adds	r0, r3, #1
1a002722:	6010      	str	r0, [r2, #0]
1a002724:	7019      	strb	r1, [r3, #0]
1a002726:	4608      	mov	r0, r1
1a002728:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00272c:	4770      	bx	lr

1a00272e <__sfputs_r>:
1a00272e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002730:	4606      	mov	r6, r0
1a002732:	460f      	mov	r7, r1
1a002734:	4614      	mov	r4, r2
1a002736:	18d5      	adds	r5, r2, r3
1a002738:	42ac      	cmp	r4, r5
1a00273a:	d101      	bne.n	1a002740 <__sfputs_r+0x12>
1a00273c:	2000      	movs	r0, #0
1a00273e:	e007      	b.n	1a002750 <__sfputs_r+0x22>
1a002740:	463a      	mov	r2, r7
1a002742:	f814 1b01 	ldrb.w	r1, [r4], #1
1a002746:	4630      	mov	r0, r6
1a002748:	f7ff ffda 	bl	1a002700 <__sfputc_r>
1a00274c:	1c43      	adds	r3, r0, #1
1a00274e:	d1f3      	bne.n	1a002738 <__sfputs_r+0xa>
1a002750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002752:	Address 0x000000001a002752 is out of bounds.


1a002754 <_vfiprintf_r>:
1a002754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002758:	460c      	mov	r4, r1
1a00275a:	b09d      	sub	sp, #116	; 0x74
1a00275c:	4617      	mov	r7, r2
1a00275e:	461d      	mov	r5, r3
1a002760:	4606      	mov	r6, r0
1a002762:	b118      	cbz	r0, 1a00276c <_vfiprintf_r+0x18>
1a002764:	6983      	ldr	r3, [r0, #24]
1a002766:	b90b      	cbnz	r3, 1a00276c <_vfiprintf_r+0x18>
1a002768:	f7ff fdf4 	bl	1a002354 <__sinit>
1a00276c:	4b7c      	ldr	r3, [pc, #496]	; (1a002960 <_vfiprintf_r+0x20c>)
1a00276e:	429c      	cmp	r4, r3
1a002770:	d158      	bne.n	1a002824 <_vfiprintf_r+0xd0>
1a002772:	6874      	ldr	r4, [r6, #4]
1a002774:	89a3      	ldrh	r3, [r4, #12]
1a002776:	0718      	lsls	r0, r3, #28
1a002778:	d55e      	bpl.n	1a002838 <_vfiprintf_r+0xe4>
1a00277a:	6923      	ldr	r3, [r4, #16]
1a00277c:	2b00      	cmp	r3, #0
1a00277e:	d05b      	beq.n	1a002838 <_vfiprintf_r+0xe4>
1a002780:	2300      	movs	r3, #0
1a002782:	9309      	str	r3, [sp, #36]	; 0x24
1a002784:	2320      	movs	r3, #32
1a002786:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a00278a:	2330      	movs	r3, #48	; 0x30
1a00278c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a002790:	9503      	str	r5, [sp, #12]
1a002792:	f04f 0b01 	mov.w	fp, #1
1a002796:	46b8      	mov	r8, r7
1a002798:	4645      	mov	r5, r8
1a00279a:	f815 3b01 	ldrb.w	r3, [r5], #1
1a00279e:	b10b      	cbz	r3, 1a0027a4 <_vfiprintf_r+0x50>
1a0027a0:	2b25      	cmp	r3, #37	; 0x25
1a0027a2:	d154      	bne.n	1a00284e <_vfiprintf_r+0xfa>
1a0027a4:	ebb8 0a07 	subs.w	sl, r8, r7
1a0027a8:	d00b      	beq.n	1a0027c2 <_vfiprintf_r+0x6e>
1a0027aa:	4653      	mov	r3, sl
1a0027ac:	463a      	mov	r2, r7
1a0027ae:	4621      	mov	r1, r4
1a0027b0:	4630      	mov	r0, r6
1a0027b2:	f7ff ffbc 	bl	1a00272e <__sfputs_r>
1a0027b6:	3001      	adds	r0, #1
1a0027b8:	f000 80c2 	beq.w	1a002940 <_vfiprintf_r+0x1ec>
1a0027bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0027be:	4453      	add	r3, sl
1a0027c0:	9309      	str	r3, [sp, #36]	; 0x24
1a0027c2:	f898 3000 	ldrb.w	r3, [r8]
1a0027c6:	2b00      	cmp	r3, #0
1a0027c8:	f000 80ba 	beq.w	1a002940 <_vfiprintf_r+0x1ec>
1a0027cc:	2300      	movs	r3, #0
1a0027ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0027d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a0027d6:	9304      	str	r3, [sp, #16]
1a0027d8:	9307      	str	r3, [sp, #28]
1a0027da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a0027de:	931a      	str	r3, [sp, #104]	; 0x68
1a0027e0:	46a8      	mov	r8, r5
1a0027e2:	2205      	movs	r2, #5
1a0027e4:	f818 1b01 	ldrb.w	r1, [r8], #1
1a0027e8:	485e      	ldr	r0, [pc, #376]	; (1a002964 <_vfiprintf_r+0x210>)
1a0027ea:	f000 ff79 	bl	1a0036e0 <memchr>
1a0027ee:	9b04      	ldr	r3, [sp, #16]
1a0027f0:	bb78      	cbnz	r0, 1a002852 <_vfiprintf_r+0xfe>
1a0027f2:	06d9      	lsls	r1, r3, #27
1a0027f4:	bf44      	itt	mi
1a0027f6:	2220      	movmi	r2, #32
1a0027f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a0027fc:	071a      	lsls	r2, r3, #28
1a0027fe:	bf44      	itt	mi
1a002800:	222b      	movmi	r2, #43	; 0x2b
1a002802:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a002806:	782a      	ldrb	r2, [r5, #0]
1a002808:	2a2a      	cmp	r2, #42	; 0x2a
1a00280a:	d02a      	beq.n	1a002862 <_vfiprintf_r+0x10e>
1a00280c:	9a07      	ldr	r2, [sp, #28]
1a00280e:	46a8      	mov	r8, r5
1a002810:	2000      	movs	r0, #0
1a002812:	250a      	movs	r5, #10
1a002814:	4641      	mov	r1, r8
1a002816:	f811 3b01 	ldrb.w	r3, [r1], #1
1a00281a:	3b30      	subs	r3, #48	; 0x30
1a00281c:	2b09      	cmp	r3, #9
1a00281e:	d969      	bls.n	1a0028f4 <_vfiprintf_r+0x1a0>
1a002820:	b360      	cbz	r0, 1a00287c <_vfiprintf_r+0x128>
1a002822:	e024      	b.n	1a00286e <_vfiprintf_r+0x11a>
1a002824:	4b50      	ldr	r3, [pc, #320]	; (1a002968 <_vfiprintf_r+0x214>)
1a002826:	429c      	cmp	r4, r3
1a002828:	d101      	bne.n	1a00282e <_vfiprintf_r+0xda>
1a00282a:	68b4      	ldr	r4, [r6, #8]
1a00282c:	e7a2      	b.n	1a002774 <_vfiprintf_r+0x20>
1a00282e:	4b4f      	ldr	r3, [pc, #316]	; (1a00296c <_vfiprintf_r+0x218>)
1a002830:	429c      	cmp	r4, r3
1a002832:	bf08      	it	eq
1a002834:	68f4      	ldreq	r4, [r6, #12]
1a002836:	e79d      	b.n	1a002774 <_vfiprintf_r+0x20>
1a002838:	4621      	mov	r1, r4
1a00283a:	4630      	mov	r0, r6
1a00283c:	f7ff fc1a 	bl	1a002074 <__swsetup_r>
1a002840:	2800      	cmp	r0, #0
1a002842:	d09d      	beq.n	1a002780 <_vfiprintf_r+0x2c>
1a002844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002848:	b01d      	add	sp, #116	; 0x74
1a00284a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00284e:	46a8      	mov	r8, r5
1a002850:	e7a2      	b.n	1a002798 <_vfiprintf_r+0x44>
1a002852:	4a44      	ldr	r2, [pc, #272]	; (1a002964 <_vfiprintf_r+0x210>)
1a002854:	1a80      	subs	r0, r0, r2
1a002856:	fa0b f000 	lsl.w	r0, fp, r0
1a00285a:	4318      	orrs	r0, r3
1a00285c:	9004      	str	r0, [sp, #16]
1a00285e:	4645      	mov	r5, r8
1a002860:	e7be      	b.n	1a0027e0 <_vfiprintf_r+0x8c>
1a002862:	9a03      	ldr	r2, [sp, #12]
1a002864:	1d11      	adds	r1, r2, #4
1a002866:	6812      	ldr	r2, [r2, #0]
1a002868:	9103      	str	r1, [sp, #12]
1a00286a:	2a00      	cmp	r2, #0
1a00286c:	db01      	blt.n	1a002872 <_vfiprintf_r+0x11e>
1a00286e:	9207      	str	r2, [sp, #28]
1a002870:	e004      	b.n	1a00287c <_vfiprintf_r+0x128>
1a002872:	4252      	negs	r2, r2
1a002874:	f043 0302 	orr.w	r3, r3, #2
1a002878:	9207      	str	r2, [sp, #28]
1a00287a:	9304      	str	r3, [sp, #16]
1a00287c:	f898 3000 	ldrb.w	r3, [r8]
1a002880:	2b2e      	cmp	r3, #46	; 0x2e
1a002882:	d10e      	bne.n	1a0028a2 <_vfiprintf_r+0x14e>
1a002884:	f898 3001 	ldrb.w	r3, [r8, #1]
1a002888:	2b2a      	cmp	r3, #42	; 0x2a
1a00288a:	d138      	bne.n	1a0028fe <_vfiprintf_r+0x1aa>
1a00288c:	9b03      	ldr	r3, [sp, #12]
1a00288e:	1d1a      	adds	r2, r3, #4
1a002890:	681b      	ldr	r3, [r3, #0]
1a002892:	9203      	str	r2, [sp, #12]
1a002894:	2b00      	cmp	r3, #0
1a002896:	bfb8      	it	lt
1a002898:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a00289c:	f108 0802 	add.w	r8, r8, #2
1a0028a0:	9305      	str	r3, [sp, #20]
1a0028a2:	4d33      	ldr	r5, [pc, #204]	; (1a002970 <_vfiprintf_r+0x21c>)
1a0028a4:	f898 1000 	ldrb.w	r1, [r8]
1a0028a8:	2203      	movs	r2, #3
1a0028aa:	4628      	mov	r0, r5
1a0028ac:	f000 ff18 	bl	1a0036e0 <memchr>
1a0028b0:	b140      	cbz	r0, 1a0028c4 <_vfiprintf_r+0x170>
1a0028b2:	2340      	movs	r3, #64	; 0x40
1a0028b4:	1b40      	subs	r0, r0, r5
1a0028b6:	fa03 f000 	lsl.w	r0, r3, r0
1a0028ba:	9b04      	ldr	r3, [sp, #16]
1a0028bc:	4303      	orrs	r3, r0
1a0028be:	f108 0801 	add.w	r8, r8, #1
1a0028c2:	9304      	str	r3, [sp, #16]
1a0028c4:	f898 1000 	ldrb.w	r1, [r8]
1a0028c8:	482a      	ldr	r0, [pc, #168]	; (1a002974 <_vfiprintf_r+0x220>)
1a0028ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a0028ce:	2206      	movs	r2, #6
1a0028d0:	f108 0701 	add.w	r7, r8, #1
1a0028d4:	f000 ff04 	bl	1a0036e0 <memchr>
1a0028d8:	2800      	cmp	r0, #0
1a0028da:	d037      	beq.n	1a00294c <_vfiprintf_r+0x1f8>
1a0028dc:	4b26      	ldr	r3, [pc, #152]	; (1a002978 <_vfiprintf_r+0x224>)
1a0028de:	bb1b      	cbnz	r3, 1a002928 <_vfiprintf_r+0x1d4>
1a0028e0:	9b03      	ldr	r3, [sp, #12]
1a0028e2:	3307      	adds	r3, #7
1a0028e4:	f023 0307 	bic.w	r3, r3, #7
1a0028e8:	3308      	adds	r3, #8
1a0028ea:	9303      	str	r3, [sp, #12]
1a0028ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0028ee:	444b      	add	r3, r9
1a0028f0:	9309      	str	r3, [sp, #36]	; 0x24
1a0028f2:	e750      	b.n	1a002796 <_vfiprintf_r+0x42>
1a0028f4:	fb05 3202 	mla	r2, r5, r2, r3
1a0028f8:	2001      	movs	r0, #1
1a0028fa:	4688      	mov	r8, r1
1a0028fc:	e78a      	b.n	1a002814 <_vfiprintf_r+0xc0>
1a0028fe:	2300      	movs	r3, #0
1a002900:	f108 0801 	add.w	r8, r8, #1
1a002904:	9305      	str	r3, [sp, #20]
1a002906:	4619      	mov	r1, r3
1a002908:	250a      	movs	r5, #10
1a00290a:	4640      	mov	r0, r8
1a00290c:	f810 2b01 	ldrb.w	r2, [r0], #1
1a002910:	3a30      	subs	r2, #48	; 0x30
1a002912:	2a09      	cmp	r2, #9
1a002914:	d903      	bls.n	1a00291e <_vfiprintf_r+0x1ca>
1a002916:	2b00      	cmp	r3, #0
1a002918:	d0c3      	beq.n	1a0028a2 <_vfiprintf_r+0x14e>
1a00291a:	9105      	str	r1, [sp, #20]
1a00291c:	e7c1      	b.n	1a0028a2 <_vfiprintf_r+0x14e>
1a00291e:	fb05 2101 	mla	r1, r5, r1, r2
1a002922:	2301      	movs	r3, #1
1a002924:	4680      	mov	r8, r0
1a002926:	e7f0      	b.n	1a00290a <_vfiprintf_r+0x1b6>
1a002928:	ab03      	add	r3, sp, #12
1a00292a:	9300      	str	r3, [sp, #0]
1a00292c:	4622      	mov	r2, r4
1a00292e:	4b13      	ldr	r3, [pc, #76]	; (1a00297c <_vfiprintf_r+0x228>)
1a002930:	a904      	add	r1, sp, #16
1a002932:	4630      	mov	r0, r6
1a002934:	f3af 8000 	nop.w
1a002938:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00293c:	4681      	mov	r9, r0
1a00293e:	d1d5      	bne.n	1a0028ec <_vfiprintf_r+0x198>
1a002940:	89a3      	ldrh	r3, [r4, #12]
1a002942:	065b      	lsls	r3, r3, #25
1a002944:	f53f af7e 	bmi.w	1a002844 <_vfiprintf_r+0xf0>
1a002948:	9809      	ldr	r0, [sp, #36]	; 0x24
1a00294a:	e77d      	b.n	1a002848 <_vfiprintf_r+0xf4>
1a00294c:	ab03      	add	r3, sp, #12
1a00294e:	9300      	str	r3, [sp, #0]
1a002950:	4622      	mov	r2, r4
1a002952:	4b0a      	ldr	r3, [pc, #40]	; (1a00297c <_vfiprintf_r+0x228>)
1a002954:	a904      	add	r1, sp, #16
1a002956:	4630      	mov	r0, r6
1a002958:	f000 f888 	bl	1a002a6c <_printf_i>
1a00295c:	e7ec      	b.n	1a002938 <_vfiprintf_r+0x1e4>
1a00295e:	bf00      	nop
1a002960:	1a003b8c 	.word	0x1a003b8c
1a002964:	1a003bda 	.word	0x1a003bda
1a002968:	1a003bac 	.word	0x1a003bac
1a00296c:	1a003b6c 	.word	0x1a003b6c
1a002970:	1a003be0 	.word	0x1a003be0
1a002974:	1a003be4 	.word	0x1a003be4
1a002978:	00000000 	.word	0x00000000
1a00297c:	1a00272f 	.word	0x1a00272f

1a002980 <_printf_common>:
1a002980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a002984:	4691      	mov	r9, r2
1a002986:	461f      	mov	r7, r3
1a002988:	688a      	ldr	r2, [r1, #8]
1a00298a:	690b      	ldr	r3, [r1, #16]
1a00298c:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a002990:	4293      	cmp	r3, r2
1a002992:	bfb8      	it	lt
1a002994:	4613      	movlt	r3, r2
1a002996:	f8c9 3000 	str.w	r3, [r9]
1a00299a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a00299e:	4606      	mov	r6, r0
1a0029a0:	460c      	mov	r4, r1
1a0029a2:	b112      	cbz	r2, 1a0029aa <_printf_common+0x2a>
1a0029a4:	3301      	adds	r3, #1
1a0029a6:	f8c9 3000 	str.w	r3, [r9]
1a0029aa:	6823      	ldr	r3, [r4, #0]
1a0029ac:	0699      	lsls	r1, r3, #26
1a0029ae:	bf42      	ittt	mi
1a0029b0:	f8d9 3000 	ldrmi.w	r3, [r9]
1a0029b4:	3302      	addmi	r3, #2
1a0029b6:	f8c9 3000 	strmi.w	r3, [r9]
1a0029ba:	6825      	ldr	r5, [r4, #0]
1a0029bc:	f015 0506 	ands.w	r5, r5, #6
1a0029c0:	d107      	bne.n	1a0029d2 <_printf_common+0x52>
1a0029c2:	f104 0a19 	add.w	sl, r4, #25
1a0029c6:	68e3      	ldr	r3, [r4, #12]
1a0029c8:	f8d9 2000 	ldr.w	r2, [r9]
1a0029cc:	1a9b      	subs	r3, r3, r2
1a0029ce:	42ab      	cmp	r3, r5
1a0029d0:	dc28      	bgt.n	1a002a24 <_printf_common+0xa4>
1a0029d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a0029d6:	6822      	ldr	r2, [r4, #0]
1a0029d8:	3300      	adds	r3, #0
1a0029da:	bf18      	it	ne
1a0029dc:	2301      	movne	r3, #1
1a0029de:	0692      	lsls	r2, r2, #26
1a0029e0:	d42d      	bmi.n	1a002a3e <_printf_common+0xbe>
1a0029e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a0029e6:	4639      	mov	r1, r7
1a0029e8:	4630      	mov	r0, r6
1a0029ea:	47c0      	blx	r8
1a0029ec:	3001      	adds	r0, #1
1a0029ee:	d020      	beq.n	1a002a32 <_printf_common+0xb2>
1a0029f0:	6823      	ldr	r3, [r4, #0]
1a0029f2:	68e5      	ldr	r5, [r4, #12]
1a0029f4:	f8d9 2000 	ldr.w	r2, [r9]
1a0029f8:	f003 0306 	and.w	r3, r3, #6
1a0029fc:	2b04      	cmp	r3, #4
1a0029fe:	bf08      	it	eq
1a002a00:	1aad      	subeq	r5, r5, r2
1a002a02:	68a3      	ldr	r3, [r4, #8]
1a002a04:	6922      	ldr	r2, [r4, #16]
1a002a06:	bf0c      	ite	eq
1a002a08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a002a0c:	2500      	movne	r5, #0
1a002a0e:	4293      	cmp	r3, r2
1a002a10:	bfc4      	itt	gt
1a002a12:	1a9b      	subgt	r3, r3, r2
1a002a14:	18ed      	addgt	r5, r5, r3
1a002a16:	f04f 0900 	mov.w	r9, #0
1a002a1a:	341a      	adds	r4, #26
1a002a1c:	454d      	cmp	r5, r9
1a002a1e:	d11a      	bne.n	1a002a56 <_printf_common+0xd6>
1a002a20:	2000      	movs	r0, #0
1a002a22:	e008      	b.n	1a002a36 <_printf_common+0xb6>
1a002a24:	2301      	movs	r3, #1
1a002a26:	4652      	mov	r2, sl
1a002a28:	4639      	mov	r1, r7
1a002a2a:	4630      	mov	r0, r6
1a002a2c:	47c0      	blx	r8
1a002a2e:	3001      	adds	r0, #1
1a002a30:	d103      	bne.n	1a002a3a <_printf_common+0xba>
1a002a32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002a3a:	3501      	adds	r5, #1
1a002a3c:	e7c3      	b.n	1a0029c6 <_printf_common+0x46>
1a002a3e:	18e1      	adds	r1, r4, r3
1a002a40:	1c5a      	adds	r2, r3, #1
1a002a42:	2030      	movs	r0, #48	; 0x30
1a002a44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a002a48:	4422      	add	r2, r4
1a002a4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a002a4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a002a52:	3302      	adds	r3, #2
1a002a54:	e7c5      	b.n	1a0029e2 <_printf_common+0x62>
1a002a56:	2301      	movs	r3, #1
1a002a58:	4622      	mov	r2, r4
1a002a5a:	4639      	mov	r1, r7
1a002a5c:	4630      	mov	r0, r6
1a002a5e:	47c0      	blx	r8
1a002a60:	3001      	adds	r0, #1
1a002a62:	d0e6      	beq.n	1a002a32 <_printf_common+0xb2>
1a002a64:	f109 0901 	add.w	r9, r9, #1
1a002a68:	e7d8      	b.n	1a002a1c <_printf_common+0x9c>
1a002a6a:	Address 0x000000001a002a6a is out of bounds.


1a002a6c <_printf_i>:
1a002a6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a002a70:	f101 0c43 	add.w	ip, r1, #67	; 0x43
1a002a74:	460c      	mov	r4, r1
1a002a76:	7e09      	ldrb	r1, [r1, #24]
1a002a78:	b085      	sub	sp, #20
1a002a7a:	296e      	cmp	r1, #110	; 0x6e
1a002a7c:	4617      	mov	r7, r2
1a002a7e:	4606      	mov	r6, r0
1a002a80:	4698      	mov	r8, r3
1a002a82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a002a84:	f000 80b3 	beq.w	1a002bee <_printf_i+0x182>
1a002a88:	d822      	bhi.n	1a002ad0 <_printf_i+0x64>
1a002a8a:	2963      	cmp	r1, #99	; 0x63
1a002a8c:	d036      	beq.n	1a002afc <_printf_i+0x90>
1a002a8e:	d80a      	bhi.n	1a002aa6 <_printf_i+0x3a>
1a002a90:	2900      	cmp	r1, #0
1a002a92:	f000 80b9 	beq.w	1a002c08 <_printf_i+0x19c>
1a002a96:	2958      	cmp	r1, #88	; 0x58
1a002a98:	f000 8083 	beq.w	1a002ba2 <_printf_i+0x136>
1a002a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a002aa0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a002aa4:	e032      	b.n	1a002b0c <_printf_i+0xa0>
1a002aa6:	2964      	cmp	r1, #100	; 0x64
1a002aa8:	d001      	beq.n	1a002aae <_printf_i+0x42>
1a002aaa:	2969      	cmp	r1, #105	; 0x69
1a002aac:	d1f6      	bne.n	1a002a9c <_printf_i+0x30>
1a002aae:	6820      	ldr	r0, [r4, #0]
1a002ab0:	6813      	ldr	r3, [r2, #0]
1a002ab2:	0605      	lsls	r5, r0, #24
1a002ab4:	f103 0104 	add.w	r1, r3, #4
1a002ab8:	d52a      	bpl.n	1a002b10 <_printf_i+0xa4>
1a002aba:	681b      	ldr	r3, [r3, #0]
1a002abc:	6011      	str	r1, [r2, #0]
1a002abe:	2b00      	cmp	r3, #0
1a002ac0:	da03      	bge.n	1a002aca <_printf_i+0x5e>
1a002ac2:	222d      	movs	r2, #45	; 0x2d
1a002ac4:	425b      	negs	r3, r3
1a002ac6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
1a002aca:	486f      	ldr	r0, [pc, #444]	; (1a002c88 <_printf_i+0x21c>)
1a002acc:	220a      	movs	r2, #10
1a002ace:	e039      	b.n	1a002b44 <_printf_i+0xd8>
1a002ad0:	2973      	cmp	r1, #115	; 0x73
1a002ad2:	f000 809d 	beq.w	1a002c10 <_printf_i+0x1a4>
1a002ad6:	d808      	bhi.n	1a002aea <_printf_i+0x7e>
1a002ad8:	296f      	cmp	r1, #111	; 0x6f
1a002ada:	d020      	beq.n	1a002b1e <_printf_i+0xb2>
1a002adc:	2970      	cmp	r1, #112	; 0x70
1a002ade:	d1dd      	bne.n	1a002a9c <_printf_i+0x30>
1a002ae0:	6823      	ldr	r3, [r4, #0]
1a002ae2:	f043 0320 	orr.w	r3, r3, #32
1a002ae6:	6023      	str	r3, [r4, #0]
1a002ae8:	e003      	b.n	1a002af2 <_printf_i+0x86>
1a002aea:	2975      	cmp	r1, #117	; 0x75
1a002aec:	d017      	beq.n	1a002b1e <_printf_i+0xb2>
1a002aee:	2978      	cmp	r1, #120	; 0x78
1a002af0:	d1d4      	bne.n	1a002a9c <_printf_i+0x30>
1a002af2:	2378      	movs	r3, #120	; 0x78
1a002af4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a002af8:	4864      	ldr	r0, [pc, #400]	; (1a002c8c <_printf_i+0x220>)
1a002afa:	e055      	b.n	1a002ba8 <_printf_i+0x13c>
1a002afc:	6813      	ldr	r3, [r2, #0]
1a002afe:	1d19      	adds	r1, r3, #4
1a002b00:	681b      	ldr	r3, [r3, #0]
1a002b02:	6011      	str	r1, [r2, #0]
1a002b04:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a002b08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a002b0c:	2301      	movs	r3, #1
1a002b0e:	e08c      	b.n	1a002c2a <_printf_i+0x1be>
1a002b10:	681b      	ldr	r3, [r3, #0]
1a002b12:	6011      	str	r1, [r2, #0]
1a002b14:	f010 0f40 	tst.w	r0, #64	; 0x40
1a002b18:	bf18      	it	ne
1a002b1a:	b21b      	sxthne	r3, r3
1a002b1c:	e7cf      	b.n	1a002abe <_printf_i+0x52>
1a002b1e:	6813      	ldr	r3, [r2, #0]
1a002b20:	6825      	ldr	r5, [r4, #0]
1a002b22:	1d18      	adds	r0, r3, #4
1a002b24:	6010      	str	r0, [r2, #0]
1a002b26:	0628      	lsls	r0, r5, #24
1a002b28:	d501      	bpl.n	1a002b2e <_printf_i+0xc2>
1a002b2a:	681b      	ldr	r3, [r3, #0]
1a002b2c:	e002      	b.n	1a002b34 <_printf_i+0xc8>
1a002b2e:	0668      	lsls	r0, r5, #25
1a002b30:	d5fb      	bpl.n	1a002b2a <_printf_i+0xbe>
1a002b32:	881b      	ldrh	r3, [r3, #0]
1a002b34:	4854      	ldr	r0, [pc, #336]	; (1a002c88 <_printf_i+0x21c>)
1a002b36:	296f      	cmp	r1, #111	; 0x6f
1a002b38:	bf14      	ite	ne
1a002b3a:	220a      	movne	r2, #10
1a002b3c:	2208      	moveq	r2, #8
1a002b3e:	2100      	movs	r1, #0
1a002b40:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a002b44:	6865      	ldr	r5, [r4, #4]
1a002b46:	60a5      	str	r5, [r4, #8]
1a002b48:	2d00      	cmp	r5, #0
1a002b4a:	f2c0 8095 	blt.w	1a002c78 <_printf_i+0x20c>
1a002b4e:	6821      	ldr	r1, [r4, #0]
1a002b50:	f021 0104 	bic.w	r1, r1, #4
1a002b54:	6021      	str	r1, [r4, #0]
1a002b56:	2b00      	cmp	r3, #0
1a002b58:	d13d      	bne.n	1a002bd6 <_printf_i+0x16a>
1a002b5a:	2d00      	cmp	r5, #0
1a002b5c:	f040 808e 	bne.w	1a002c7c <_printf_i+0x210>
1a002b60:	4665      	mov	r5, ip
1a002b62:	2a08      	cmp	r2, #8
1a002b64:	d10b      	bne.n	1a002b7e <_printf_i+0x112>
1a002b66:	6823      	ldr	r3, [r4, #0]
1a002b68:	07db      	lsls	r3, r3, #31
1a002b6a:	d508      	bpl.n	1a002b7e <_printf_i+0x112>
1a002b6c:	6923      	ldr	r3, [r4, #16]
1a002b6e:	6862      	ldr	r2, [r4, #4]
1a002b70:	429a      	cmp	r2, r3
1a002b72:	bfde      	ittt	le
1a002b74:	2330      	movle	r3, #48	; 0x30
1a002b76:	f805 3c01 	strble.w	r3, [r5, #-1]
1a002b7a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a002b7e:	ebac 0305 	sub.w	r3, ip, r5
1a002b82:	6123      	str	r3, [r4, #16]
1a002b84:	f8cd 8000 	str.w	r8, [sp]
1a002b88:	463b      	mov	r3, r7
1a002b8a:	aa03      	add	r2, sp, #12
1a002b8c:	4621      	mov	r1, r4
1a002b8e:	4630      	mov	r0, r6
1a002b90:	f7ff fef6 	bl	1a002980 <_printf_common>
1a002b94:	3001      	adds	r0, #1
1a002b96:	d14d      	bne.n	1a002c34 <_printf_i+0x1c8>
1a002b98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002b9c:	b005      	add	sp, #20
1a002b9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a002ba2:	4839      	ldr	r0, [pc, #228]	; (1a002c88 <_printf_i+0x21c>)
1a002ba4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a002ba8:	6813      	ldr	r3, [r2, #0]
1a002baa:	6821      	ldr	r1, [r4, #0]
1a002bac:	1d1d      	adds	r5, r3, #4
1a002bae:	681b      	ldr	r3, [r3, #0]
1a002bb0:	6015      	str	r5, [r2, #0]
1a002bb2:	060a      	lsls	r2, r1, #24
1a002bb4:	d50b      	bpl.n	1a002bce <_printf_i+0x162>
1a002bb6:	07ca      	lsls	r2, r1, #31
1a002bb8:	bf44      	itt	mi
1a002bba:	f041 0120 	orrmi.w	r1, r1, #32
1a002bbe:	6021      	strmi	r1, [r4, #0]
1a002bc0:	b91b      	cbnz	r3, 1a002bca <_printf_i+0x15e>
1a002bc2:	6822      	ldr	r2, [r4, #0]
1a002bc4:	f022 0220 	bic.w	r2, r2, #32
1a002bc8:	6022      	str	r2, [r4, #0]
1a002bca:	2210      	movs	r2, #16
1a002bcc:	e7b7      	b.n	1a002b3e <_printf_i+0xd2>
1a002bce:	064d      	lsls	r5, r1, #25
1a002bd0:	bf48      	it	mi
1a002bd2:	b29b      	uxthmi	r3, r3
1a002bd4:	e7ef      	b.n	1a002bb6 <_printf_i+0x14a>
1a002bd6:	4665      	mov	r5, ip
1a002bd8:	fbb3 f1f2 	udiv	r1, r3, r2
1a002bdc:	fb02 3311 	mls	r3, r2, r1, r3
1a002be0:	5cc3      	ldrb	r3, [r0, r3]
1a002be2:	f805 3d01 	strb.w	r3, [r5, #-1]!
1a002be6:	460b      	mov	r3, r1
1a002be8:	2900      	cmp	r1, #0
1a002bea:	d1f5      	bne.n	1a002bd8 <_printf_i+0x16c>
1a002bec:	e7b9      	b.n	1a002b62 <_printf_i+0xf6>
1a002bee:	6813      	ldr	r3, [r2, #0]
1a002bf0:	6825      	ldr	r5, [r4, #0]
1a002bf2:	6961      	ldr	r1, [r4, #20]
1a002bf4:	1d18      	adds	r0, r3, #4
1a002bf6:	6010      	str	r0, [r2, #0]
1a002bf8:	0628      	lsls	r0, r5, #24
1a002bfa:	681b      	ldr	r3, [r3, #0]
1a002bfc:	d501      	bpl.n	1a002c02 <_printf_i+0x196>
1a002bfe:	6019      	str	r1, [r3, #0]
1a002c00:	e002      	b.n	1a002c08 <_printf_i+0x19c>
1a002c02:	066a      	lsls	r2, r5, #25
1a002c04:	d5fb      	bpl.n	1a002bfe <_printf_i+0x192>
1a002c06:	8019      	strh	r1, [r3, #0]
1a002c08:	2300      	movs	r3, #0
1a002c0a:	6123      	str	r3, [r4, #16]
1a002c0c:	4665      	mov	r5, ip
1a002c0e:	e7b9      	b.n	1a002b84 <_printf_i+0x118>
1a002c10:	6813      	ldr	r3, [r2, #0]
1a002c12:	1d19      	adds	r1, r3, #4
1a002c14:	6011      	str	r1, [r2, #0]
1a002c16:	681d      	ldr	r5, [r3, #0]
1a002c18:	6862      	ldr	r2, [r4, #4]
1a002c1a:	2100      	movs	r1, #0
1a002c1c:	4628      	mov	r0, r5
1a002c1e:	f000 fd5f 	bl	1a0036e0 <memchr>
1a002c22:	b108      	cbz	r0, 1a002c28 <_printf_i+0x1bc>
1a002c24:	1b40      	subs	r0, r0, r5
1a002c26:	6060      	str	r0, [r4, #4]
1a002c28:	6863      	ldr	r3, [r4, #4]
1a002c2a:	6123      	str	r3, [r4, #16]
1a002c2c:	2300      	movs	r3, #0
1a002c2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a002c32:	e7a7      	b.n	1a002b84 <_printf_i+0x118>
1a002c34:	6923      	ldr	r3, [r4, #16]
1a002c36:	462a      	mov	r2, r5
1a002c38:	4639      	mov	r1, r7
1a002c3a:	4630      	mov	r0, r6
1a002c3c:	47c0      	blx	r8
1a002c3e:	3001      	adds	r0, #1
1a002c40:	d0aa      	beq.n	1a002b98 <_printf_i+0x12c>
1a002c42:	6823      	ldr	r3, [r4, #0]
1a002c44:	079b      	lsls	r3, r3, #30
1a002c46:	d413      	bmi.n	1a002c70 <_printf_i+0x204>
1a002c48:	68e0      	ldr	r0, [r4, #12]
1a002c4a:	9b03      	ldr	r3, [sp, #12]
1a002c4c:	4298      	cmp	r0, r3
1a002c4e:	bfb8      	it	lt
1a002c50:	4618      	movlt	r0, r3
1a002c52:	e7a3      	b.n	1a002b9c <_printf_i+0x130>
1a002c54:	2301      	movs	r3, #1
1a002c56:	464a      	mov	r2, r9
1a002c58:	4639      	mov	r1, r7
1a002c5a:	4630      	mov	r0, r6
1a002c5c:	47c0      	blx	r8
1a002c5e:	3001      	adds	r0, #1
1a002c60:	d09a      	beq.n	1a002b98 <_printf_i+0x12c>
1a002c62:	3501      	adds	r5, #1
1a002c64:	68e3      	ldr	r3, [r4, #12]
1a002c66:	9a03      	ldr	r2, [sp, #12]
1a002c68:	1a9b      	subs	r3, r3, r2
1a002c6a:	42ab      	cmp	r3, r5
1a002c6c:	dcf2      	bgt.n	1a002c54 <_printf_i+0x1e8>
1a002c6e:	e7eb      	b.n	1a002c48 <_printf_i+0x1dc>
1a002c70:	2500      	movs	r5, #0
1a002c72:	f104 0919 	add.w	r9, r4, #25
1a002c76:	e7f5      	b.n	1a002c64 <_printf_i+0x1f8>
1a002c78:	2b00      	cmp	r3, #0
1a002c7a:	d1ac      	bne.n	1a002bd6 <_printf_i+0x16a>
1a002c7c:	7803      	ldrb	r3, [r0, #0]
1a002c7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a002c82:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a002c86:	e76c      	b.n	1a002b62 <_printf_i+0xf6>
1a002c88:	1a003beb 	.word	0x1a003beb
1a002c8c:	1a003bfc 	.word	0x1a003bfc

1a002c90 <__svfiscanf_r>:
1a002c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002c94:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
1a002c98:	460c      	mov	r4, r1
1a002c9a:	2100      	movs	r1, #0
1a002c9c:	9144      	str	r1, [sp, #272]	; 0x110
1a002c9e:	9145      	str	r1, [sp, #276]	; 0x114
1a002ca0:	499f      	ldr	r1, [pc, #636]	; (1a002f20 <__svfiscanf_r+0x290>)
1a002ca2:	91a0      	str	r1, [sp, #640]	; 0x280
1a002ca4:	f10d 0804 	add.w	r8, sp, #4
1a002ca8:	499e      	ldr	r1, [pc, #632]	; (1a002f24 <__svfiscanf_r+0x294>)
1a002caa:	f8df 927c 	ldr.w	r9, [pc, #636]	; 1a002f28 <__svfiscanf_r+0x298>
1a002cae:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
1a002cb2:	4606      	mov	r6, r0
1a002cb4:	4692      	mov	sl, r2
1a002cb6:	91a1      	str	r1, [sp, #644]	; 0x284
1a002cb8:	9300      	str	r3, [sp, #0]
1a002cba:	270a      	movs	r7, #10
1a002cbc:	f89a 3000 	ldrb.w	r3, [sl]
1a002cc0:	2b00      	cmp	r3, #0
1a002cc2:	f000 812a 	beq.w	1a002f1a <__svfiscanf_r+0x28a>
1a002cc6:	4655      	mov	r5, sl
1a002cc8:	f7ff fbee 	bl	1a0024a8 <__locale_ctype_ptr>
1a002ccc:	f815 bb01 	ldrb.w	fp, [r5], #1
1a002cd0:	4458      	add	r0, fp
1a002cd2:	7843      	ldrb	r3, [r0, #1]
1a002cd4:	f013 0308 	ands.w	r3, r3, #8
1a002cd8:	d01c      	beq.n	1a002d14 <__svfiscanf_r+0x84>
1a002cda:	6863      	ldr	r3, [r4, #4]
1a002cdc:	2b00      	cmp	r3, #0
1a002cde:	dd12      	ble.n	1a002d06 <__svfiscanf_r+0x76>
1a002ce0:	f7ff fbe2 	bl	1a0024a8 <__locale_ctype_ptr>
1a002ce4:	6823      	ldr	r3, [r4, #0]
1a002ce6:	781a      	ldrb	r2, [r3, #0]
1a002ce8:	4410      	add	r0, r2
1a002cea:	7842      	ldrb	r2, [r0, #1]
1a002cec:	0712      	lsls	r2, r2, #28
1a002cee:	d401      	bmi.n	1a002cf4 <__svfiscanf_r+0x64>
1a002cf0:	46aa      	mov	sl, r5
1a002cf2:	e7e3      	b.n	1a002cbc <__svfiscanf_r+0x2c>
1a002cf4:	9a45      	ldr	r2, [sp, #276]	; 0x114
1a002cf6:	3201      	adds	r2, #1
1a002cf8:	9245      	str	r2, [sp, #276]	; 0x114
1a002cfa:	6862      	ldr	r2, [r4, #4]
1a002cfc:	3301      	adds	r3, #1
1a002cfe:	3a01      	subs	r2, #1
1a002d00:	6062      	str	r2, [r4, #4]
1a002d02:	6023      	str	r3, [r4, #0]
1a002d04:	e7e9      	b.n	1a002cda <__svfiscanf_r+0x4a>
1a002d06:	9ba1      	ldr	r3, [sp, #644]	; 0x284
1a002d08:	4621      	mov	r1, r4
1a002d0a:	4630      	mov	r0, r6
1a002d0c:	4798      	blx	r3
1a002d0e:	2800      	cmp	r0, #0
1a002d10:	d0e6      	beq.n	1a002ce0 <__svfiscanf_r+0x50>
1a002d12:	e7ed      	b.n	1a002cf0 <__svfiscanf_r+0x60>
1a002d14:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
1a002d18:	f040 8082 	bne.w	1a002e20 <__svfiscanf_r+0x190>
1a002d1c:	9343      	str	r3, [sp, #268]	; 0x10c
1a002d1e:	9341      	str	r3, [sp, #260]	; 0x104
1a002d20:	f89a 3001 	ldrb.w	r3, [sl, #1]
1a002d24:	2b2a      	cmp	r3, #42	; 0x2a
1a002d26:	d103      	bne.n	1a002d30 <__svfiscanf_r+0xa0>
1a002d28:	2310      	movs	r3, #16
1a002d2a:	9341      	str	r3, [sp, #260]	; 0x104
1a002d2c:	f10a 0502 	add.w	r5, sl, #2
1a002d30:	46aa      	mov	sl, r5
1a002d32:	f815 1b01 	ldrb.w	r1, [r5], #1
1a002d36:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
1a002d3a:	2a09      	cmp	r2, #9
1a002d3c:	d922      	bls.n	1a002d84 <__svfiscanf_r+0xf4>
1a002d3e:	2203      	movs	r2, #3
1a002d40:	4879      	ldr	r0, [pc, #484]	; (1a002f28 <__svfiscanf_r+0x298>)
1a002d42:	f000 fccd 	bl	1a0036e0 <memchr>
1a002d46:	b138      	cbz	r0, 1a002d58 <__svfiscanf_r+0xc8>
1a002d48:	eba0 0309 	sub.w	r3, r0, r9
1a002d4c:	2001      	movs	r0, #1
1a002d4e:	4098      	lsls	r0, r3
1a002d50:	9b41      	ldr	r3, [sp, #260]	; 0x104
1a002d52:	4318      	orrs	r0, r3
1a002d54:	9041      	str	r0, [sp, #260]	; 0x104
1a002d56:	46aa      	mov	sl, r5
1a002d58:	f89a 3000 	ldrb.w	r3, [sl]
1a002d5c:	2b67      	cmp	r3, #103	; 0x67
1a002d5e:	f10a 0501 	add.w	r5, sl, #1
1a002d62:	d82b      	bhi.n	1a002dbc <__svfiscanf_r+0x12c>
1a002d64:	2b65      	cmp	r3, #101	; 0x65
1a002d66:	f080 809f 	bcs.w	1a002ea8 <__svfiscanf_r+0x218>
1a002d6a:	2b47      	cmp	r3, #71	; 0x47
1a002d6c:	d810      	bhi.n	1a002d90 <__svfiscanf_r+0x100>
1a002d6e:	2b45      	cmp	r3, #69	; 0x45
1a002d70:	f080 809a 	bcs.w	1a002ea8 <__svfiscanf_r+0x218>
1a002d74:	2b00      	cmp	r3, #0
1a002d76:	d06c      	beq.n	1a002e52 <__svfiscanf_r+0x1c2>
1a002d78:	2b25      	cmp	r3, #37	; 0x25
1a002d7a:	d051      	beq.n	1a002e20 <__svfiscanf_r+0x190>
1a002d7c:	2303      	movs	r3, #3
1a002d7e:	9347      	str	r3, [sp, #284]	; 0x11c
1a002d80:	9742      	str	r7, [sp, #264]	; 0x108
1a002d82:	e027      	b.n	1a002dd4 <__svfiscanf_r+0x144>
1a002d84:	9b43      	ldr	r3, [sp, #268]	; 0x10c
1a002d86:	fb07 1303 	mla	r3, r7, r3, r1
1a002d8a:	3b30      	subs	r3, #48	; 0x30
1a002d8c:	9343      	str	r3, [sp, #268]	; 0x10c
1a002d8e:	e7cf      	b.n	1a002d30 <__svfiscanf_r+0xa0>
1a002d90:	2b5b      	cmp	r3, #91	; 0x5b
1a002d92:	d06a      	beq.n	1a002e6a <__svfiscanf_r+0x1da>
1a002d94:	d80c      	bhi.n	1a002db0 <__svfiscanf_r+0x120>
1a002d96:	2b58      	cmp	r3, #88	; 0x58
1a002d98:	d1f0      	bne.n	1a002d7c <__svfiscanf_r+0xec>
1a002d9a:	9a41      	ldr	r2, [sp, #260]	; 0x104
1a002d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
1a002da0:	9241      	str	r2, [sp, #260]	; 0x104
1a002da2:	2210      	movs	r2, #16
1a002da4:	9242      	str	r2, [sp, #264]	; 0x108
1a002da6:	2b6e      	cmp	r3, #110	; 0x6e
1a002da8:	bf8c      	ite	hi
1a002daa:	2304      	movhi	r3, #4
1a002dac:	2303      	movls	r3, #3
1a002dae:	e010      	b.n	1a002dd2 <__svfiscanf_r+0x142>
1a002db0:	2b63      	cmp	r3, #99	; 0x63
1a002db2:	d065      	beq.n	1a002e80 <__svfiscanf_r+0x1f0>
1a002db4:	2b64      	cmp	r3, #100	; 0x64
1a002db6:	d1e1      	bne.n	1a002d7c <__svfiscanf_r+0xec>
1a002db8:	9742      	str	r7, [sp, #264]	; 0x108
1a002dba:	e7f4      	b.n	1a002da6 <__svfiscanf_r+0x116>
1a002dbc:	2b70      	cmp	r3, #112	; 0x70
1a002dbe:	d04b      	beq.n	1a002e58 <__svfiscanf_r+0x1c8>
1a002dc0:	d826      	bhi.n	1a002e10 <__svfiscanf_r+0x180>
1a002dc2:	2b6e      	cmp	r3, #110	; 0x6e
1a002dc4:	d062      	beq.n	1a002e8c <__svfiscanf_r+0x1fc>
1a002dc6:	d84c      	bhi.n	1a002e62 <__svfiscanf_r+0x1d2>
1a002dc8:	2b69      	cmp	r3, #105	; 0x69
1a002dca:	d1d7      	bne.n	1a002d7c <__svfiscanf_r+0xec>
1a002dcc:	2300      	movs	r3, #0
1a002dce:	9342      	str	r3, [sp, #264]	; 0x108
1a002dd0:	2303      	movs	r3, #3
1a002dd2:	9347      	str	r3, [sp, #284]	; 0x11c
1a002dd4:	6863      	ldr	r3, [r4, #4]
1a002dd6:	2b00      	cmp	r3, #0
1a002dd8:	dd68      	ble.n	1a002eac <__svfiscanf_r+0x21c>
1a002dda:	9b41      	ldr	r3, [sp, #260]	; 0x104
1a002ddc:	0659      	lsls	r1, r3, #25
1a002dde:	d407      	bmi.n	1a002df0 <__svfiscanf_r+0x160>
1a002de0:	f7ff fb62 	bl	1a0024a8 <__locale_ctype_ptr>
1a002de4:	6823      	ldr	r3, [r4, #0]
1a002de6:	781a      	ldrb	r2, [r3, #0]
1a002de8:	4410      	add	r0, r2
1a002dea:	7842      	ldrb	r2, [r0, #1]
1a002dec:	0712      	lsls	r2, r2, #28
1a002dee:	d464      	bmi.n	1a002eba <__svfiscanf_r+0x22a>
1a002df0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
1a002df2:	2b02      	cmp	r3, #2
1a002df4:	dc73      	bgt.n	1a002ede <__svfiscanf_r+0x24e>
1a002df6:	466b      	mov	r3, sp
1a002df8:	4622      	mov	r2, r4
1a002dfa:	a941      	add	r1, sp, #260	; 0x104
1a002dfc:	4630      	mov	r0, r6
1a002dfe:	f000 f8bf 	bl	1a002f80 <_scanf_chars>
1a002e02:	2801      	cmp	r0, #1
1a002e04:	f000 8089 	beq.w	1a002f1a <__svfiscanf_r+0x28a>
1a002e08:	2802      	cmp	r0, #2
1a002e0a:	f47f af71 	bne.w	1a002cf0 <__svfiscanf_r+0x60>
1a002e0e:	e01d      	b.n	1a002e4c <__svfiscanf_r+0x1bc>
1a002e10:	2b75      	cmp	r3, #117	; 0x75
1a002e12:	d0d1      	beq.n	1a002db8 <__svfiscanf_r+0x128>
1a002e14:	2b78      	cmp	r3, #120	; 0x78
1a002e16:	d0c0      	beq.n	1a002d9a <__svfiscanf_r+0x10a>
1a002e18:	2b73      	cmp	r3, #115	; 0x73
1a002e1a:	d1af      	bne.n	1a002d7c <__svfiscanf_r+0xec>
1a002e1c:	2302      	movs	r3, #2
1a002e1e:	e7d8      	b.n	1a002dd2 <__svfiscanf_r+0x142>
1a002e20:	6863      	ldr	r3, [r4, #4]
1a002e22:	2b00      	cmp	r3, #0
1a002e24:	dd0c      	ble.n	1a002e40 <__svfiscanf_r+0x1b0>
1a002e26:	6823      	ldr	r3, [r4, #0]
1a002e28:	781a      	ldrb	r2, [r3, #0]
1a002e2a:	455a      	cmp	r2, fp
1a002e2c:	d175      	bne.n	1a002f1a <__svfiscanf_r+0x28a>
1a002e2e:	3301      	adds	r3, #1
1a002e30:	6862      	ldr	r2, [r4, #4]
1a002e32:	6023      	str	r3, [r4, #0]
1a002e34:	9b45      	ldr	r3, [sp, #276]	; 0x114
1a002e36:	3a01      	subs	r2, #1
1a002e38:	3301      	adds	r3, #1
1a002e3a:	6062      	str	r2, [r4, #4]
1a002e3c:	9345      	str	r3, [sp, #276]	; 0x114
1a002e3e:	e757      	b.n	1a002cf0 <__svfiscanf_r+0x60>
1a002e40:	9ba1      	ldr	r3, [sp, #644]	; 0x284
1a002e42:	4621      	mov	r1, r4
1a002e44:	4630      	mov	r0, r6
1a002e46:	4798      	blx	r3
1a002e48:	2800      	cmp	r0, #0
1a002e4a:	d0ec      	beq.n	1a002e26 <__svfiscanf_r+0x196>
1a002e4c:	9844      	ldr	r0, [sp, #272]	; 0x110
1a002e4e:	2800      	cmp	r0, #0
1a002e50:	d159      	bne.n	1a002f06 <__svfiscanf_r+0x276>
1a002e52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002e56:	e05c      	b.n	1a002f12 <__svfiscanf_r+0x282>
1a002e58:	9a41      	ldr	r2, [sp, #260]	; 0x104
1a002e5a:	f042 0220 	orr.w	r2, r2, #32
1a002e5e:	9241      	str	r2, [sp, #260]	; 0x104
1a002e60:	e79b      	b.n	1a002d9a <__svfiscanf_r+0x10a>
1a002e62:	2308      	movs	r3, #8
1a002e64:	9342      	str	r3, [sp, #264]	; 0x108
1a002e66:	2304      	movs	r3, #4
1a002e68:	e7b3      	b.n	1a002dd2 <__svfiscanf_r+0x142>
1a002e6a:	4629      	mov	r1, r5
1a002e6c:	4640      	mov	r0, r8
1a002e6e:	f000 fa75 	bl	1a00335c <__sccl>
1a002e72:	9b41      	ldr	r3, [sp, #260]	; 0x104
1a002e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002e78:	9341      	str	r3, [sp, #260]	; 0x104
1a002e7a:	4605      	mov	r5, r0
1a002e7c:	2301      	movs	r3, #1
1a002e7e:	e7a8      	b.n	1a002dd2 <__svfiscanf_r+0x142>
1a002e80:	9b41      	ldr	r3, [sp, #260]	; 0x104
1a002e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002e86:	9341      	str	r3, [sp, #260]	; 0x104
1a002e88:	2300      	movs	r3, #0
1a002e8a:	e7a2      	b.n	1a002dd2 <__svfiscanf_r+0x142>
1a002e8c:	9841      	ldr	r0, [sp, #260]	; 0x104
1a002e8e:	06c3      	lsls	r3, r0, #27
1a002e90:	f53f af2e 	bmi.w	1a002cf0 <__svfiscanf_r+0x60>
1a002e94:	9b00      	ldr	r3, [sp, #0]
1a002e96:	9a45      	ldr	r2, [sp, #276]	; 0x114
1a002e98:	1d19      	adds	r1, r3, #4
1a002e9a:	9100      	str	r1, [sp, #0]
1a002e9c:	681b      	ldr	r3, [r3, #0]
1a002e9e:	07c0      	lsls	r0, r0, #31
1a002ea0:	bf4c      	ite	mi
1a002ea2:	801a      	strhmi	r2, [r3, #0]
1a002ea4:	601a      	strpl	r2, [r3, #0]
1a002ea6:	e723      	b.n	1a002cf0 <__svfiscanf_r+0x60>
1a002ea8:	2305      	movs	r3, #5
1a002eaa:	e792      	b.n	1a002dd2 <__svfiscanf_r+0x142>
1a002eac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
1a002eae:	4621      	mov	r1, r4
1a002eb0:	4630      	mov	r0, r6
1a002eb2:	4798      	blx	r3
1a002eb4:	2800      	cmp	r0, #0
1a002eb6:	d090      	beq.n	1a002dda <__svfiscanf_r+0x14a>
1a002eb8:	e7c8      	b.n	1a002e4c <__svfiscanf_r+0x1bc>
1a002eba:	9a45      	ldr	r2, [sp, #276]	; 0x114
1a002ebc:	3201      	adds	r2, #1
1a002ebe:	9245      	str	r2, [sp, #276]	; 0x114
1a002ec0:	6862      	ldr	r2, [r4, #4]
1a002ec2:	3a01      	subs	r2, #1
1a002ec4:	2a00      	cmp	r2, #0
1a002ec6:	6062      	str	r2, [r4, #4]
1a002ec8:	dd02      	ble.n	1a002ed0 <__svfiscanf_r+0x240>
1a002eca:	3301      	adds	r3, #1
1a002ecc:	6023      	str	r3, [r4, #0]
1a002ece:	e787      	b.n	1a002de0 <__svfiscanf_r+0x150>
1a002ed0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
1a002ed2:	4621      	mov	r1, r4
1a002ed4:	4630      	mov	r0, r6
1a002ed6:	4798      	blx	r3
1a002ed8:	2800      	cmp	r0, #0
1a002eda:	d081      	beq.n	1a002de0 <__svfiscanf_r+0x150>
1a002edc:	e7b6      	b.n	1a002e4c <__svfiscanf_r+0x1bc>
1a002ede:	2b04      	cmp	r3, #4
1a002ee0:	dc06      	bgt.n	1a002ef0 <__svfiscanf_r+0x260>
1a002ee2:	466b      	mov	r3, sp
1a002ee4:	4622      	mov	r2, r4
1a002ee6:	a941      	add	r1, sp, #260	; 0x104
1a002ee8:	4630      	mov	r0, r6
1a002eea:	f000 f8ad 	bl	1a003048 <_scanf_i>
1a002eee:	e788      	b.n	1a002e02 <__svfiscanf_r+0x172>
1a002ef0:	4b0e      	ldr	r3, [pc, #56]	; (1a002f2c <__svfiscanf_r+0x29c>)
1a002ef2:	2b00      	cmp	r3, #0
1a002ef4:	f43f aefc 	beq.w	1a002cf0 <__svfiscanf_r+0x60>
1a002ef8:	466b      	mov	r3, sp
1a002efa:	4622      	mov	r2, r4
1a002efc:	a941      	add	r1, sp, #260	; 0x104
1a002efe:	4630      	mov	r0, r6
1a002f00:	f3af 8000 	nop.w
1a002f04:	e77d      	b.n	1a002e02 <__svfiscanf_r+0x172>
1a002f06:	89a3      	ldrh	r3, [r4, #12]
1a002f08:	f013 0f40 	tst.w	r3, #64	; 0x40
1a002f0c:	bf18      	it	ne
1a002f0e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a002f12:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
1a002f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002f1a:	9844      	ldr	r0, [sp, #272]	; 0x110
1a002f1c:	e7f9      	b.n	1a002f12 <__svfiscanf_r+0x282>
1a002f1e:	bf00      	nop
1a002f20:	1a0035d5 	.word	0x1a0035d5
1a002f24:	1a003245 	.word	0x1a003245
1a002f28:	1a003be0 	.word	0x1a003be0
1a002f2c:	00000000 	.word	0x00000000

1a002f30 <_vfiscanf_r>:
1a002f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002f34:	460c      	mov	r4, r1
1a002f36:	4616      	mov	r6, r2
1a002f38:	461f      	mov	r7, r3
1a002f3a:	4605      	mov	r5, r0
1a002f3c:	b118      	cbz	r0, 1a002f46 <_vfiscanf_r+0x16>
1a002f3e:	6983      	ldr	r3, [r0, #24]
1a002f40:	b90b      	cbnz	r3, 1a002f46 <_vfiscanf_r+0x16>
1a002f42:	f7ff fa07 	bl	1a002354 <__sinit>
1a002f46:	4b0b      	ldr	r3, [pc, #44]	; (1a002f74 <_vfiscanf_r+0x44>)
1a002f48:	429c      	cmp	r4, r3
1a002f4a:	d108      	bne.n	1a002f5e <_vfiscanf_r+0x2e>
1a002f4c:	686c      	ldr	r4, [r5, #4]
1a002f4e:	463b      	mov	r3, r7
1a002f50:	4632      	mov	r2, r6
1a002f52:	4621      	mov	r1, r4
1a002f54:	4628      	mov	r0, r5
1a002f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a002f5a:	f7ff be99 	b.w	1a002c90 <__svfiscanf_r>
1a002f5e:	4b06      	ldr	r3, [pc, #24]	; (1a002f78 <_vfiscanf_r+0x48>)
1a002f60:	429c      	cmp	r4, r3
1a002f62:	d101      	bne.n	1a002f68 <_vfiscanf_r+0x38>
1a002f64:	68ac      	ldr	r4, [r5, #8]
1a002f66:	e7f2      	b.n	1a002f4e <_vfiscanf_r+0x1e>
1a002f68:	4b04      	ldr	r3, [pc, #16]	; (1a002f7c <_vfiscanf_r+0x4c>)
1a002f6a:	429c      	cmp	r4, r3
1a002f6c:	bf08      	it	eq
1a002f6e:	68ec      	ldreq	r4, [r5, #12]
1a002f70:	e7ed      	b.n	1a002f4e <_vfiscanf_r+0x1e>
1a002f72:	bf00      	nop
1a002f74:	1a003b8c 	.word	0x1a003b8c
1a002f78:	1a003bac 	.word	0x1a003bac
1a002f7c:	1a003b6c 	.word	0x1a003b6c

1a002f80 <_scanf_chars>:
1a002f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002f84:	4615      	mov	r5, r2
1a002f86:	688a      	ldr	r2, [r1, #8]
1a002f88:	4680      	mov	r8, r0
1a002f8a:	460c      	mov	r4, r1
1a002f8c:	b932      	cbnz	r2, 1a002f9c <_scanf_chars+0x1c>
1a002f8e:	698a      	ldr	r2, [r1, #24]
1a002f90:	2a00      	cmp	r2, #0
1a002f92:	bf14      	ite	ne
1a002f94:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
1a002f98:	2201      	moveq	r2, #1
1a002f9a:	608a      	str	r2, [r1, #8]
1a002f9c:	6822      	ldr	r2, [r4, #0]
1a002f9e:	06d1      	lsls	r1, r2, #27
1a002fa0:	bf5f      	itttt	pl
1a002fa2:	681a      	ldrpl	r2, [r3, #0]
1a002fa4:	1d11      	addpl	r1, r2, #4
1a002fa6:	6019      	strpl	r1, [r3, #0]
1a002fa8:	6817      	ldrpl	r7, [r2, #0]
1a002faa:	2600      	movs	r6, #0
1a002fac:	69a3      	ldr	r3, [r4, #24]
1a002fae:	b1db      	cbz	r3, 1a002fe8 <_scanf_chars+0x68>
1a002fb0:	2b01      	cmp	r3, #1
1a002fb2:	d107      	bne.n	1a002fc4 <_scanf_chars+0x44>
1a002fb4:	682b      	ldr	r3, [r5, #0]
1a002fb6:	6962      	ldr	r2, [r4, #20]
1a002fb8:	781b      	ldrb	r3, [r3, #0]
1a002fba:	5cd3      	ldrb	r3, [r2, r3]
1a002fbc:	b9a3      	cbnz	r3, 1a002fe8 <_scanf_chars+0x68>
1a002fbe:	2e00      	cmp	r6, #0
1a002fc0:	d132      	bne.n	1a003028 <_scanf_chars+0xa8>
1a002fc2:	e006      	b.n	1a002fd2 <_scanf_chars+0x52>
1a002fc4:	2b02      	cmp	r3, #2
1a002fc6:	d007      	beq.n	1a002fd8 <_scanf_chars+0x58>
1a002fc8:	2e00      	cmp	r6, #0
1a002fca:	d12d      	bne.n	1a003028 <_scanf_chars+0xa8>
1a002fcc:	69a3      	ldr	r3, [r4, #24]
1a002fce:	2b01      	cmp	r3, #1
1a002fd0:	d12a      	bne.n	1a003028 <_scanf_chars+0xa8>
1a002fd2:	2001      	movs	r0, #1
1a002fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002fd8:	f7ff fa66 	bl	1a0024a8 <__locale_ctype_ptr>
1a002fdc:	682b      	ldr	r3, [r5, #0]
1a002fde:	781b      	ldrb	r3, [r3, #0]
1a002fe0:	4418      	add	r0, r3
1a002fe2:	7843      	ldrb	r3, [r0, #1]
1a002fe4:	071b      	lsls	r3, r3, #28
1a002fe6:	d4ef      	bmi.n	1a002fc8 <_scanf_chars+0x48>
1a002fe8:	6823      	ldr	r3, [r4, #0]
1a002fea:	06da      	lsls	r2, r3, #27
1a002fec:	bf5e      	ittt	pl
1a002fee:	682b      	ldrpl	r3, [r5, #0]
1a002ff0:	781b      	ldrbpl	r3, [r3, #0]
1a002ff2:	703b      	strbpl	r3, [r7, #0]
1a002ff4:	682a      	ldr	r2, [r5, #0]
1a002ff6:	686b      	ldr	r3, [r5, #4]
1a002ff8:	f102 0201 	add.w	r2, r2, #1
1a002ffc:	602a      	str	r2, [r5, #0]
1a002ffe:	68a2      	ldr	r2, [r4, #8]
1a003000:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
1a003004:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
1a003008:	606b      	str	r3, [r5, #4]
1a00300a:	f106 0601 	add.w	r6, r6, #1
1a00300e:	bf58      	it	pl
1a003010:	3701      	addpl	r7, #1
1a003012:	60a2      	str	r2, [r4, #8]
1a003014:	b142      	cbz	r2, 1a003028 <_scanf_chars+0xa8>
1a003016:	2b00      	cmp	r3, #0
1a003018:	dcc8      	bgt.n	1a002fac <_scanf_chars+0x2c>
1a00301a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
1a00301e:	4629      	mov	r1, r5
1a003020:	4640      	mov	r0, r8
1a003022:	4798      	blx	r3
1a003024:	2800      	cmp	r0, #0
1a003026:	d0c1      	beq.n	1a002fac <_scanf_chars+0x2c>
1a003028:	6823      	ldr	r3, [r4, #0]
1a00302a:	f013 0310 	ands.w	r3, r3, #16
1a00302e:	d105      	bne.n	1a00303c <_scanf_chars+0xbc>
1a003030:	68e2      	ldr	r2, [r4, #12]
1a003032:	3201      	adds	r2, #1
1a003034:	60e2      	str	r2, [r4, #12]
1a003036:	69a2      	ldr	r2, [r4, #24]
1a003038:	b102      	cbz	r2, 1a00303c <_scanf_chars+0xbc>
1a00303a:	703b      	strb	r3, [r7, #0]
1a00303c:	6923      	ldr	r3, [r4, #16]
1a00303e:	441e      	add	r6, r3
1a003040:	6126      	str	r6, [r4, #16]
1a003042:	2000      	movs	r0, #0
1a003044:	e7c6      	b.n	1a002fd4 <_scanf_chars+0x54>
1a003046:	Address 0x000000001a003046 is out of bounds.


1a003048 <_scanf_i>:
1a003048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00304c:	469a      	mov	sl, r3
1a00304e:	4b74      	ldr	r3, [pc, #464]	; (1a003220 <_scanf_i+0x1d8>)
1a003050:	460c      	mov	r4, r1
1a003052:	4683      	mov	fp, r0
1a003054:	4616      	mov	r6, r2
1a003056:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
1a00305a:	b087      	sub	sp, #28
1a00305c:	ab03      	add	r3, sp, #12
1a00305e:	68a7      	ldr	r7, [r4, #8]
1a003060:	e883 0007 	stmia.w	r3, {r0, r1, r2}
1a003064:	4b6f      	ldr	r3, [pc, #444]	; (1a003224 <_scanf_i+0x1dc>)
1a003066:	69a1      	ldr	r1, [r4, #24]
1a003068:	4a6f      	ldr	r2, [pc, #444]	; (1a003228 <_scanf_i+0x1e0>)
1a00306a:	2903      	cmp	r1, #3
1a00306c:	bf08      	it	eq
1a00306e:	461a      	moveq	r2, r3
1a003070:	1e7b      	subs	r3, r7, #1
1a003072:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
1a003076:	bf84      	itt	hi
1a003078:	f240 135d 	movwhi	r3, #349	; 0x15d
1a00307c:	60a3      	strhi	r3, [r4, #8]
1a00307e:	6823      	ldr	r3, [r4, #0]
1a003080:	9200      	str	r2, [sp, #0]
1a003082:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
1a003086:	bf88      	it	hi
1a003088:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
1a00308c:	f104 091c 	add.w	r9, r4, #28
1a003090:	6023      	str	r3, [r4, #0]
1a003092:	bf8c      	ite	hi
1a003094:	197f      	addhi	r7, r7, r5
1a003096:	2700      	movls	r7, #0
1a003098:	464b      	mov	r3, r9
1a00309a:	f04f 0800 	mov.w	r8, #0
1a00309e:	9301      	str	r3, [sp, #4]
1a0030a0:	6831      	ldr	r1, [r6, #0]
1a0030a2:	ab03      	add	r3, sp, #12
1a0030a4:	2202      	movs	r2, #2
1a0030a6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
1a0030aa:	7809      	ldrb	r1, [r1, #0]
1a0030ac:	f000 fb18 	bl	1a0036e0 <memchr>
1a0030b0:	9b01      	ldr	r3, [sp, #4]
1a0030b2:	b330      	cbz	r0, 1a003102 <_scanf_i+0xba>
1a0030b4:	f1b8 0f01 	cmp.w	r8, #1
1a0030b8:	d15a      	bne.n	1a003170 <_scanf_i+0x128>
1a0030ba:	6862      	ldr	r2, [r4, #4]
1a0030bc:	b92a      	cbnz	r2, 1a0030ca <_scanf_i+0x82>
1a0030be:	6822      	ldr	r2, [r4, #0]
1a0030c0:	2108      	movs	r1, #8
1a0030c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
1a0030c6:	6061      	str	r1, [r4, #4]
1a0030c8:	6022      	str	r2, [r4, #0]
1a0030ca:	6822      	ldr	r2, [r4, #0]
1a0030cc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
1a0030d0:	6022      	str	r2, [r4, #0]
1a0030d2:	68a2      	ldr	r2, [r4, #8]
1a0030d4:	1e51      	subs	r1, r2, #1
1a0030d6:	60a1      	str	r1, [r4, #8]
1a0030d8:	b19a      	cbz	r2, 1a003102 <_scanf_i+0xba>
1a0030da:	6832      	ldr	r2, [r6, #0]
1a0030dc:	1c51      	adds	r1, r2, #1
1a0030de:	6031      	str	r1, [r6, #0]
1a0030e0:	7812      	ldrb	r2, [r2, #0]
1a0030e2:	701a      	strb	r2, [r3, #0]
1a0030e4:	1c5d      	adds	r5, r3, #1
1a0030e6:	6873      	ldr	r3, [r6, #4]
1a0030e8:	3b01      	subs	r3, #1
1a0030ea:	2b00      	cmp	r3, #0
1a0030ec:	6073      	str	r3, [r6, #4]
1a0030ee:	dc07      	bgt.n	1a003100 <_scanf_i+0xb8>
1a0030f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
1a0030f4:	4631      	mov	r1, r6
1a0030f6:	4658      	mov	r0, fp
1a0030f8:	4798      	blx	r3
1a0030fa:	2800      	cmp	r0, #0
1a0030fc:	f040 8086 	bne.w	1a00320c <_scanf_i+0x1c4>
1a003100:	462b      	mov	r3, r5
1a003102:	f108 0801 	add.w	r8, r8, #1
1a003106:	f1b8 0f03 	cmp.w	r8, #3
1a00310a:	d1c8      	bne.n	1a00309e <_scanf_i+0x56>
1a00310c:	6862      	ldr	r2, [r4, #4]
1a00310e:	b90a      	cbnz	r2, 1a003114 <_scanf_i+0xcc>
1a003110:	220a      	movs	r2, #10
1a003112:	6062      	str	r2, [r4, #4]
1a003114:	6862      	ldr	r2, [r4, #4]
1a003116:	4945      	ldr	r1, [pc, #276]	; (1a00322c <_scanf_i+0x1e4>)
1a003118:	6960      	ldr	r0, [r4, #20]
1a00311a:	9301      	str	r3, [sp, #4]
1a00311c:	1a89      	subs	r1, r1, r2
1a00311e:	f000 f91d 	bl	1a00335c <__sccl>
1a003122:	9b01      	ldr	r3, [sp, #4]
1a003124:	f04f 0800 	mov.w	r8, #0
1a003128:	461d      	mov	r5, r3
1a00312a:	68a3      	ldr	r3, [r4, #8]
1a00312c:	6822      	ldr	r2, [r4, #0]
1a00312e:	2b00      	cmp	r3, #0
1a003130:	d03a      	beq.n	1a0031a8 <_scanf_i+0x160>
1a003132:	6831      	ldr	r1, [r6, #0]
1a003134:	6960      	ldr	r0, [r4, #20]
1a003136:	f891 c000 	ldrb.w	ip, [r1]
1a00313a:	f810 000c 	ldrb.w	r0, [r0, ip]
1a00313e:	2800      	cmp	r0, #0
1a003140:	d032      	beq.n	1a0031a8 <_scanf_i+0x160>
1a003142:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
1a003146:	d121      	bne.n	1a00318c <_scanf_i+0x144>
1a003148:	0510      	lsls	r0, r2, #20
1a00314a:	d51f      	bpl.n	1a00318c <_scanf_i+0x144>
1a00314c:	f108 0801 	add.w	r8, r8, #1
1a003150:	b117      	cbz	r7, 1a003158 <_scanf_i+0x110>
1a003152:	3301      	adds	r3, #1
1a003154:	3f01      	subs	r7, #1
1a003156:	60a3      	str	r3, [r4, #8]
1a003158:	6873      	ldr	r3, [r6, #4]
1a00315a:	3b01      	subs	r3, #1
1a00315c:	2b00      	cmp	r3, #0
1a00315e:	6073      	str	r3, [r6, #4]
1a003160:	dd1b      	ble.n	1a00319a <_scanf_i+0x152>
1a003162:	6833      	ldr	r3, [r6, #0]
1a003164:	3301      	adds	r3, #1
1a003166:	6033      	str	r3, [r6, #0]
1a003168:	68a3      	ldr	r3, [r4, #8]
1a00316a:	3b01      	subs	r3, #1
1a00316c:	60a3      	str	r3, [r4, #8]
1a00316e:	e7dc      	b.n	1a00312a <_scanf_i+0xe2>
1a003170:	f1b8 0f02 	cmp.w	r8, #2
1a003174:	d1ad      	bne.n	1a0030d2 <_scanf_i+0x8a>
1a003176:	6822      	ldr	r2, [r4, #0]
1a003178:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
1a00317c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
1a003180:	d1bf      	bne.n	1a003102 <_scanf_i+0xba>
1a003182:	2110      	movs	r1, #16
1a003184:	6061      	str	r1, [r4, #4]
1a003186:	f442 7280 	orr.w	r2, r2, #256	; 0x100
1a00318a:	e7a1      	b.n	1a0030d0 <_scanf_i+0x88>
1a00318c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
1a003190:	6022      	str	r2, [r4, #0]
1a003192:	780b      	ldrb	r3, [r1, #0]
1a003194:	702b      	strb	r3, [r5, #0]
1a003196:	3501      	adds	r5, #1
1a003198:	e7de      	b.n	1a003158 <_scanf_i+0x110>
1a00319a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
1a00319e:	4631      	mov	r1, r6
1a0031a0:	4658      	mov	r0, fp
1a0031a2:	4798      	blx	r3
1a0031a4:	2800      	cmp	r0, #0
1a0031a6:	d0df      	beq.n	1a003168 <_scanf_i+0x120>
1a0031a8:	6823      	ldr	r3, [r4, #0]
1a0031aa:	05d9      	lsls	r1, r3, #23
1a0031ac:	d50c      	bpl.n	1a0031c8 <_scanf_i+0x180>
1a0031ae:	454d      	cmp	r5, r9
1a0031b0:	d908      	bls.n	1a0031c4 <_scanf_i+0x17c>
1a0031b2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
1a0031b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
1a0031ba:	4632      	mov	r2, r6
1a0031bc:	4658      	mov	r0, fp
1a0031be:	4798      	blx	r3
1a0031c0:	1e6f      	subs	r7, r5, #1
1a0031c2:	463d      	mov	r5, r7
1a0031c4:	454d      	cmp	r5, r9
1a0031c6:	d029      	beq.n	1a00321c <_scanf_i+0x1d4>
1a0031c8:	6822      	ldr	r2, [r4, #0]
1a0031ca:	f012 0210 	ands.w	r2, r2, #16
1a0031ce:	d113      	bne.n	1a0031f8 <_scanf_i+0x1b0>
1a0031d0:	702a      	strb	r2, [r5, #0]
1a0031d2:	6863      	ldr	r3, [r4, #4]
1a0031d4:	9e00      	ldr	r6, [sp, #0]
1a0031d6:	4649      	mov	r1, r9
1a0031d8:	4658      	mov	r0, fp
1a0031da:	47b0      	blx	r6
1a0031dc:	f8da 3000 	ldr.w	r3, [sl]
1a0031e0:	6821      	ldr	r1, [r4, #0]
1a0031e2:	1d1a      	adds	r2, r3, #4
1a0031e4:	f8ca 2000 	str.w	r2, [sl]
1a0031e8:	f011 0f20 	tst.w	r1, #32
1a0031ec:	681b      	ldr	r3, [r3, #0]
1a0031ee:	d010      	beq.n	1a003212 <_scanf_i+0x1ca>
1a0031f0:	6018      	str	r0, [r3, #0]
1a0031f2:	68e3      	ldr	r3, [r4, #12]
1a0031f4:	3301      	adds	r3, #1
1a0031f6:	60e3      	str	r3, [r4, #12]
1a0031f8:	eba5 0509 	sub.w	r5, r5, r9
1a0031fc:	44a8      	add	r8, r5
1a0031fe:	6925      	ldr	r5, [r4, #16]
1a003200:	4445      	add	r5, r8
1a003202:	6125      	str	r5, [r4, #16]
1a003204:	2000      	movs	r0, #0
1a003206:	b007      	add	sp, #28
1a003208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00320c:	f04f 0800 	mov.w	r8, #0
1a003210:	e7ca      	b.n	1a0031a8 <_scanf_i+0x160>
1a003212:	07ca      	lsls	r2, r1, #31
1a003214:	bf4c      	ite	mi
1a003216:	8018      	strhmi	r0, [r3, #0]
1a003218:	6018      	strpl	r0, [r3, #0]
1a00321a:	e7ea      	b.n	1a0031f2 <_scanf_i+0x1aa>
1a00321c:	2001      	movs	r0, #1
1a00321e:	e7f2      	b.n	1a003206 <_scanf_i+0x1be>
1a003220:	1a003c10 	.word	0x1a003c10
1a003224:	1a001f81 	.word	0x1a001f81
1a003228:	1a00353d 	.word	0x1a00353d
1a00322c:	1a003c2c 	.word	0x1a003c2c

1a003230 <lflush>:
1a003230:	8983      	ldrh	r3, [r0, #12]
1a003232:	f003 0309 	and.w	r3, r3, #9
1a003236:	2b09      	cmp	r3, #9
1a003238:	d101      	bne.n	1a00323e <lflush+0xe>
1a00323a:	f7ff b839 	b.w	1a0022b0 <fflush>
1a00323e:	2000      	movs	r0, #0
1a003240:	4770      	bx	lr
1a003242:	Address 0x000000001a003242 is out of bounds.


1a003244 <__srefill_r>:
1a003244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003246:	460c      	mov	r4, r1
1a003248:	4605      	mov	r5, r0
1a00324a:	b118      	cbz	r0, 1a003254 <__srefill_r+0x10>
1a00324c:	6983      	ldr	r3, [r0, #24]
1a00324e:	b90b      	cbnz	r3, 1a003254 <__srefill_r+0x10>
1a003250:	f7ff f880 	bl	1a002354 <__sinit>
1a003254:	4b3c      	ldr	r3, [pc, #240]	; (1a003348 <__srefill_r+0x104>)
1a003256:	429c      	cmp	r4, r3
1a003258:	d10a      	bne.n	1a003270 <__srefill_r+0x2c>
1a00325a:	686c      	ldr	r4, [r5, #4]
1a00325c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a003260:	2300      	movs	r3, #0
1a003262:	6063      	str	r3, [r4, #4]
1a003264:	b293      	uxth	r3, r2
1a003266:	069e      	lsls	r6, r3, #26
1a003268:	d50c      	bpl.n	1a003284 <__srefill_r+0x40>
1a00326a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00326e:	e067      	b.n	1a003340 <__srefill_r+0xfc>
1a003270:	4b36      	ldr	r3, [pc, #216]	; (1a00334c <__srefill_r+0x108>)
1a003272:	429c      	cmp	r4, r3
1a003274:	d101      	bne.n	1a00327a <__srefill_r+0x36>
1a003276:	68ac      	ldr	r4, [r5, #8]
1a003278:	e7f0      	b.n	1a00325c <__srefill_r+0x18>
1a00327a:	4b35      	ldr	r3, [pc, #212]	; (1a003350 <__srefill_r+0x10c>)
1a00327c:	429c      	cmp	r4, r3
1a00327e:	bf08      	it	eq
1a003280:	68ec      	ldreq	r4, [r5, #12]
1a003282:	e7eb      	b.n	1a00325c <__srefill_r+0x18>
1a003284:	0758      	lsls	r0, r3, #29
1a003286:	d449      	bmi.n	1a00331c <__srefill_r+0xd8>
1a003288:	06d9      	lsls	r1, r3, #27
1a00328a:	d405      	bmi.n	1a003298 <__srefill_r+0x54>
1a00328c:	2309      	movs	r3, #9
1a00328e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
1a003292:	602b      	str	r3, [r5, #0]
1a003294:	81a2      	strh	r2, [r4, #12]
1a003296:	e7e8      	b.n	1a00326a <__srefill_r+0x26>
1a003298:	071a      	lsls	r2, r3, #28
1a00329a:	d50b      	bpl.n	1a0032b4 <__srefill_r+0x70>
1a00329c:	4621      	mov	r1, r4
1a00329e:	4628      	mov	r0, r5
1a0032a0:	f7fe ffdc 	bl	1a00225c <_fflush_r>
1a0032a4:	2800      	cmp	r0, #0
1a0032a6:	d1e0      	bne.n	1a00326a <__srefill_r+0x26>
1a0032a8:	89a3      	ldrh	r3, [r4, #12]
1a0032aa:	60a0      	str	r0, [r4, #8]
1a0032ac:	f023 0308 	bic.w	r3, r3, #8
1a0032b0:	81a3      	strh	r3, [r4, #12]
1a0032b2:	61a0      	str	r0, [r4, #24]
1a0032b4:	89a3      	ldrh	r3, [r4, #12]
1a0032b6:	f043 0304 	orr.w	r3, r3, #4
1a0032ba:	81a3      	strh	r3, [r4, #12]
1a0032bc:	6923      	ldr	r3, [r4, #16]
1a0032be:	b91b      	cbnz	r3, 1a0032c8 <__srefill_r+0x84>
1a0032c0:	4621      	mov	r1, r4
1a0032c2:	4628      	mov	r0, r5
1a0032c4:	f7ff f922 	bl	1a00250c <__smakebuf_r>
1a0032c8:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
1a0032cc:	b2be      	uxth	r6, r7
1a0032ce:	07b3      	lsls	r3, r6, #30
1a0032d0:	d00f      	beq.n	1a0032f2 <__srefill_r+0xae>
1a0032d2:	2301      	movs	r3, #1
1a0032d4:	81a3      	strh	r3, [r4, #12]
1a0032d6:	4b1f      	ldr	r3, [pc, #124]	; (1a003354 <__srefill_r+0x110>)
1a0032d8:	491f      	ldr	r1, [pc, #124]	; (1a003358 <__srefill_r+0x114>)
1a0032da:	6818      	ldr	r0, [r3, #0]
1a0032dc:	f006 0609 	and.w	r6, r6, #9
1a0032e0:	f7ff f8a4 	bl	1a00242c <_fwalk>
1a0032e4:	2e09      	cmp	r6, #9
1a0032e6:	81a7      	strh	r7, [r4, #12]
1a0032e8:	d103      	bne.n	1a0032f2 <__srefill_r+0xae>
1a0032ea:	4621      	mov	r1, r4
1a0032ec:	4628      	mov	r0, r5
1a0032ee:	f7fe ff2f 	bl	1a002150 <__sflush_r>
1a0032f2:	6922      	ldr	r2, [r4, #16]
1a0032f4:	6022      	str	r2, [r4, #0]
1a0032f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
1a0032f8:	6963      	ldr	r3, [r4, #20]
1a0032fa:	6a21      	ldr	r1, [r4, #32]
1a0032fc:	4628      	mov	r0, r5
1a0032fe:	47b0      	blx	r6
1a003300:	2800      	cmp	r0, #0
1a003302:	6060      	str	r0, [r4, #4]
1a003304:	dc1d      	bgt.n	1a003342 <__srefill_r+0xfe>
1a003306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00330a:	bf17      	itett	ne
1a00330c:	2200      	movne	r2, #0
1a00330e:	f043 0320 	orreq.w	r3, r3, #32
1a003312:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
1a003316:	6062      	strne	r2, [r4, #4]
1a003318:	81a3      	strh	r3, [r4, #12]
1a00331a:	e7a6      	b.n	1a00326a <__srefill_r+0x26>
1a00331c:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a00331e:	2900      	cmp	r1, #0
1a003320:	d0cc      	beq.n	1a0032bc <__srefill_r+0x78>
1a003322:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a003326:	4299      	cmp	r1, r3
1a003328:	d002      	beq.n	1a003330 <__srefill_r+0xec>
1a00332a:	4628      	mov	r0, r5
1a00332c:	f7ff f940 	bl	1a0025b0 <_free_r>
1a003330:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a003332:	6063      	str	r3, [r4, #4]
1a003334:	2000      	movs	r0, #0
1a003336:	6360      	str	r0, [r4, #52]	; 0x34
1a003338:	2b00      	cmp	r3, #0
1a00333a:	d0bf      	beq.n	1a0032bc <__srefill_r+0x78>
1a00333c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00333e:	6023      	str	r3, [r4, #0]
1a003340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003342:	2000      	movs	r0, #0
1a003344:	e7fc      	b.n	1a003340 <__srefill_r+0xfc>
1a003346:	bf00      	nop
1a003348:	1a003b8c 	.word	0x1a003b8c
1a00334c:	1a003bac 	.word	0x1a003bac
1a003350:	1a003b6c 	.word	0x1a003b6c
1a003354:	1a003bcc 	.word	0x1a003bcc
1a003358:	1a003231 	.word	0x1a003231

1a00335c <__sccl>:
1a00335c:	b570      	push	{r4, r5, r6, lr}
1a00335e:	780b      	ldrb	r3, [r1, #0]
1a003360:	2b5e      	cmp	r3, #94	; 0x5e
1a003362:	bf13      	iteet	ne
1a003364:	1c4a      	addne	r2, r1, #1
1a003366:	1c8a      	addeq	r2, r1, #2
1a003368:	784b      	ldrbeq	r3, [r1, #1]
1a00336a:	2100      	movne	r1, #0
1a00336c:	bf08      	it	eq
1a00336e:	2101      	moveq	r1, #1
1a003370:	1e44      	subs	r4, r0, #1
1a003372:	f100 05ff 	add.w	r5, r0, #255	; 0xff
1a003376:	f804 1f01 	strb.w	r1, [r4, #1]!
1a00337a:	42ac      	cmp	r4, r5
1a00337c:	d1fb      	bne.n	1a003376 <__sccl+0x1a>
1a00337e:	b913      	cbnz	r3, 1a003386 <__sccl+0x2a>
1a003380:	3a01      	subs	r2, #1
1a003382:	4610      	mov	r0, r2
1a003384:	bd70      	pop	{r4, r5, r6, pc}
1a003386:	f081 0401 	eor.w	r4, r1, #1
1a00338a:	54c4      	strb	r4, [r0, r3]
1a00338c:	1c51      	adds	r1, r2, #1
1a00338e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
1a003392:	2d2d      	cmp	r5, #45	; 0x2d
1a003394:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
1a003398:	460a      	mov	r2, r1
1a00339a:	d006      	beq.n	1a0033aa <__sccl+0x4e>
1a00339c:	2d5d      	cmp	r5, #93	; 0x5d
1a00339e:	d0f0      	beq.n	1a003382 <__sccl+0x26>
1a0033a0:	b90d      	cbnz	r5, 1a0033a6 <__sccl+0x4a>
1a0033a2:	4632      	mov	r2, r6
1a0033a4:	e7ed      	b.n	1a003382 <__sccl+0x26>
1a0033a6:	462b      	mov	r3, r5
1a0033a8:	e7ef      	b.n	1a00338a <__sccl+0x2e>
1a0033aa:	780e      	ldrb	r6, [r1, #0]
1a0033ac:	2e5d      	cmp	r6, #93	; 0x5d
1a0033ae:	d0fa      	beq.n	1a0033a6 <__sccl+0x4a>
1a0033b0:	42b3      	cmp	r3, r6
1a0033b2:	dcf8      	bgt.n	1a0033a6 <__sccl+0x4a>
1a0033b4:	3301      	adds	r3, #1
1a0033b6:	429e      	cmp	r6, r3
1a0033b8:	54c4      	strb	r4, [r0, r3]
1a0033ba:	dcfb      	bgt.n	1a0033b4 <__sccl+0x58>
1a0033bc:	3102      	adds	r1, #2
1a0033be:	e7e6      	b.n	1a00338e <__sccl+0x32>

1a0033c0 <__sread>:
1a0033c0:	b510      	push	{r4, lr}
1a0033c2:	460c      	mov	r4, r1
1a0033c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0033c8:	f7fd f982 	bl	1a0006d0 <_read_r>
1a0033cc:	2800      	cmp	r0, #0
1a0033ce:	bfab      	itete	ge
1a0033d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a0033d2:	89a3      	ldrhlt	r3, [r4, #12]
1a0033d4:	181b      	addge	r3, r3, r0
1a0033d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a0033da:	bfac      	ite	ge
1a0033dc:	6563      	strge	r3, [r4, #84]	; 0x54
1a0033de:	81a3      	strhlt	r3, [r4, #12]
1a0033e0:	bd10      	pop	{r4, pc}

1a0033e2 <__swrite>:
1a0033e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0033e6:	461f      	mov	r7, r3
1a0033e8:	898b      	ldrh	r3, [r1, #12]
1a0033ea:	05db      	lsls	r3, r3, #23
1a0033ec:	4605      	mov	r5, r0
1a0033ee:	460c      	mov	r4, r1
1a0033f0:	4616      	mov	r6, r2
1a0033f2:	d505      	bpl.n	1a003400 <__swrite+0x1e>
1a0033f4:	2302      	movs	r3, #2
1a0033f6:	2200      	movs	r2, #0
1a0033f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0033fc:	f7fd f963 	bl	1a0006c6 <_lseek_r>
1a003400:	89a3      	ldrh	r3, [r4, #12]
1a003402:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a003406:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a00340a:	81a3      	strh	r3, [r4, #12]
1a00340c:	4632      	mov	r2, r6
1a00340e:	463b      	mov	r3, r7
1a003410:	4628      	mov	r0, r5
1a003412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a003416:	f7fd b982 	b.w	1a00071e <_write_r>

1a00341a <__sseek>:
1a00341a:	b510      	push	{r4, lr}
1a00341c:	460c      	mov	r4, r1
1a00341e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003422:	f7fd f950 	bl	1a0006c6 <_lseek_r>
1a003426:	1c43      	adds	r3, r0, #1
1a003428:	89a3      	ldrh	r3, [r4, #12]
1a00342a:	bf15      	itete	ne
1a00342c:	6560      	strne	r0, [r4, #84]	; 0x54
1a00342e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a003432:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a003436:	81a3      	strheq	r3, [r4, #12]
1a003438:	bf18      	it	ne
1a00343a:	81a3      	strhne	r3, [r4, #12]
1a00343c:	bd10      	pop	{r4, pc}

1a00343e <__sclose>:
1a00343e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003442:	f7fd b92d 	b.w	1a0006a0 <_close_r>

1a003446 <_strtoul_l.isra.0>:
1a003446:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00344a:	4680      	mov	r8, r0
1a00344c:	4689      	mov	r9, r1
1a00344e:	4692      	mov	sl, r2
1a003450:	461e      	mov	r6, r3
1a003452:	460f      	mov	r7, r1
1a003454:	463d      	mov	r5, r7
1a003456:	9808      	ldr	r0, [sp, #32]
1a003458:	f815 4b01 	ldrb.w	r4, [r5], #1
1a00345c:	f7ff f820 	bl	1a0024a0 <__locale_ctype_ptr_l>
1a003460:	4420      	add	r0, r4
1a003462:	7843      	ldrb	r3, [r0, #1]
1a003464:	f013 0308 	ands.w	r3, r3, #8
1a003468:	d130      	bne.n	1a0034cc <_strtoul_l.isra.0+0x86>
1a00346a:	2c2d      	cmp	r4, #45	; 0x2d
1a00346c:	d130      	bne.n	1a0034d0 <_strtoul_l.isra.0+0x8a>
1a00346e:	787c      	ldrb	r4, [r7, #1]
1a003470:	1cbd      	adds	r5, r7, #2
1a003472:	2101      	movs	r1, #1
1a003474:	2e00      	cmp	r6, #0
1a003476:	d05c      	beq.n	1a003532 <_strtoul_l.isra.0+0xec>
1a003478:	2e10      	cmp	r6, #16
1a00347a:	d109      	bne.n	1a003490 <_strtoul_l.isra.0+0x4a>
1a00347c:	2c30      	cmp	r4, #48	; 0x30
1a00347e:	d107      	bne.n	1a003490 <_strtoul_l.isra.0+0x4a>
1a003480:	782b      	ldrb	r3, [r5, #0]
1a003482:	f003 03df 	and.w	r3, r3, #223	; 0xdf
1a003486:	2b58      	cmp	r3, #88	; 0x58
1a003488:	d14e      	bne.n	1a003528 <_strtoul_l.isra.0+0xe2>
1a00348a:	786c      	ldrb	r4, [r5, #1]
1a00348c:	2610      	movs	r6, #16
1a00348e:	3502      	adds	r5, #2
1a003490:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a003494:	2300      	movs	r3, #0
1a003496:	fbb2 f2f6 	udiv	r2, r2, r6
1a00349a:	fb06 fc02 	mul.w	ip, r6, r2
1a00349e:	ea6f 0c0c 	mvn.w	ip, ip
1a0034a2:	4618      	mov	r0, r3
1a0034a4:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
1a0034a8:	2f09      	cmp	r7, #9
1a0034aa:	d817      	bhi.n	1a0034dc <_strtoul_l.isra.0+0x96>
1a0034ac:	463c      	mov	r4, r7
1a0034ae:	42a6      	cmp	r6, r4
1a0034b0:	dd23      	ble.n	1a0034fa <_strtoul_l.isra.0+0xb4>
1a0034b2:	2b00      	cmp	r3, #0
1a0034b4:	db1e      	blt.n	1a0034f4 <_strtoul_l.isra.0+0xae>
1a0034b6:	4282      	cmp	r2, r0
1a0034b8:	d31c      	bcc.n	1a0034f4 <_strtoul_l.isra.0+0xae>
1a0034ba:	d101      	bne.n	1a0034c0 <_strtoul_l.isra.0+0x7a>
1a0034bc:	45a4      	cmp	ip, r4
1a0034be:	db19      	blt.n	1a0034f4 <_strtoul_l.isra.0+0xae>
1a0034c0:	fb00 4006 	mla	r0, r0, r6, r4
1a0034c4:	2301      	movs	r3, #1
1a0034c6:	f815 4b01 	ldrb.w	r4, [r5], #1
1a0034ca:	e7eb      	b.n	1a0034a4 <_strtoul_l.isra.0+0x5e>
1a0034cc:	462f      	mov	r7, r5
1a0034ce:	e7c1      	b.n	1a003454 <_strtoul_l.isra.0+0xe>
1a0034d0:	2c2b      	cmp	r4, #43	; 0x2b
1a0034d2:	bf04      	itt	eq
1a0034d4:	1cbd      	addeq	r5, r7, #2
1a0034d6:	787c      	ldrbeq	r4, [r7, #1]
1a0034d8:	4619      	mov	r1, r3
1a0034da:	e7cb      	b.n	1a003474 <_strtoul_l.isra.0+0x2e>
1a0034dc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
1a0034e0:	2f19      	cmp	r7, #25
1a0034e2:	d801      	bhi.n	1a0034e8 <_strtoul_l.isra.0+0xa2>
1a0034e4:	3c37      	subs	r4, #55	; 0x37
1a0034e6:	e7e2      	b.n	1a0034ae <_strtoul_l.isra.0+0x68>
1a0034e8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
1a0034ec:	2f19      	cmp	r7, #25
1a0034ee:	d804      	bhi.n	1a0034fa <_strtoul_l.isra.0+0xb4>
1a0034f0:	3c57      	subs	r4, #87	; 0x57
1a0034f2:	e7dc      	b.n	1a0034ae <_strtoul_l.isra.0+0x68>
1a0034f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0034f8:	e7e5      	b.n	1a0034c6 <_strtoul_l.isra.0+0x80>
1a0034fa:	2b00      	cmp	r3, #0
1a0034fc:	da09      	bge.n	1a003512 <_strtoul_l.isra.0+0xcc>
1a0034fe:	2322      	movs	r3, #34	; 0x22
1a003500:	f8c8 3000 	str.w	r3, [r8]
1a003504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003508:	f1ba 0f00 	cmp.w	sl, #0
1a00350c:	d107      	bne.n	1a00351e <_strtoul_l.isra.0+0xd8>
1a00350e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003512:	b101      	cbz	r1, 1a003516 <_strtoul_l.isra.0+0xd0>
1a003514:	4240      	negs	r0, r0
1a003516:	f1ba 0f00 	cmp.w	sl, #0
1a00351a:	d0f8      	beq.n	1a00350e <_strtoul_l.isra.0+0xc8>
1a00351c:	b10b      	cbz	r3, 1a003522 <_strtoul_l.isra.0+0xdc>
1a00351e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
1a003522:	f8ca 9000 	str.w	r9, [sl]
1a003526:	e7f2      	b.n	1a00350e <_strtoul_l.isra.0+0xc8>
1a003528:	2430      	movs	r4, #48	; 0x30
1a00352a:	2e00      	cmp	r6, #0
1a00352c:	d1b0      	bne.n	1a003490 <_strtoul_l.isra.0+0x4a>
1a00352e:	2608      	movs	r6, #8
1a003530:	e7ae      	b.n	1a003490 <_strtoul_l.isra.0+0x4a>
1a003532:	2c30      	cmp	r4, #48	; 0x30
1a003534:	d0a4      	beq.n	1a003480 <_strtoul_l.isra.0+0x3a>
1a003536:	260a      	movs	r6, #10
1a003538:	e7aa      	b.n	1a003490 <_strtoul_l.isra.0+0x4a>
1a00353a:	Address 0x000000001a00353a is out of bounds.


1a00353c <_strtoul_r>:
1a00353c:	b537      	push	{r0, r1, r2, r4, r5, lr}
1a00353e:	4c06      	ldr	r4, [pc, #24]	; (1a003558 <_strtoul_r+0x1c>)
1a003540:	4d06      	ldr	r5, [pc, #24]	; (1a00355c <_strtoul_r+0x20>)
1a003542:	6824      	ldr	r4, [r4, #0]
1a003544:	6a24      	ldr	r4, [r4, #32]
1a003546:	2c00      	cmp	r4, #0
1a003548:	bf08      	it	eq
1a00354a:	462c      	moveq	r4, r5
1a00354c:	9400      	str	r4, [sp, #0]
1a00354e:	f7ff ff7a 	bl	1a003446 <_strtoul_l.isra.0>
1a003552:	b003      	add	sp, #12
1a003554:	bd30      	pop	{r4, r5, pc}
1a003556:	bf00      	nop
1a003558:	10000048 	.word	0x10000048
1a00355c:	100000ac 	.word	0x100000ac

1a003560 <__submore>:
1a003560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003564:	460c      	mov	r4, r1
1a003566:	6b49      	ldr	r1, [r1, #52]	; 0x34
1a003568:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a00356c:	4299      	cmp	r1, r3
1a00356e:	d11d      	bne.n	1a0035ac <__submore+0x4c>
1a003570:	f44f 6180 	mov.w	r1, #1024	; 0x400
1a003574:	f7ff f86a 	bl	1a00264c <_malloc_r>
1a003578:	b918      	cbnz	r0, 1a003582 <__submore+0x22>
1a00357a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00357e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003582:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a003586:	63a3      	str	r3, [r4, #56]	; 0x38
1a003588:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
1a00358c:	6360      	str	r0, [r4, #52]	; 0x34
1a00358e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
1a003592:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a003596:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
1a00359a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a00359e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
1a0035a2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
1a0035a6:	6020      	str	r0, [r4, #0]
1a0035a8:	2000      	movs	r0, #0
1a0035aa:	e7e8      	b.n	1a00357e <__submore+0x1e>
1a0035ac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
1a0035ae:	0077      	lsls	r7, r6, #1
1a0035b0:	463a      	mov	r2, r7
1a0035b2:	f000 f8e7 	bl	1a003784 <_realloc_r>
1a0035b6:	4605      	mov	r5, r0
1a0035b8:	2800      	cmp	r0, #0
1a0035ba:	d0de      	beq.n	1a00357a <__submore+0x1a>
1a0035bc:	eb00 0806 	add.w	r8, r0, r6
1a0035c0:	4601      	mov	r1, r0
1a0035c2:	4632      	mov	r2, r6
1a0035c4:	4640      	mov	r0, r8
1a0035c6:	f7fe fbb7 	bl	1a001d38 <memcpy>
1a0035ca:	f8c4 8000 	str.w	r8, [r4]
1a0035ce:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
1a0035d2:	e7e9      	b.n	1a0035a8 <__submore+0x48>

1a0035d4 <_ungetc_r>:
1a0035d4:	1c4b      	adds	r3, r1, #1
1a0035d6:	b570      	push	{r4, r5, r6, lr}
1a0035d8:	4606      	mov	r6, r0
1a0035da:	460d      	mov	r5, r1
1a0035dc:	4614      	mov	r4, r2
1a0035de:	d103      	bne.n	1a0035e8 <_ungetc_r+0x14>
1a0035e0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a0035e4:	4628      	mov	r0, r5
1a0035e6:	bd70      	pop	{r4, r5, r6, pc}
1a0035e8:	b118      	cbz	r0, 1a0035f2 <_ungetc_r+0x1e>
1a0035ea:	6983      	ldr	r3, [r0, #24]
1a0035ec:	b90b      	cbnz	r3, 1a0035f2 <_ungetc_r+0x1e>
1a0035ee:	f7fe feb1 	bl	1a002354 <__sinit>
1a0035f2:	4b2e      	ldr	r3, [pc, #184]	; (1a0036ac <_ungetc_r+0xd8>)
1a0035f4:	429c      	cmp	r4, r3
1a0035f6:	d12c      	bne.n	1a003652 <_ungetc_r+0x7e>
1a0035f8:	6874      	ldr	r4, [r6, #4]
1a0035fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0035fe:	f023 0320 	bic.w	r3, r3, #32
1a003602:	81a3      	strh	r3, [r4, #12]
1a003604:	b29b      	uxth	r3, r3
1a003606:	0759      	lsls	r1, r3, #29
1a003608:	d413      	bmi.n	1a003632 <_ungetc_r+0x5e>
1a00360a:	06da      	lsls	r2, r3, #27
1a00360c:	d5e8      	bpl.n	1a0035e0 <_ungetc_r+0xc>
1a00360e:	071b      	lsls	r3, r3, #28
1a003610:	d50b      	bpl.n	1a00362a <_ungetc_r+0x56>
1a003612:	4621      	mov	r1, r4
1a003614:	4630      	mov	r0, r6
1a003616:	f7fe fe21 	bl	1a00225c <_fflush_r>
1a00361a:	2800      	cmp	r0, #0
1a00361c:	d1e0      	bne.n	1a0035e0 <_ungetc_r+0xc>
1a00361e:	89a3      	ldrh	r3, [r4, #12]
1a003620:	60a0      	str	r0, [r4, #8]
1a003622:	f023 0308 	bic.w	r3, r3, #8
1a003626:	81a3      	strh	r3, [r4, #12]
1a003628:	61a0      	str	r0, [r4, #24]
1a00362a:	89a3      	ldrh	r3, [r4, #12]
1a00362c:	f043 0304 	orr.w	r3, r3, #4
1a003630:	81a3      	strh	r3, [r4, #12]
1a003632:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a003634:	6862      	ldr	r2, [r4, #4]
1a003636:	b2ed      	uxtb	r5, r5
1a003638:	b1e3      	cbz	r3, 1a003674 <_ungetc_r+0xa0>
1a00363a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a00363c:	4293      	cmp	r3, r2
1a00363e:	dd12      	ble.n	1a003666 <_ungetc_r+0x92>
1a003640:	6823      	ldr	r3, [r4, #0]
1a003642:	1e5a      	subs	r2, r3, #1
1a003644:	6022      	str	r2, [r4, #0]
1a003646:	f803 5c01 	strb.w	r5, [r3, #-1]
1a00364a:	6863      	ldr	r3, [r4, #4]
1a00364c:	3301      	adds	r3, #1
1a00364e:	6063      	str	r3, [r4, #4]
1a003650:	e7c8      	b.n	1a0035e4 <_ungetc_r+0x10>
1a003652:	4b17      	ldr	r3, [pc, #92]	; (1a0036b0 <_ungetc_r+0xdc>)
1a003654:	429c      	cmp	r4, r3
1a003656:	d101      	bne.n	1a00365c <_ungetc_r+0x88>
1a003658:	68b4      	ldr	r4, [r6, #8]
1a00365a:	e7ce      	b.n	1a0035fa <_ungetc_r+0x26>
1a00365c:	4b15      	ldr	r3, [pc, #84]	; (1a0036b4 <_ungetc_r+0xe0>)
1a00365e:	429c      	cmp	r4, r3
1a003660:	bf08      	it	eq
1a003662:	68f4      	ldreq	r4, [r6, #12]
1a003664:	e7c9      	b.n	1a0035fa <_ungetc_r+0x26>
1a003666:	4621      	mov	r1, r4
1a003668:	4630      	mov	r0, r6
1a00366a:	f7ff ff79 	bl	1a003560 <__submore>
1a00366e:	2800      	cmp	r0, #0
1a003670:	d0e6      	beq.n	1a003640 <_ungetc_r+0x6c>
1a003672:	e7b5      	b.n	1a0035e0 <_ungetc_r+0xc>
1a003674:	6921      	ldr	r1, [r4, #16]
1a003676:	6823      	ldr	r3, [r4, #0]
1a003678:	b151      	cbz	r1, 1a003690 <_ungetc_r+0xbc>
1a00367a:	4299      	cmp	r1, r3
1a00367c:	d208      	bcs.n	1a003690 <_ungetc_r+0xbc>
1a00367e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
1a003682:	42a9      	cmp	r1, r5
1a003684:	d104      	bne.n	1a003690 <_ungetc_r+0xbc>
1a003686:	3b01      	subs	r3, #1
1a003688:	3201      	adds	r2, #1
1a00368a:	6023      	str	r3, [r4, #0]
1a00368c:	6062      	str	r2, [r4, #4]
1a00368e:	e7a9      	b.n	1a0035e4 <_ungetc_r+0x10>
1a003690:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
1a003694:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a003698:	6363      	str	r3, [r4, #52]	; 0x34
1a00369a:	2303      	movs	r3, #3
1a00369c:	63a3      	str	r3, [r4, #56]	; 0x38
1a00369e:	4623      	mov	r3, r4
1a0036a0:	f803 5f46 	strb.w	r5, [r3, #70]!
1a0036a4:	6023      	str	r3, [r4, #0]
1a0036a6:	2301      	movs	r3, #1
1a0036a8:	e7d1      	b.n	1a00364e <_ungetc_r+0x7a>
1a0036aa:	bf00      	nop
1a0036ac:	1a003b8c 	.word	0x1a003b8c
1a0036b0:	1a003bac 	.word	0x1a003bac
1a0036b4:	1a003b6c 	.word	0x1a003b6c

1a0036b8 <__ascii_wctomb>:
1a0036b8:	b149      	cbz	r1, 1a0036ce <__ascii_wctomb+0x16>
1a0036ba:	2aff      	cmp	r2, #255	; 0xff
1a0036bc:	bf85      	ittet	hi
1a0036be:	238a      	movhi	r3, #138	; 0x8a
1a0036c0:	6003      	strhi	r3, [r0, #0]
1a0036c2:	700a      	strbls	r2, [r1, #0]
1a0036c4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
1a0036c8:	bf98      	it	ls
1a0036ca:	2001      	movls	r0, #1
1a0036cc:	4770      	bx	lr
1a0036ce:	4608      	mov	r0, r1
1a0036d0:	4770      	bx	lr
1a0036d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0036d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0036da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0036de:	Address 0x000000001a0036de is out of bounds.


1a0036e0 <memchr>:
1a0036e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0036e4:	2a10      	cmp	r2, #16
1a0036e6:	db2b      	blt.n	1a003740 <memchr+0x60>
1a0036e8:	f010 0f07 	tst.w	r0, #7
1a0036ec:	d008      	beq.n	1a003700 <memchr+0x20>
1a0036ee:	f810 3b01 	ldrb.w	r3, [r0], #1
1a0036f2:	3a01      	subs	r2, #1
1a0036f4:	428b      	cmp	r3, r1
1a0036f6:	d02d      	beq.n	1a003754 <memchr+0x74>
1a0036f8:	f010 0f07 	tst.w	r0, #7
1a0036fc:	b342      	cbz	r2, 1a003750 <memchr+0x70>
1a0036fe:	d1f6      	bne.n	1a0036ee <memchr+0xe>
1a003700:	b4f0      	push	{r4, r5, r6, r7}
1a003702:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a003706:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a00370a:	f022 0407 	bic.w	r4, r2, #7
1a00370e:	f07f 0700 	mvns.w	r7, #0
1a003712:	2300      	movs	r3, #0
1a003714:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a003718:	3c08      	subs	r4, #8
1a00371a:	ea85 0501 	eor.w	r5, r5, r1
1a00371e:	ea86 0601 	eor.w	r6, r6, r1
1a003722:	fa85 f547 	uadd8	r5, r5, r7
1a003726:	faa3 f587 	sel	r5, r3, r7
1a00372a:	fa86 f647 	uadd8	r6, r6, r7
1a00372e:	faa5 f687 	sel	r6, r5, r7
1a003732:	b98e      	cbnz	r6, 1a003758 <memchr+0x78>
1a003734:	d1ee      	bne.n	1a003714 <memchr+0x34>
1a003736:	bcf0      	pop	{r4, r5, r6, r7}
1a003738:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a00373c:	f002 0207 	and.w	r2, r2, #7
1a003740:	b132      	cbz	r2, 1a003750 <memchr+0x70>
1a003742:	f810 3b01 	ldrb.w	r3, [r0], #1
1a003746:	3a01      	subs	r2, #1
1a003748:	ea83 0301 	eor.w	r3, r3, r1
1a00374c:	b113      	cbz	r3, 1a003754 <memchr+0x74>
1a00374e:	d1f8      	bne.n	1a003742 <memchr+0x62>
1a003750:	2000      	movs	r0, #0
1a003752:	4770      	bx	lr
1a003754:	3801      	subs	r0, #1
1a003756:	4770      	bx	lr
1a003758:	2d00      	cmp	r5, #0
1a00375a:	bf06      	itte	eq
1a00375c:	4635      	moveq	r5, r6
1a00375e:	3803      	subeq	r0, #3
1a003760:	3807      	subne	r0, #7
1a003762:	f015 0f01 	tst.w	r5, #1
1a003766:	d107      	bne.n	1a003778 <memchr+0x98>
1a003768:	3001      	adds	r0, #1
1a00376a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a00376e:	bf02      	ittt	eq
1a003770:	3001      	addeq	r0, #1
1a003772:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a003776:	3001      	addeq	r0, #1
1a003778:	bcf0      	pop	{r4, r5, r6, r7}
1a00377a:	3801      	subs	r0, #1
1a00377c:	4770      	bx	lr
1a00377e:	bf00      	nop

1a003780 <__malloc_lock>:
1a003780:	4770      	bx	lr

1a003782 <__malloc_unlock>:
1a003782:	4770      	bx	lr

1a003784 <_realloc_r>:
1a003784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003786:	4607      	mov	r7, r0
1a003788:	4614      	mov	r4, r2
1a00378a:	460e      	mov	r6, r1
1a00378c:	b921      	cbnz	r1, 1a003798 <_realloc_r+0x14>
1a00378e:	4611      	mov	r1, r2
1a003790:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a003794:	f7fe bf5a 	b.w	1a00264c <_malloc_r>
1a003798:	b922      	cbnz	r2, 1a0037a4 <_realloc_r+0x20>
1a00379a:	f7fe ff09 	bl	1a0025b0 <_free_r>
1a00379e:	4625      	mov	r5, r4
1a0037a0:	4628      	mov	r0, r5
1a0037a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0037a4:	f000 f814 	bl	1a0037d0 <_malloc_usable_size_r>
1a0037a8:	42a0      	cmp	r0, r4
1a0037aa:	d20f      	bcs.n	1a0037cc <_realloc_r+0x48>
1a0037ac:	4621      	mov	r1, r4
1a0037ae:	4638      	mov	r0, r7
1a0037b0:	f7fe ff4c 	bl	1a00264c <_malloc_r>
1a0037b4:	4605      	mov	r5, r0
1a0037b6:	2800      	cmp	r0, #0
1a0037b8:	d0f2      	beq.n	1a0037a0 <_realloc_r+0x1c>
1a0037ba:	4631      	mov	r1, r6
1a0037bc:	4622      	mov	r2, r4
1a0037be:	f7fe fabb 	bl	1a001d38 <memcpy>
1a0037c2:	4631      	mov	r1, r6
1a0037c4:	4638      	mov	r0, r7
1a0037c6:	f7fe fef3 	bl	1a0025b0 <_free_r>
1a0037ca:	e7e9      	b.n	1a0037a0 <_realloc_r+0x1c>
1a0037cc:	4635      	mov	r5, r6
1a0037ce:	e7e7      	b.n	1a0037a0 <_realloc_r+0x1c>

1a0037d0 <_malloc_usable_size_r>:
1a0037d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a0037d4:	1f18      	subs	r0, r3, #4
1a0037d6:	2b00      	cmp	r3, #0
1a0037d8:	bfbc      	itt	lt
1a0037da:	580b      	ldrlt	r3, [r1, r0]
1a0037dc:	18c0      	addlt	r0, r0, r3
1a0037de:	4770      	bx	lr
1a0037e0:	7778797a 	.word	0x7778797a
1a0037e4:	73747576 	.word	0x73747576
1a0037e8:	6f707172 	.word	0x6f707172
1a0037ec:	6b6c6d6e 	.word	0x6b6c6d6e
1a0037f0:	6768696a 	.word	0x6768696a
1a0037f4:	63646566 	.word	0x63646566
1a0037f8:	38396162 	.word	0x38396162
1a0037fc:	34353637 	.word	0x34353637
1a003800:	30313233 	.word	0x30313233
1a003804:	34333231 	.word	0x34333231
1a003808:	38373635 	.word	0x38373635
1a00380c:	63626139 	.word	0x63626139
1a003810:	67666564 	.word	0x67666564
1a003814:	6b6a6968 	.word	0x6b6a6968
1a003818:	6f6e6d6c 	.word	0x6f6e6d6c
1a00381c:	73727170 	.word	0x73727170
1a003820:	77767574 	.word	0x77767574
1a003824:	007a7978 	.word	0x007a7978
1a003828:	554e454d 	.word	0x554e454d
1a00382c:	49525020 	.word	0x49525020
1a003830:	5049434e 	.word	0x5049434e
1a003834:	000d4c41 	.word	0x000d4c41
1a003838:	20293128 	.word	0x20293128
1a00383c:	6964654d 	.word	0x6964654d
1a003840:	61432072 	.word	0x61432072
1a003844:	0d6f706d 	.word	0x0d6f706d
1a003848:	00000000 	.word	0x00000000
1a00384c:	20293228 	.word	0x20293228
1a003850:	0d2d2d2d 	.word	0x0d2d2d2d
1a003854:	00000000 	.word	0x00000000
1a003858:	20293328 	.word	0x20293328
1a00385c:	202d2d2d 	.word	0x202d2d2d
1a003860:	0000000d 	.word	0x0000000d
1a003864:	00007325 	.word	0x00007325
1a003868:	76206c45 	.word	0x76206c45
1a00386c:	726f6c61 	.word	0x726f6c61
1a003870:	676e6920 	.word	0x676e6920
1a003874:	61736572 	.word	0x61736572
1a003878:	203a6f64 	.word	0x203a6f64
1a00387c:	0a0d7325 	.word	0x0a0d7325
1a003880:	00000000 	.word	0x00000000
1a003884:	45434e45 	.word	0x45434e45
1a003888:	5245444e 	.word	0x5245444e
1a00388c:	4e4f5320 	.word	0x4e4f5320
1a003890:	2e2e4144 	.word	0x2e2e4144
1a003894:	000d202e 	.word	0x000d202e
1a003898:	41545345 	.word	0x41545345
1a00389c:	44204f44 	.word	0x44204f44
1a0038a0:	4f532045 	.word	0x4f532045
1a0038a4:	3a41444e 	.word	0x3a41444e
1a0038a8:	0d4e4f20 	.word	0x0d4e4f20
1a0038ac:	00000000 	.word	0x00000000
1a0038b0:	4944454d 	.word	0x4944454d
1a0038b4:	41432052 	.word	0x41432052
1a0038b8:	2e4f504d 	.word	0x2e4f504d
1a0038bc:	0d202e2e 	.word	0x0d202e2e
1a0038c0:	ffffff00 	.word	0xffffff00

1a0038c4 <ExtRateIn>:
1a0038c4:	00000000                                ....

1a0038c8 <GpioButtons>:
1a0038c8:	08000400 09010900                       ........

1a0038d0 <GpioLeds>:
1a0038d0:	01050005 0e000205 0c010b01              ............

1a0038dc <GpioPorts>:
1a0038dc:	03030003 0f050403 05031005 07030603     ................
1a0038ec:	ffff0802                                ....

1a0038f0 <OscRateIn>:
1a0038f0:	00b71b00                                ....

1a0038f4 <InitClkStates>:
1a0038f4:	01010f01                                ....

1a0038f8 <pinmuxing>:
1a0038f8:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a003908:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a003918:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a003928:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a003938:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a003948:	00d50301 00d50401 00160107 00560207     ..............V.
1a003958:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a003968:	00570206                                ..W.

1a00396c <UART_BClock>:
1a00396c:	01a201c2 01620182                       ......b.

1a003974 <UART_PClock>:
1a003974:	00820081 00a200a1 08040201 0f0f0f03     ................
1a003984:	000000ff                                ....

1a003988 <periph_to_base>:
1a003988:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a003998:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0039a8:	000100e0 01000100 01200003 00060120     .......... . ...
1a0039b8:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a0039c8:	01820013 00120182 01a201a2 01c20011     ................
1a0039d8:	001001c2 01e201e2 0202000f 000e0202     ................
1a0039e8:	02220222 0223000d 001c0223              "."...#.#...

1a0039f4 <InitClkStates>:
1a0039f4:	00010100 00010909 0001090a 01010701     ................
1a003a04:	00010902 00010906 0101090c 0001090d     ................
1a003a14:	0001090e 0001090f 00010910 00010911     ................
1a003a24:	00010912 00010913 00011114 00011119     ................
1a003a34:	0001111a 0001111b                       ........

1a003a3c <lpcUarts>:
1a003a3c:	40081000 06020406 00180205 40081000     ...@...........@
1a003a4c:	09070509 00180706 40082000 00000000     ......... .@....
1a003a5c:	00190000 400c1000 07060107 001a0602     .......@........
1a003a6c:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a003a7c:	02020302 001b0204                       ........

1a003a84 <gpioPinsInit>:
1a003a84:	02000104 00050701 05010d03 04080100     ................
1a003a94:	02020002 02000304 00000403 04070002     ................
1a003aa4:	030c0300 09050402 05040103 04030208     ................
1a003ab4:	04020305 06040504 0802000c 03000b06     ................
1a003ac4:	00090607 07060503 060f0504 03030004     ................
1a003ad4:	02000404 00050404 06040502 04060200     ................
1a003ae4:	0c050408 05040a04 0003010e 14010a00     ................
1a003af4:	010f0000 0d000012 00001101 0010010c     ................
1a003b04:	07070300 000f0300 01000001 00000000     ................
1a003b14:	000a0600 08060603 06100504 04030005     ................
1a003b24:	03000106 04090400 04010d05 010b0000     ................
1a003b34:	0200000f 00000001 00010104 02010800     ................
1a003b44:	01090000 09010006 05040002 04010200     ................
1a003b54:	02020105 02020504 0e00000a 01000b02     ................
1a003b64:	000c020b ffff0c01                       ........

1a003b6c <__sf_fake_stderr>:
	...

1a003b8c <__sf_fake_stdin>:
	...

1a003bac <__sf_fake_stdout>:
	...

1a003bcc <_global_impure_ptr>:
1a003bcc:	1000004c 4f500043 00584953 2d23002e     L...C.POSIX...#-
1a003bdc:	00202b30 004c6c68 45676665 30004746     0+ .hlL.efgEFG.0
1a003bec:	34333231 38373635 43424139 00464544     123456789ABCDEF.
1a003bfc:	33323130 37363534 62613938 66656463     0123456789abcdef
1a003c0c:	ffffff00 1a003c2e 1a003c31 1a003c34     .....<..1<..4<..
1a003c1c:	61462d41 3938662d 33323130 37363534     A-Fa-f8901234567
1a003c2c:	2d2b005d 00303000                        ].+-.00.xX.

1a003c37 <_ctype_>:
1a003c37:	20202000 20202020 28282020 20282828     .         ((((( 
1a003c47:	20202020 20202020 20202020 20202020                     
1a003c57:	10108820 10101010 10101010 10101010      ...............
1a003c67:	04040410 04040404 10040404 10101010     ................
1a003c77:	41411010 41414141 01010101 01010101     ..AAAAAA........
1a003c87:	01010101 01010101 01010101 10101010     ................
1a003c97:	42421010 42424242 02020202 02020202     ..BBBBBB........
1a003ca7:	02020202 02020202 02020202 10101010     ................
1a003cb7:	00000020 00000000 00000000 00000000      ...............
	...
